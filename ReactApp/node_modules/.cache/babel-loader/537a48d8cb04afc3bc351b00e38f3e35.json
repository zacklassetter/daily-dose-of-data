{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zack\\\\source\\\\repos\\\\Quinten\\\\Web_Project\\\\ReactApp\\\\src\\\\AvlTree\\\\AvlTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './AvlTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\nimport Element from '../Element/Element.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary search tree\n\n\nclass AvlTreeClass {\n  constructor() {\n    this.root = null;\n    this.height = 0;\n  } //standard bst insertion method\n\n\n  StandardInsert(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height;\n  } //standard bst remove\n\n\n  StandardRemove(value) {\n    var current = this.root;\n    var parent = null; //find a node equal to value else exit function\n\n    while (true) {\n      if (current === null) return;\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else break;\n    } //if node has no children set parent child to null\n\n\n    if (current.left === null && current.right === null) {\n      if (parent === null) this.root = null;else if (value < parent.value) parent.left = null;else parent.right = null;\n    } //if node has 1 child set parent child to current child\n    else if (current.right === null) {\n        if (parent === null) this.root = current.left;else if (value < parent.value) parent.left = current.left;else parent.right = current.left;\n      } else if (current.left === null) {\n        if (parent === null) this.root = current.right;else if (value < parent.value) parent.left = current.right;else parent.right = current.right;\n      } //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\n      else {\n          //find the leftmost child of right subtree of current, set current to that value\n          var leftmostChild = current.right;\n          parent = current;\n\n          while (leftmostChild.left !== null) {\n            parent = leftmostChild;\n            leftmostChild = leftmostChild.left;\n          }\n\n          current.value = leftmostChild.value; //delete the leftmost child of right subtree\n\n          current = leftmostChild;\n\n          if (current.left === null && current.right === null) {\n            if (current.value < parent.value) parent.left = null;else parent.right = null;\n          } else if (current.right === null) {\n            if (current.value < parent.value) parent.left = current.left;else parent.right = current.left;\n          } else {\n            if (current.value < parent.value) parent.left = current.right;else parent.right = current.right;\n          }\n        }\n  }\n\n}\n\nconst AvlTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new AvlTreeClass()); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {\n    const height = randInt(2, 6);\n    var newTree = new AvlTreeClass();\n    var insertValue = null;\n\n    while (newTree.height <= height) {\n      insertValue = randInt(-999, 1000);\n      newTree.insert(insertValue);\n    }\n\n    newTree.remove(insertValue);\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  useEffect(randomTree);\n  return /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n    tree: tree\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvlTree, \"QIkvWIihVM5XruXJJLBZ5q21YQ0=\");\n\n_c = AvlTree;\nexport default AvlTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvlTree\");","map":{"version":3,"sources":["C:/Users/zack/source/repos/Quinten/Web_Project/ReactApp/src/AvlTree/AvlTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","Element","BinaryTreeNode","constructor","value","left","right","AvlTreeClass","root","height","StandardInsert","current","parent","StandardRemove","leftmostChild","AvlTree","forceRender","tree","setTree","forceUpdate","renders","randomTree","randInt","newTree","insertValue","insert","remove","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    //standard bst insertion method\r\n    StandardInsert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n\r\n    //standard bst remove\r\n    StandardRemove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AvlTree = () => {\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        \r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        newTree.remove(insertValue);\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    useEffect(randomTree);\r\n\r\n\r\n    return (\r\n        <BinaryTreeDisplay tree={tree}/>\r\n        );\r\n}\r\n\r\n\r\nexport default AvlTree;"]},"metadata":{},"sourceType":"module"}