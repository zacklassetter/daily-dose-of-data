{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zack\\\\source\\\\repos\\\\quinten\\\\web_project\\\\reactapp\\\\src\\\\AvlTree\\\\AvlTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './AvlTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\nimport Element from '../Element/Element.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nfunction getParent(node, tree) {\n  var parent = null;\n  var cur = tree.root;\n\n  if (node != null) {\n    while (cur != node) {\n      if (node.value > cur.value) {\n        parent = cur;\n        cur = parent.right;\n      } else {\n        parent = cur;\n        cur = parent.left;\n      }\n    }\n\n    return parent;\n  } else console.log(\"node is null, no parent\");\n}\n\nfunction getHeight(node) {\n  //if (node != null) {\n  if (typeof node === \"object\" && node != null) {\n    if (getHeight(node.left) > getHeight(node.right)) {\n      return 1 + getHeight(node.left);\n    } else return 1 + getHeight(node.right);\n  } else return 0;\n} //function getHeight(node) {\n//    if (typeof node === \"object\" && node != null) {\n//        console.log(node.value);\n//        console.log(node.left);\n//    }\n//    return getHeightHelp(node);\n//}\n\n\nfunction getBalance(node) {\n  if (node !== null && typeof node != \"undefined\") {\n    return getHeight(node.right) - getHeight(node.left);\n  }\n}\n\nfunction rotateRight(node, tree) {\n  var newRoot = node.left;\n  if (node === tree.root) tree.root = newRoot;\n  var T2 = newRoot.right;\n  newRoot.right = node;\n  node.left = T2; //tree.root = newRoot;\n}\n\nfunction rotateLeft(node, tree) {\n  var newRoot = node.right;\n  if (node === tree.root) tree.root = newRoot;\n  var T2 = newRoot.left;\n  newRoot.left = node;\n  node.right = T2;\n}\n\nfunction getLeftmost(node) {\n  var leftmost = node;\n\n  if (leftmost != null) {\n    while (leftmost.left != null) {\n      leftmost = leftmost.left;\n    }\n  }\n\n  return leftmost;\n}\n\nfunction getRightMost(node) {\n  var rightmost = node;\n\n  if (rightmost != null) {\n    while (rightmost.right != null) {\n      rightmost = rightmost.right;\n    }\n  }\n\n  return rightmost;\n} //class for binary search tree\n\n\nclass AvlTreeClass {\n  constructor() {\n    this.root = null;\n    this.height = 0;\n    this.list = [];\n  }\n\n  preOrder(node) {\n    if (node == null) {\n      return;\n    }\n\n    this.list.push(node.value);\n    this.preOrder(node.left);\n    this.preOrder(node.right); //if (node === getRightMost(root)) {\n    //    return list;\n    //}\n  }\n\n  inOrder(node) {\n    if (node == null) {\n      return;\n    }\n\n    this.inOrder(node.left);\n    this.list.push(node.value);\n    this.inOrder(node.right);\n  }\n\n  insertWithRot(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height; //do rotations\n  }\n\n  insert(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height;\n  }\n\n  remove(value) {\n    var current = this.root;\n    var parent = null; //find a node equal to value else exit function\n\n    while (true) {\n      if (current === null) return;\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else break;\n    } //if node has no children set parent child to null\n\n\n    if (current.left === null && current.right === null) {\n      if (parent === null) this.root = null;else if (value < parent.value) parent.left = null;else parent.right = null;\n    } //if node has 1 child set parent child to current child\n    else if (current.right === null) {\n        if (parent === null) this.root = current.left;else if (value < parent.value) parent.left = current.left;else parent.right = current.left;\n      } else if (current.left === null) {\n        if (parent === null) this.root = current.right;else if (value < parent.value) parent.left = current.right;else parent.right = current.right;\n      } //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\n      else {\n          //find the leftmost child of right subtree of current, set current to that value\n          var leftmostChild = current.right;\n          parent = current;\n\n          while (leftmostChild.left !== null) {\n            parent = leftmostChild;\n            leftmostChild = leftmostChild.left;\n          }\n\n          current.value = leftmostChild.value; //delete the leftmost child of right subtree\n\n          current = leftmostChild;\n\n          if (current.left === null && current.right === null) {\n            if (current.value < parent.value) parent.left = null;else parent.right = null;\n          } else if (current.right === null) {\n            if (current.value < parent.value) parent.left = current.left;else parent.right = current.left;\n          } else {\n            if (current.value < parent.value) parent.left = current.right;else parent.right = current.right;\n          }\n        }\n  }\n\n  treeHeight() {\n    return getHeight(this.root);\n  }\n\n}\n\nfunction sortedArrayToBST(arr, start, end) {\n  /* Base Case */\n  if (start > end) {\n    return null;\n  }\n  /* Get the middle element and make it root */\n\n\n  var mid = parseInt((start + end) / 2);\n  var node = new BinaryTreeNode(arr[mid]);\n  /* Recursively construct the left subtree and make it\r\n   left child of root */\n\n  node.left = sortedArrayToBST(arr, start, mid - 1);\n  /* Recursively construct the right subtree and make it\r\n   right child of root */\n\n  node.right = sortedArrayToBST(arr, mid + 1, end);\n  return node;\n} //react component for binary search tree\n\n\nconst AvlTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new AvlTreeClass());\n  const secondRot = useRef(false);\n  const familyLine = useRef([]);\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const findInput = useRef();\n  const speedSlider = useRef();\n  const focus = useRef();\n  const green = useRef();\n  const pink = useRef();\n  const yellow = useRef();\n  const interval = useRef();\n  const animating = useRef();\n  const animationFunction = useRef();\n  const animationValue = useRef();\n  const status = useRef(\"\"); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {\n    if (animating.current) toggleAnimation();\n    const height = randInt(2, 6);\n    var newTree = new AvlTreeClass();\n    var insertValue = null;\n\n    while (newTree.height <= height) {\n      insertValue = randInt(-999, 1000);\n      newTree.insert(insertValue);\n    }\n\n    newTree.remove(insertValue);\n    newTree.inOrder(newTree.root);\n    console.log(newTree.list);\n    var treeList = newTree.list;\n    var n = newTree.list.length;\n    newTree.root = sortedArrayToBST(treeList, 0, n - 1);\n    setTree(newTree); //toggleAnimation();\n    //animationFunction.current = rotateStep;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to pause or continue animation\n\n\n  const toggleAnimation = useCallback(() => {\n    if (animating.current) {\n      clearInterval(interval.current);\n      animating.current = false;\n      focus.current = null;\n      animationFunction.current = null;\n      animationValue.current = null;\n    } else {\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      green.current = null;\n      yellow.current = null;\n      animating.current = true;\n    }\n  }, []); //initialize the tree to a random BST\n\n  useEffect(randomTree, [toggleAnimation]); //function to insert into the binary search tree on button click\n\n  const insert = () => {\n    if (animating.current) toggleAnimation();\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    insertInput.current.value = null;\n\n    if (tree.root === null) {\n      tree.insert(data);\n      green.current = tree.root;\n      forceUpdate();\n    } else {\n      focus.current = tree.root;\n      forceUpdate();\n      animationFunction.current = insertStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n\n    familyLine.current = [];\n  }; //function to do a single step of insertion animation\n\n\n  const insertStep = () => {\n    status.current = \"Inserting node\";\n    forceUpdate();\n\n    if (animationValue.current < focus.current.value) {\n      familyLine.current.push(focus.current);\n\n      if (focus.current.left === null) {\n        tree.insert(animationValue.current); //familyLine.current.push(focus.current);\n\n        green.current = focus.current.left; //toggleAnimation();\n        //animationFunction.current = rotateStep();\n\n        focus.current = focus.current.left;\n      } else focus.current = focus.current.left;\n    } else if (animationValue.current > focus.current.value) {\n      familyLine.current.push(focus.current);\n\n      if (focus.current.right === null) {\n        tree.insert(animationValue.current); //familyLine.current.push(focus.current);\n\n        green.current = focus.current.right;\n        focus.current = focus.current.right; //toggleAnimation();\n        //animationFunction.current = rotateStep();\n      } else focus.current = focus.current.right;\n    } else {\n      animationFunction.current = rotateStep;\n    }\n  }; //function to remove from binary search tree on button click\n\n\n  const remove = () => {\n    if (animating.current) toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(removeInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      if (focus.current.value === data) pink.current = focus.current;\n      forceUpdate();\n      animationFunction.current = removeStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n\n    removeInput.current.value = null;\n    familyLine.current = [];\n  }; //function to do a single step of remove animation\n\n\n  const removeStep = () => {\n    status.current = \"Removing node\";\n\n    if (animationValue.current < focus.current.value) {\n      familyLine.current.push(focus.current);\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      familyLine.current.push(focus.current);\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else {\n      if (familyLine.current.length === 0) {\n        var rightTree = tree.root.right;\n\n        if (rightTree != null) {\n          if (getParent(getLeftmost(rightTree), tree) === tree.root) {\n            tree.remove(animationValue.current);\n            familyLine.current.push(tree.root);\n            pink.current = null;\n            animationFunction.current = rotateStepDelete;\n            return;\n          } else familyLine.current.push(getParent(getLeftmost(rightTree), tree)); //familyLine.current.push((getParent(getLeftmost(rightTree), tree) === tree.root ? rightTree : getParent(getLeftmost(rightTree), tree)));\n\n        } else {\n          if (getParent(getRightMost(tree.root.left), tree) === tree.root) {\n            tree.remove(animationValue.current);\n            familyLine.current.push(tree.root);\n            pink.current = null;\n            animationFunction.current = rotateStepDelete;\n            return;\n          } else familyLine.current.push(getParent(getRightMost(tree.root.left), tree)); //familyLine.current.push((getParent(getRightMost(tree.root.left), tree) === tree.root ? tree.root.left : getParent(getRightMost(tree.root.left), tree)));\n\n        }\n      }\n\n      tree.remove(animationValue.current);\n      pink.current = null;\n      animationFunction.current = rotateStepDelete;\n    }\n  }; //function to start find animation\n\n\n  const find = () => {\n    if (animating.current) familyLine.current = [];\n    toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(findInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      animationFunction.current = findStep;\n      animationValue.current = data;\n      toggleAnimation();\n      if (focus.current.value === data) yellow.current = focus.current;\n      forceUpdate();\n    }\n\n    findInput.current.value = null;\n  }; //function to to a single step of find animation\n\n\n  const findStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else {\n      toggleAnimation();\n    }\n  };\n\n  const rotateStepDelete = () => {\n    var family = [];\n\n    for (var i = 0; i < familyLine.current.length; i++) {\n      family.push(familyLine.current[i]);\n    }\n\n    if (family.length === 0) toggleAnimation();else {\n      //z is first unbalanced node\n      var z = family.pop(); //var child;\n\n      while (family.length > 0 && Math.abs(getBalance(z)) < 2) {\n        z = family.pop();\n      }\n\n      if (Math.abs(getBalance(z)) < 2) {\n        status.current = \"Tree is balanced\";\n        console.log(\"Tree is balanced\");\n        toggleAnimation();\n      }\n\n      console.log(typeof z === \"object\" ? z.value : z);\n      console.log(typeof z === \"object\" ? z.left : z);\n      console.log(typeof z);\n      familyLine.current = [];\n      familyLine.current.push(z); //determine largest height child\n\n      if (z == null || typeof z == \"undefined\") {\n        status.current = \"Tree is empty\";\n        toggleAnimation();\n      } else if (z.left != null || z.right != null) {\n        var y = null; //largest height child\n\n        if (getHeight(z.left) >= getHeight(z.right)) {\n          y = z.left;\n\n          if (y != null) {\n            console.log(\"left: \" + getHeight(y.left));\n            console.log(\"right: \" + getHeight(y.right));\n          }\n        } else y = z.right;\n\n        var x = null;\n\n        if (y != null) {\n          if (y.value < z.value) {\n            if (getHeight(y.left) >= getHeight(y.right)) x = y.left;else x = y.right;\n          } else {\n            if (getHeight(y.left) > getHeight(y.right)) x = y.left;else x = y.right;\n          }\n        } //familyLine.current.push(y);\n        //familyLine.current.push(x);\n\n      }\n\n      console.log(\"z: \" + (z != null ? z.value : \"null\"));\n      console.log(\"y: \" + (y != null ? y.value : \"null\"));\n      console.log(\"x: \" + (x != null ? x.value : \"null\")); //if (Math.abs(getBalance(z)) < 2) {\n      //    //tree is balanced \n      //    status.current = \"Tree is balanced\"\n      //    toggleAnimation();\n      //}\n      ////left left\n\n      if (getBalance(z) < -1 && x.value < y.value) {\n        rotateRight(z, tree);\n        status.current = \"Rotating Node: \" + z.value + \" right\";\n        var parent = getParent(y, tree);\n\n        if (parent != null) {\n          if (parent.value < z.value) {\n            parent.right = y;\n          } else parent.left = y;\n        } //familyLine.current.shift();\n\n      } ////left right\n\n\n      if (getBalance(z) < -1 && x.value > y.value) {\n        rotateLeft(y, tree);\n        status.current = \"Rotating Node: \" + y.value + \" left\";\n        z.left = x; //familyLine.current.splice(1, 0, r);\n        //z.left = r;\n      } ////right left\n\n\n      if (getBalance(z) > 1 && x.value < y.value) {\n        rotateRight(y, tree);\n        status.current = \"Rotating Node: \" + y.value + \" right\";\n        z.right = x; //familyLine.current.splice(1, 0, l);\n        //z.right = l;\n      } //right right\n\n\n      if (getBalance(z) > 1 && x.value > y.value) {\n        var parent = getParent(z, tree);\n        rotateLeft(z, tree);\n        status.current = \"Rotating Node: \" + z.value + \" left\";\n\n        if (parent != null) {\n          if (parent.value < z.value) {\n            parent.right = y;\n          } else parent.left = y;\n        } else tree.root = y; //familyline.current.shift();\n\n      }\n\n      forceUpdate(); //toggleAnimation();\n    }\n  };\n\n  const rotateStep = () => {\n    //create new array copy of family line\n    var family = [];\n\n    for (var i = 0; i < familyLine.current.length; i++) {\n      family.push(familyLine.current[i]);\n    }\n\n    var inserted = green.current; //rotateRight(tree.root, tree);\n    //rotateLeft(tree.root, tree);\n    //var family = familyLine.current;\n\n    if (family.length === 0) toggleAnimation();else {\n      var firstUnbalanced = family.pop(); //var child;\n\n      while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\n        firstUnbalanced = family.pop();\n      }\n\n      if (Math.abs(getBalance(firstUnbalanced)) < 2) {\n        //tree is balanced \n        status.current = \"Tree is balanced\";\n        toggleAnimation();\n      } //Left Left case\n\n\n      if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\n        var l = firstUnbalanced.left;\n        rotateRight(firstUnbalanced, tree);\n        status.current = \"Rotating Node: \" + firstUnbalanced.value + \" right\"; //insert on correct side\n\n        var grandP = family.pop();\n\n        if (grandP) {\n          if (grandP.value < firstUnbalanced.value) {\n            grandP.right = l;\n          } else grandP.left = l;\n        } else tree.root = l;\n\n        secondRot.current = true;\n        familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\n      } //Left Right case\n\n\n      if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\n        var r = firstUnbalanced.left.right;\n        rotateLeft(firstUnbalanced.left, tree);\n        status.current = \"Rotating Node: \" + firstUnbalanced.left.value + \" left\";\n        firstUnbalanced.left = r;\n      } //Right Right case\n\n\n      if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\n        var r = firstUnbalanced.right;\n        rotateLeft(firstUnbalanced, tree);\n        status.current = \"Rotating Node: \" + firstUnbalanced.value + \" left\"; //insert on correct side\n\n        var grandP = family.pop();\n\n        if (grandP) {\n          if (grandP.value < firstUnbalanced.value) {\n            grandP.right = r;\n          } else grandP.left = r;\n        } else tree.root = r;\n\n        familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\n      } //Right Left Case\n\n\n      if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\n        var l = firstUnbalanced.right.left;\n        rotateRight(firstUnbalanced.right, tree);\n        status.current = \"Rotating Node: \" + firstUnbalanced.right + \" right\";\n        familyLine.current.pop();\n        firstUnbalanced.right = l;\n      }\n    }\n    forceUpdate();\n  }; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    if (animationFunction.current != null) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: randomTree,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"insertButton\",\n          onClick: insert,\n          children: \"Insert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: insertInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"removeButton\",\n          onClick: remove,\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: removeInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"findButton\",\n          onClick: find,\n          children: \"Find\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: findInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 813,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: [/*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n          tree: tree,\n          border: focus.current,\n          green: green.current,\n          pink: pink.current,\n          yellow: yellow.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance of Tree: \", getBalance(tree.root)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: status.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Inserted Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element to Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Found Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 798,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvlTree, \"vGRi/j655cL3eyuFlLQSgXfary0=\");\n\n_c = AvlTree;\nexport default AvlTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvlTree\");","map":{"version":3,"sources":["C:/Users/zack/source/repos/quinten/web_project/reactapp/src/AvlTree/AvlTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","Element","BinaryTreeNode","constructor","value","left","right","getParent","node","tree","parent","cur","root","console","log","getHeight","getBalance","rotateRight","newRoot","T2","rotateLeft","getLeftmost","leftmost","getRightMost","rightmost","AvlTreeClass","height","list","preOrder","push","inOrder","insertWithRot","current","insert","remove","leftmostChild","treeHeight","sortedArrayToBST","arr","start","end","mid","parseInt","AvlTree","forceRender","setTree","secondRot","familyLine","insertInput","removeInput","findInput","speedSlider","focus","green","pink","yellow","interval","animating","animationFunction","animationValue","status","forceUpdate","renders","randomTree","toggleAnimation","randInt","newTree","insertValue","treeList","n","length","min","max","Math","floor","random","clearInterval","setInterval","data","isNaN","insertStep","rotateStep","removeStep","rightTree","rotateStepDelete","find","findStep","family","i","z","pop","abs","y","x","inserted","firstUnbalanced","l","grandP","splice","indexOf","r","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n}\r\n\r\nfunction getParent(node, tree) {\r\n    var parent = null;\r\n    var cur = tree.root;\r\n    if (node != null) {\r\n        \r\n        while (cur != node) {\r\n            if (node.value > cur.value) {\r\n                parent = cur;\r\n                cur = parent.right;\r\n            }\r\n            else {\r\n                parent = cur;\r\n                cur = parent.left;\r\n            }\r\n        }\r\n        return parent;\r\n    }\r\n    else console.log(\"node is null, no parent\")\r\n}\r\n\r\nfunction getHeight(node) {\r\n    //if (node != null) {\r\n    \r\n    if (typeof node === \"object\" && node != null) {\r\n        \r\n        if (getHeight(node.left) > getHeight(node.right)) {\r\n            return 1 + getHeight(node.left);\r\n        }\r\n        else return 1 + getHeight(node.right);\r\n    }\r\n    else return 0;\r\n}\r\n\r\n//function getHeight(node) {\r\n//    if (typeof node === \"object\" && node != null) {\r\n//        console.log(node.value);\r\n//        console.log(node.left);\r\n\r\n//    }\r\n//    return getHeightHelp(node);\r\n//}\r\n\r\nfunction getBalance(node) {\r\n    if (node !== null && typeof node != \"undefined\") {\r\n        return getHeight(node.right) - getHeight(node.left);\r\n    }\r\n} \r\n\r\nfunction rotateRight(node, tree) {\r\n    var newRoot = node.left;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.right;\r\n\r\n    newRoot.right = node;\r\n    node.left = T2;\r\n    \r\n    \r\n    //tree.root = newRoot;\r\n}\r\n\r\nfunction rotateLeft(node, tree) {\r\n    var newRoot = node.right;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.left;\r\n    newRoot.left = node;\r\n    node.right = T2;\r\n}\r\n\r\nfunction getLeftmost(node) {\r\n    var leftmost = node;\r\n    if (leftmost != null) {\r\n        while (leftmost.left != null) {\r\n            leftmost = leftmost.left;\r\n        }\r\n    }\r\n    return leftmost;\r\n}\r\n\r\nfunction getRightMost(node) {\r\n    var rightmost = node;\r\n    if (rightmost != null) {\r\n        while (rightmost.right != null) {\r\n            rightmost = rightmost.right;\r\n        }\r\n    }\r\n    return rightmost;\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n        this.list = [];\r\n    }\r\n    \r\n\r\n    preOrder(node) {\r\n    if (node == null) {\r\n        return\r\n    }\r\n    this.list.push(node.value);\r\n    this.preOrder(node.left);\r\n    this.preOrder(node.right);\r\n\r\n        //if (node === getRightMost(root)) {\r\n        //    return list;\r\n        //}\r\n    }\r\n\r\n    inOrder(node) {\r\n        if (node == null) {\r\n            return\r\n        }\r\n        this.inOrder(node.left);\r\n        this.list.push(node.value);\r\n        this.inOrder(node.right);\r\n    }\r\n\r\n    insertWithRot(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n\r\n        //do rotations\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    treeHeight() {\r\n        return getHeight(this.root);\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction sortedArrayToBST(arr, start, end) {\r\n    /* Base Case */\r\n    if (start > end) {\r\n        return null;\r\n    }\r\n    /* Get the middle element and make it root */\r\n    var mid = parseInt((start + end) / 2);\r\n    var node = new BinaryTreeNode(arr[mid]);\r\n    /* Recursively construct the left subtree and make it\r\n     left child of root */\r\n    node.left = sortedArrayToBST(arr, start, mid - 1);\r\n    /* Recursively construct the right subtree and make it\r\n     right child of root */\r\n    node.right = sortedArrayToBST(arr, mid + 1, end);\r\n    return node;\r\n}\r\n\r\n//react component for binary search tree\r\nconst AvlTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n    const secondRot = useRef(false);\r\n    const familyLine = useRef([]);\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n    const status = useRef(\"\");\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        \r\n        newTree.remove(insertValue);\r\n        newTree.inOrder(newTree.root)\r\n        console.log(newTree.list);\r\n\r\n        var treeList = newTree.list;\r\n        var n = newTree.list.length;\r\n        newTree.root = sortedArrayToBST(treeList, 0, n - 1);\r\n\r\n        setTree(newTree);\r\n\r\n\r\n        //toggleAnimation();\r\n        //animationFunction.current = rotateStep;\r\n    }\r\n\r\n    \r\n\r\n\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        \r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        status.current = \"Inserting node\";\r\n        forceUpdate();\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.left;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n                focus.current = focus.current.left;\r\n            } else\r\n                focus.current = focus.current.left;\r\n            \r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.right;\r\n                focus.current = focus.current.right;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.right;\r\n            \r\n        } else {\r\n            animationFunction.current = rotateStep;\r\n        }\r\n        \r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        status.current = \"Removing node\";\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            if (familyLine.current.length === 0) {\r\n                var rightTree = tree.root.right;\r\n                if (rightTree != null) {\r\n                    if (getParent(getLeftmost(rightTree), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getLeftmost(rightTree), tree));\r\n\r\n\r\n                    //familyLine.current.push((getParent(getLeftmost(rightTree), tree) === tree.root ? rightTree : getParent(getLeftmost(rightTree), tree)));\r\n                } \r\n                else {\r\n\r\n                    if (getParent(getRightMost(tree.root.left), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getRightMost(tree.root.left), tree));\r\n\r\n                    //familyLine.current.push((getParent(getRightMost(tree.root.left), tree) === tree.root ? tree.root.left : getParent(getRightMost(tree.root.left), tree)));\r\n                }\r\n            }\r\n            tree.remove(animationValue.current);\r\n            \r\n            pink.current = null;\r\n            animationFunction.current = rotateStepDelete;\r\n        }\r\n    }\r\n\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current)\r\n            familyLine.current = [];\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    const rotateStepDelete = () => {\r\n        \r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n\r\n            //z is first unbalanced node\r\n            \r\n            var z = family.pop();\r\n            \r\n            \r\n            \r\n            //var child;\r\n\r\n            while (family.length > 0 && Math.abs(getBalance(z)) < 2) {\r\n                z = family.pop();\r\n\r\n            }\r\n            if (Math.abs(getBalance(z)) < 2) {\r\n                status.current = \"Tree is balanced\";\r\n                console.log(\"Tree is balanced\")\r\n                toggleAnimation();\r\n            }\r\n            console.log((typeof z === \"object\" ? z.value : z));\r\n            console.log((typeof z === \"object\" ? z.left : z));\r\n            console.log(typeof z);\r\n            familyLine.current = [];\r\n            familyLine.current.push(z);\r\n            //determine largest height child\r\n\r\n            if (z == null || typeof z == \"undefined\") {\r\n                status.current = \"Tree is empty\"\r\n                toggleAnimation();\r\n            }\r\n            else if (z.left != null || z.right != null) {\r\n                var y = null; //largest height child\r\n                if (getHeight(z.left) >= getHeight(z.right)) {\r\n                    y = z.left\r\n                    if (y != null) {\r\n                        console.log(\"left: \" + getHeight(y.left));\r\n                        console.log(\"right: \" + getHeight(y.right));\r\n                    }\r\n                }\r\n                else y = z.right;\r\n                var x = null;\r\n                if (y != null) {\r\n                    if (y.value < z.value) {\r\n                        if (getHeight(y.left) >= getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n                    else {\r\n                        if (getHeight(y.left) > getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n                    \r\n                }\r\n                //familyLine.current.push(y);\r\n                //familyLine.current.push(x);\r\n            }\r\n            console.log(\"z: \" + (z != null ? z.value : \"null\"));\r\n            console.log(\"y: \" + (y != null ? y.value : \"null\"));\r\n            console.log(\"x: \" + (x != null ? x.value : \"null\"));\r\n\r\n            //if (Math.abs(getBalance(z)) < 2) {\r\n            //    //tree is balanced \r\n            //    status.current = \"Tree is balanced\"\r\n            //    toggleAnimation();\r\n\r\n            //}\r\n\r\n            ////left left\r\n            if (getBalance(z) < -1 && x.value < y.value) {\r\n                rotateRight(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" right\"\r\n                var parent = getParent(y, tree);\r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                //familyLine.current.shift();\r\n            }\r\n\r\n            ////left right\r\n            if (getBalance(z) < -1 && x.value > y.value) {\r\n                \r\n                rotateLeft(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" left\"\r\n                z.left = x;\r\n                \r\n                //familyLine.current.splice(1, 0, r);\r\n                //z.left = r;\r\n            }\r\n\r\n            ////right left\r\n            if (getBalance(z) > 1 && x.value < y.value) {\r\n                \r\n                rotateRight(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" right\"\r\n                z.right = x;\r\n                //familyLine.current.splice(1, 0, l);\r\n                //z.right = l;\r\n\r\n                \r\n\r\n            }\r\n\r\n            //right right\r\n            if (getBalance(z) > 1 && x.value > y.value) {\r\n                var parent = getParent(z, tree);\r\n                rotateLeft(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" left\"\r\n                \r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                else tree.root = y;\r\n                //familyline.current.shift();\r\n            } \r\n\r\n            forceUpdate();\r\n            //toggleAnimation();\r\n\r\n        }\r\n    }\r\n\r\n    const rotateStep = () => {\r\n        \r\n        //create new array copy of family line\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n        \r\n\r\n        var inserted = green.current;\r\n        //rotateRight(tree.root, tree);\r\n        //rotateLeft(tree.root, tree);\r\n        //var family = familyLine.current;\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n            var firstUnbalanced = family.pop();\r\n            \r\n            //var child;\r\n\r\n            while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\r\n                firstUnbalanced = family.pop();\r\n\r\n            }\r\n\r\n\r\n            if (Math.abs(getBalance(firstUnbalanced)) < 2) {\r\n                //tree is balanced \r\n                status.current = \"Tree is balanced\"\r\n                toggleAnimation();\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            //Left Left case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\r\n\r\n\r\n                var l = firstUnbalanced.left;\r\n                rotateRight(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" right\"\r\n\r\n                //insert on correct side\r\n                var grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = l;\r\n                    }\r\n                    else grandP.left = l;\r\n                } else tree.root = l;\r\n                secondRot.current = true;\r\n                familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\r\n\r\n\r\n            }\r\n\r\n\r\n            //Left Right case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n                var r = firstUnbalanced.left.right;\r\n                rotateLeft(firstUnbalanced.left, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.left.value + \" left\";\r\n\r\n                firstUnbalanced.left = r;\r\n            }\r\n\r\n            //Right Right case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\r\n                var r = firstUnbalanced.right;\r\n                rotateLeft(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" left\";\r\n                //insert on correct side\r\n                var grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = r;\r\n                    }\r\n                    else grandP.left = r;\r\n                } else tree.root = r;\r\n                familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\r\n\r\n            }\r\n\r\n            //Right Left Case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\r\n                var l = firstUnbalanced.right.left;\r\n                rotateRight(firstUnbalanced.right, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.right + \" right\";\r\n                familyLine.current.pop();\r\n                firstUnbalanced.right = l;\r\n\r\n\r\n\r\n            }\r\n\r\n            \r\n        }\r\n        forceUpdate();\r\n        \r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n                    <p>Balance of Tree: {getBalance(tree.root)}</p>\r\n                    <p>{status.current}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AvlTree;"]},"metadata":{},"sourceType":"module"}