{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zack\\\\source\\\\repos\\\\quinten\\\\web_project\\\\reactapp\\\\src\\\\AvlTree\\\\AvlTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './AvlTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\nimport Element from '../Element/Element.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nfunction getParent(node, tree) {\n  var parent = null;\n  var cur = tree.root;\n\n  while (cur != node) {\n    if (node.value > cur.value) {\n      parent = cur;\n      cur = parent.right;\n    } else {\n      parent = cur;\n      cur = parent.left;\n    }\n  }\n\n  return parent;\n}\n\nfunction getHeight(node) {\n  if (node !== null) {\n    if (getHeight(node.left) > getHeight(node.right)) {\n      return 1 + getHeight(node.left);\n    } else return 1 + getHeight(node.right);\n  } else return 0;\n}\n\nfunction getBalance(node) {\n  if (node !== null) {\n    return getHeight(node.right) - getHeight(node.left);\n  }\n}\n\nfunction rotateRight(node, tree) {\n  var newRoot = node.left;\n  if (node === tree.root) tree.root = newRoot;\n  var T2 = newRoot.right;\n  newRoot.right = node;\n  node.left = T2; //tree.root = newRoot;\n}\n\nfunction rotateLeft(node, tree) {\n  var newRoot = node.right;\n  if (node === tree.root) tree.root = newRoot;\n  var T2 = newRoot.left;\n  newRoot.left = node;\n  node.right = T2;\n} //class for binary search tree\n\n\nclass AvlTreeClass {\n  constructor() {\n    this.root = null;\n    this.height = 0;\n  }\n\n  insertWithRot(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height; //do rotations\n  }\n\n  insert(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height;\n  }\n\n  remove(value) {\n    var current = this.root;\n    var parent = null; //find a node equal to value else exit function\n\n    while (true) {\n      if (current === null) return;\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else break;\n    } //if node has no children set parent child to null\n\n\n    if (current.left === null && current.right === null) {\n      if (parent === null) this.root = null;else if (value < parent.value) parent.left = null;else parent.right = null;\n    } //if node has 1 child set parent child to current child\n    else if (current.right === null) {\n        if (parent === null) this.root = current.left;else if (value < parent.value) parent.left = current.left;else parent.right = current.left;\n      } else if (current.left === null) {\n        if (parent === null) this.root = current.right;else if (value < parent.value) parent.left = current.right;else parent.right = current.right;\n      } //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\n      else {\n          //find the leftmost child of right subtree of current, set current to that value\n          var leftmostChild = current.right;\n          parent = current;\n\n          while (leftmostChild.left !== null) {\n            parent = leftmostChild;\n            leftmostChild = leftmostChild.left;\n          }\n\n          current.value = leftmostChild.value; //delete the leftmost child of right subtree\n\n          current = leftmostChild;\n\n          if (current.left === null && current.right === null) {\n            if (current.value < parent.value) parent.left = null;else parent.right = null;\n          } else if (current.right === null) {\n            if (current.value < parent.value) parent.left = current.left;else parent.right = current.left;\n          } else {\n            if (current.value < parent.value) parent.left = current.right;else parent.right = current.right;\n          }\n        }\n  }\n\n  treeHeight() {\n    return getHeight(this.root);\n  }\n\n} //react component for binary search tree\n\n\nconst AvlTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new AvlTreeClass());\n  const secondRot = useRef(false);\n  const familyLine = useRef([]);\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const findInput = useRef();\n  const speedSlider = useRef();\n  const focus = useRef();\n  const green = useRef();\n  const pink = useRef();\n  const yellow = useRef();\n  const interval = useRef();\n  const animating = useRef();\n  const animationFunction = useRef();\n  const animationValue = useRef();\n  const status = useRef(\"\"); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {\n    if (animating.current) toggleAnimation();\n    const height = randInt(2, 6);\n    var newTree = new AvlTreeClass();\n    var insertValue = null;\n\n    while (newTree.height <= height) {\n      insertValue = randInt(-999, 1000);\n      newTree.insert(insertValue);\n    }\n\n    newTree.remove(insertValue);\n    setTree(newTree); //toggleAnimation();\n    //animationFunction.current = rotateStep;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to pause or continue animation\n\n\n  const toggleAnimation = useCallback(() => {\n    if (animating.current) {\n      clearInterval(interval.current);\n      animating.current = false;\n      focus.current = null;\n      animationFunction.current = null;\n      animationValue.current = null;\n    } else {\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      green.current = null;\n      yellow.current = null;\n      animating.current = true;\n    }\n  }, []); //initialize the tree to a random BST\n\n  useEffect(randomTree, [toggleAnimation]); //function to insert into the binary search tree on button click\n\n  const insert = () => {\n    if (animating.current) toggleAnimation();\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    insertInput.current.value = null;\n\n    if (tree.root === null) {\n      tree.insert(data);\n      green.current = tree.root;\n      forceUpdate();\n    } else {\n      focus.current = tree.root;\n      forceUpdate();\n      animationFunction.current = insertStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n\n    familyLine.current = [];\n  }; //function to do a single step of insertion animation\n\n\n  const insertStep = () => {\n    status.current = \"Inserting node\";\n    forceUpdate();\n\n    if (animationValue.current < focus.current.value) {\n      familyLine.current.push(focus.current);\n\n      if (focus.current.left === null) {\n        tree.insert(animationValue.current); //familyLine.current.push(focus.current);\n\n        green.current = focus.current.left; //toggleAnimation();\n        //animationFunction.current = rotateStep();\n\n        focus.current = focus.current.left;\n      } else focus.current = focus.current.left;\n    } else if (animationValue.current > focus.current.value) {\n      familyLine.current.push(focus.current);\n\n      if (focus.current.right === null) {\n        tree.insert(animationValue.current); //familyLine.current.push(focus.current);\n\n        green.current = focus.current.right;\n        focus.current = focus.current.right; //toggleAnimation();\n        //animationFunction.current = rotateStep();\n      } else focus.current = focus.current.right;\n    } else {\n      animationFunction.current = rotateStep;\n    } //console.log(familyLine.current);\n\n  }; //function to remove from binary search tree on button click\n\n\n  const remove = () => {\n    if (animating.current) toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(removeInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      if (focus.current.value === data) pink.current = focus.current;\n      forceUpdate();\n      animationFunction.current = removeStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n\n    removeInput.current.value = null;\n    familyLine.current = [];\n  }; //function to do a single step of remove animation\n\n\n  const removeStep = () => {\n    status.current = \"Removing node\";\n\n    if (animationValue.current < focus.current.value) {\n      familyLine.current.push(focus.current);\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      familyLine.current.push(focus.current);\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else {\n      tree.remove(animationValue.current);\n      if (familyLine.current.length === 0) familyLine.current.push(tree.root);\n      pink.current = null;\n      animationFunction.current = rotateStepDelete;\n    }\n  }; //function to start find animation\n\n\n  const find = () => {\n    if (animating.current) familyLine.current = [];\n    toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(findInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      animationFunction.current = findStep;\n      animationValue.current = data;\n      toggleAnimation();\n      if (focus.current.value === data) yellow.current = focus.current;\n      forceUpdate();\n    }\n\n    findInput.current.value = null;\n  }; //function to to a single step of find animation\n\n\n  const findStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else {\n      toggleAnimation();\n    }\n  };\n\n  const rotateStepDelete = () => {\n    var family = [];\n\n    for (var i = 0; i < familyLine.current.length; i++) {\n      family.push(familyLine.current[i]);\n    }\n\n    if (family.length === 0) toggleAnimation();else {\n      //z is first unbalanced node\n      var z = family.pop(); //console.log(getBalance(firstUnbalanced));\n      //var child;\n\n      while (Math.abs(getBalance(z)) < 2 && family.length > 0) {\n        z = family.pop();\n      }\n\n      familyLine.current = [];\n      familyLine.current.push(z); //determine largest height child\n\n      if (z == null) {\n        status.current = \"Tree is empty\";\n        toggleAnimation();\n      } else if (z.left != null || z.right != null) {\n        var y; //largest height child\n\n        if (getHeight(z.left) > getHeight(z.right)) y = z.left;else y = z.right;\n        var x;\n        if (getHeight(y.left) > getHeight(y.right)) x = y.left;else x = y.right;\n        familyLine.current.push(y);\n        familyLine.current.push(x);\n      }\n\n      console.log(familyLine.current);\n\n      if (Math.abs(getBalance(z)) < 2) {\n        //tree is balanced \n        status.current = \"Tree is balanced\";\n        toggleAnimation();\n      } //left left\n\n\n      if (getBalance(z) < -1 && x.value < y.value) {\n        rotateRight(z, tree);\n        familyLine.current.shift();\n      } //left right\n\n\n      if (getBalance(z) < -1 && x.value > y.value) {\n        var r = familyLine.current.pop();\n        rotateLeft(y, tree);\n        familyLine.current.splice(1, 0, r);\n        z.left = r;\n      } //right left\n\n\n      if (getBalance(z) > 1 && x.value < y.value) {\n        var l = familyLine.current.pop();\n        rotateRight(y);\n        familyLine.current.splice(1, 0, l);\n        z.right(l);\n      } //right right\n\n\n      if (getBalance(z) > 1 && x.value > y.value) {\n        rotateLeft(z, tree);\n        familyLine.current.shift();\n      }\n\n      forceUpdate(); //toggleAnimation();\n    }\n  };\n\n  const rotateStep = () => {\n    console.log(familyLine.current); //create new array copy of family line\n\n    var family = [];\n\n    for (var i = 0; i < familyLine.current.length; i++) {\n      family.push(familyLine.current[i]);\n    }\n\n    var inserted = green.current; //rotateRight(tree.root, tree);\n    //rotateLeft(tree.root, tree);\n    //var family = familyLine.current;\n\n    if (family.length === 0) toggleAnimation();else {\n      var firstUnbalanced = family.pop(); //console.log(getBalance(firstUnbalanced));\n      //var child;\n\n      while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\n        firstUnbalanced = family.pop();\n      }\n\n      if (Math.abs(getBalance(firstUnbalanced)) < 2) {\n        //tree is balanced \n        status.current = \"Tree is balanced\";\n        toggleAnimation();\n      } //Left Left case\n\n\n      if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\n        var l = firstUnbalanced.left;\n        rotateRight(firstUnbalanced, tree); //insert on correct side\n\n        var grandP = family.pop();\n\n        if (grandP) {\n          if (grandP.value < firstUnbalanced.value) {\n            grandP.right = l;\n          } else grandP.left = l;\n        } else tree.root = l;\n\n        secondRot.current = true;\n        familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\n      } //Left Right case\n\n\n      if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\n        var r = firstUnbalanced.left.right;\n        rotateLeft(firstUnbalanced.left, tree);\n        firstUnbalanced.left = r;\n      } //Right Right case\n\n\n      if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\n        var r = firstUnbalanced.right;\n        rotateLeft(firstUnbalanced, tree); //insert on correct side\n\n        var grandP = family.pop();\n\n        if (grandP) {\n          if (grandP.value < firstUnbalanced.value) {\n            grandP.right = r;\n          } else grandP.left = r;\n        } else tree.root = r;\n\n        familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\n      } //Right Left Case\n\n\n      if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\n        var l = firstUnbalanced.right.left;\n        rotateRight(firstUnbalanced.right, tree);\n        familyLine.current.pop();\n        firstUnbalanced.right = l;\n      } ////Left Right case\n      //if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\n      //    var r = firstUnbalanced.left.right;\n      //    rotateLeft(firstUnbalanced.left, tree);\n      //    firstUnbalanced.left = r;\n      //}\n      //console.log(firstUnbalanced.left)\n      //rotateRight(firstUnbalanced, tree);\n      //}\n      //animationFunction.current = rotateStep();\n\n    }\n    forceUpdate();\n  }; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    if (animationFunction.current != null) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: randomTree,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"insertButton\",\n          onClick: insert,\n          children: \"Insert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: insertInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"removeButton\",\n          onClick: remove,\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: removeInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"findButton\",\n          onClick: find,\n          children: \"Find\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: findInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 653,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: [/*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n          tree: tree,\n          border: focus.current,\n          green: green.current,\n          pink: pink.current,\n          yellow: yellow.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance of Tree: \", getBalance(tree.root)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: status.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Inserted Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element to Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Found Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 638,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvlTree, \"vGRi/j655cL3eyuFlLQSgXfary0=\");\n\n_c = AvlTree;\nexport default AvlTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvlTree\");","map":{"version":3,"sources":["C:/Users/zack/source/repos/quinten/web_project/reactapp/src/AvlTree/AvlTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","Element","BinaryTreeNode","constructor","value","left","right","getParent","node","tree","parent","cur","root","getHeight","getBalance","rotateRight","newRoot","T2","rotateLeft","AvlTreeClass","height","insertWithRot","current","insert","remove","leftmostChild","treeHeight","AvlTree","forceRender","setTree","secondRot","familyLine","insertInput","removeInput","findInput","speedSlider","focus","green","pink","yellow","interval","animating","animationFunction","animationValue","status","forceUpdate","renders","randomTree","toggleAnimation","randInt","newTree","insertValue","min","max","Math","floor","random","clearInterval","setInterval","data","parseInt","isNaN","insertStep","push","rotateStep","removeStep","length","rotateStepDelete","find","findStep","family","i","z","pop","abs","y","x","console","log","shift","r","splice","l","inserted","firstUnbalanced","grandP","indexOf","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n}\r\n\r\nfunction getParent(node, tree) {\r\n    var parent = null;\r\n    var cur = tree.root;\r\n    while (cur != node) {\r\n        if (node.value > cur.value) {\r\n            parent = cur;\r\n            cur = parent.right;\r\n        }\r\n        else {\r\n            parent = cur;\r\n            cur = parent.left;\r\n        }\r\n    }\r\n    return parent;\r\n}\r\n\r\nfunction getHeight(node) {\r\n    if (node !== null) {\r\n        if (getHeight(node.left) > getHeight(node.right)) {\r\n            return 1 + getHeight(node.left);\r\n        }\r\n        else return 1 + getHeight(node.right);\r\n    }\r\n    else return 0;\r\n}\r\n\r\nfunction getBalance(node) {\r\n    if (node !== null) {\r\n        return getHeight(node.right) - getHeight(node.left);\r\n    }\r\n} \r\n\r\nfunction rotateRight(node, tree) {\r\n    var newRoot = node.left;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.right;\r\n\r\n    newRoot.right = node;\r\n    node.left = T2;\r\n    \r\n    \r\n    //tree.root = newRoot;\r\n}\r\n\r\nfunction rotateLeft(node, tree) {\r\n    var newRoot = node.right;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.left;\r\n    newRoot.left = node;\r\n    node.right = T2;\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    insertWithRot(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n\r\n        //do rotations\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    treeHeight() {\r\n        return getHeight(this.root);\r\n    }\r\n\r\n}\r\n\r\n//react component for binary search tree\r\nconst AvlTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n    const secondRot = useRef(false);\r\n    const familyLine = useRef([]);\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n    const status = useRef(\"\");\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        \r\n        newTree.remove(insertValue);\r\n        setTree(newTree);\r\n        //toggleAnimation();\r\n        //animationFunction.current = rotateStep;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        \r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        status.current = \"Inserting node\";\r\n        forceUpdate();\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.left;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n                focus.current = focus.current.left;\r\n            } else\r\n                focus.current = focus.current.left;\r\n            \r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.right;\r\n                focus.current = focus.current.right;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.right;\r\n            \r\n        } else {\r\n            animationFunction.current = rotateStep;\r\n        }\r\n        //console.log(familyLine.current);\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        status.current = \"Removing node\";\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            \r\n            tree.remove(animationValue.current);\r\n            if (familyLine.current.length === 0) familyLine.current.push(tree.root);\r\n            pink.current = null;\r\n            animationFunction.current = rotateStepDelete;\r\n        }\r\n    }\r\n\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current)\r\n            familyLine.current = [];\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    const rotateStepDelete = () => {\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n\r\n            //z is first unbalanced node\r\n            \r\n            var z = family.pop();\r\n            \r\n            //console.log(getBalance(firstUnbalanced));\r\n            //var child;\r\n\r\n            while (Math.abs(getBalance(z)) < 2 && family.length > 0) {\r\n                z = family.pop();\r\n\r\n            }\r\n            familyLine.current = [];\r\n            familyLine.current.push(z);\r\n            //determine largest height child\r\n\r\n            if (z == null) {\r\n                status.current = \"Tree is empty\"\r\n                toggleAnimation();\r\n            }\r\n            else if (z.left != null || z.right != null) {\r\n                var y; //largest height child\r\n                if (getHeight(z.left) > getHeight(z.right)) y = z.left;\r\n                else y = z.right;\r\n                var x;\r\n                if (getHeight(y.left) > getHeight(y.right)) x = y.left;\r\n                else x = y.right;\r\n                familyLine.current.push(y);\r\n                familyLine.current.push(x);\r\n            }\r\n            console.log(familyLine.current);\r\n\r\n            if (Math.abs(getBalance(z)) < 2) {\r\n                //tree is balanced \r\n                status.current = \"Tree is balanced\"\r\n                toggleAnimation();\r\n\r\n            }\r\n\r\n            //left left\r\n            if (getBalance(z) < -1 && x.value < y.value) {\r\n                rotateRight(z, tree);\r\n                familyLine.current.shift();\r\n            }\r\n\r\n            //left right\r\n            if (getBalance(z) < -1 && x.value > y.value) {\r\n                var r = familyLine.current.pop()\r\n                rotateLeft(y, tree);\r\n                familyLine.current.splice(1, 0, r);\r\n                z.left = r;\r\n            }\r\n\r\n            //right left\r\n            if (getBalance(z) > 1 && x.value < y.value) {\r\n                var l = familyLine.current.pop();\r\n                rotateRight(y);\r\n                familyLine.current.splice(1, 0, l);\r\n                z.right(l);\r\n            }\r\n\r\n            //right right\r\n            if (getBalance(z) > 1 && x.value > y.value) {\r\n                rotateLeft(z, tree);\r\n                familyLine.current.shift();\r\n            } \r\n\r\n            forceUpdate();\r\n            //toggleAnimation();\r\n\r\n        }\r\n    }\r\n\r\n    const rotateStep = () => {\r\n        console.log(familyLine.current);\r\n        //create new array copy of family line\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n        \r\n\r\n        var inserted = green.current;\r\n        //rotateRight(tree.root, tree);\r\n        //rotateLeft(tree.root, tree);\r\n        //var family = familyLine.current;\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n            var firstUnbalanced = family.pop();\r\n            //console.log(getBalance(firstUnbalanced));\r\n            //var child;\r\n\r\n            while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\r\n                firstUnbalanced = family.pop();\r\n\r\n            }\r\n\r\n\r\n            if (Math.abs(getBalance(firstUnbalanced)) < 2) {\r\n                //tree is balanced \r\n                status.current = \"Tree is balanced\"\r\n                toggleAnimation();\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            //Left Left case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\r\n\r\n\r\n                var l = firstUnbalanced.left;\r\n                rotateRight(firstUnbalanced, tree);\r\n\r\n                //insert on correct side\r\n                var grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = l;\r\n                    }\r\n                    else grandP.left = l;\r\n                } else tree.root = l;\r\n                secondRot.current = true;\r\n                familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\r\n\r\n\r\n            }\r\n\r\n\r\n            //Left Right case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n                var r = firstUnbalanced.left.right;\r\n                rotateLeft(firstUnbalanced.left, tree);\r\n                firstUnbalanced.left = r;\r\n            }\r\n\r\n            //Right Right case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\r\n                var r = firstUnbalanced.right;\r\n                rotateLeft(firstUnbalanced, tree);\r\n                //insert on correct side\r\n                var grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = r;\r\n                    }\r\n                    else grandP.left = r;\r\n                } else tree.root = r;\r\n                familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\r\n\r\n            }\r\n\r\n            //Right Left Case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\r\n                var l = firstUnbalanced.right.left;\r\n                rotateRight(firstUnbalanced.right, tree);\r\n                familyLine.current.pop();\r\n                firstUnbalanced.right = l;\r\n\r\n\r\n\r\n            }\r\n\r\n            ////Left Right case\r\n            //if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n\r\n            //    var r = firstUnbalanced.left.right;\r\n            //    rotateLeft(firstUnbalanced.left, tree);\r\n            //    firstUnbalanced.left = r;\r\n\r\n\r\n\r\n            //}\r\n\r\n\r\n            //console.log(firstUnbalanced.left)\r\n            //rotateRight(firstUnbalanced, tree);\r\n\r\n            //}\r\n\r\n            //animationFunction.current = rotateStep();\r\n        }\r\n        forceUpdate();\r\n        \r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n                    <p>Balance of Tree: {getBalance(tree.root)}</p>\r\n                    <p>{status.current}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AvlTree;"]},"metadata":{},"sourceType":"module"}