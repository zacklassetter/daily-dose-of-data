{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zack\\\\source\\\\repos\\\\Quinten\\\\Web_Project\\\\ReactApp\\\\src\\\\AvlTree\\\\AvlTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './AvlTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\nimport Element from '../Element/Element.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nfunction getHeight(node) {\n  if (node !== null) {\n    if (getHeight(node.left) > getHeight(node.right)) {\n      return 1 + getHeight(node.left);\n    } else return 1 + getHeight(node.right);\n  } else return 0;\n}\n\nfunction getBalance(node) {\n  if (node !== null) {\n    return getHeight(node.right) - getHeight(node.left);\n  }\n}\n\nfunction rotateRight(node) {\n  var x = node.left;\n  var T2 = x.right;\n  x.right = node;\n  node.left = T2;\n} //class for binary search tree\n\n\nclass AvlTreeClass {\n  constructor() {\n    this.root = null;\n    this.height = 0;\n  }\n\n  insert(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height;\n  }\n\n  remove(value) {\n    var current = this.root;\n    var parent = null; //find a node equal to value else exit function\n\n    while (true) {\n      if (current === null) return;\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else break;\n    } //if node has no children set parent child to null\n\n\n    if (current.left === null && current.right === null) {\n      if (parent === null) this.root = null;else if (value < parent.value) parent.left = null;else parent.right = null;\n    } //if node has 1 child set parent child to current child\n    else if (current.right === null) {\n        if (parent === null) this.root = current.left;else if (value < parent.value) parent.left = current.left;else parent.right = current.left;\n      } else if (current.left === null) {\n        if (parent === null) this.root = current.right;else if (value < parent.value) parent.left = current.right;else parent.right = current.right;\n      } //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\n      else {\n          //find the leftmost child of right subtree of current, set current to that value\n          var leftmostChild = current.right;\n          parent = current;\n\n          while (leftmostChild.left !== null) {\n            parent = leftmostChild;\n            leftmostChild = leftmostChild.left;\n          }\n\n          current.value = leftmostChild.value; //delete the leftmost child of right subtree\n\n          current = leftmostChild;\n\n          if (current.left === null && current.right === null) {\n            if (current.value < parent.value) parent.left = null;else parent.right = null;\n          } else if (current.right === null) {\n            if (current.value < parent.value) parent.left = current.left;else parent.right = current.left;\n          } else {\n            if (current.value < parent.value) parent.left = current.right;else parent.right = current.right;\n          }\n        }\n  }\n\n  treeHeight() {\n    return getHeight(this.root);\n  }\n\n} //react component for binary search tree\n\n\nconst AvlTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new AvlTreeClass());\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const findInput = useRef();\n  const speedSlider = useRef();\n  const focus = useRef();\n  const green = useRef();\n  const pink = useRef();\n  const yellow = useRef();\n  const interval = useRef();\n  const animating = useRef();\n  const animationFunction = useRef();\n  const animationValue = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {\n    if (animating.current) toggleAnimation();\n    const height = randInt(2, 6);\n    var newTree = new AvlTreeClass();\n    var insertValue = null;\n\n    while (newTree.height <= height) {\n      insertValue = randInt(-999, 1000);\n      newTree.insert(insertValue);\n    }\n\n    newTree.remove(insertValue);\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to pause or continue animation\n\n\n  const toggleAnimation = useCallback(() => {\n    if (animating.current) {\n      clearInterval(interval.current);\n      animating.current = false;\n      focus.current = null;\n      animationFunction.current = null;\n      animationValue.current = null;\n    } else {\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      green.current = null;\n      yellow.current = null;\n      animating.current = true;\n    }\n  }, []); //initialize the tree to a random BST\n\n  useEffect(randomTree, [toggleAnimation]); //function to insert into the binary search tree on button click\n\n  const insert = () => {\n    if (animating.current) toggleAnimation();\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    insertInput.current.value = null;\n\n    if (tree.root === null) {\n      tree.insert(data);\n      green.current = tree.root;\n      forceUpdate();\n    } else {\n      focus.current = tree.root;\n      forceUpdate();\n      animationFunction.current = insertStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n  }; //function to do a single step of insertion animation\n\n\n  const insertStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) {\n        tree.insert(animationValue.current);\n        green.current = focus.current.left; //toggleAnimation();\n\n        animationFunction.current = rotateStep();\n      } else focus.current = focus.current.left;\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) {\n        tree.insert(animationValue.current);\n        green.current = focus.current.right; //toggleAnimation();\n\n        animationFunction.current = rotateStep();\n      } else focus.current = focus.current.right;\n    } else {\n      toggleAnimation();\n    }\n  }; //function to remove from binary search tree on button click\n\n\n  const remove = () => {\n    if (animating.current) toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(removeInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      if (focus.current.value === data) pink.current = focus.current;\n      forceUpdate();\n      animationFunction.current = removeStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n\n    removeInput.current.value = null;\n  }; //function to do a single step of remove animation\n\n\n  const removeStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else {\n      tree.remove(animationValue.current);\n      pink.current = null;\n      toggleAnimation();\n    }\n  }; //function to start find animation\n\n\n  const find = () => {\n    if (animating.current) toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(findInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      animationFunction.current = findStep;\n      animationValue.current = data;\n      toggleAnimation();\n      if (focus.current.value === data) yellow.current = focus.current;\n      forceUpdate();\n    }\n\n    findInput.current.value = null;\n  }; //function to to a single step of find animation\n\n\n  const findStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else {\n      toggleAnimation();\n    }\n  };\n\n  const rotateStep = () => {\n    rotateRight(tree.root);\n    sol;\n    toggleAnimation();\n  }; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    if (animationFunction.current != null) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: randomTree,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"insertButton\",\n          onClick: insert,\n          children: \"Insert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: insertInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"removeButton\",\n          onClick: remove,\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: removeInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"findButton\",\n          onClick: find,\n          children: \"Find\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: findInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: [/*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n          tree: tree,\n          border: focus.current,\n          green: green.current,\n          pink: pink.current,\n          yellow: yellow.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance of Tree: \", getBalance(tree.root)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Inserted Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element to Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Found Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvlTree, \"dgXyL5FsTzXQ+ImSXCv1waL+ndM=\");\n\n_c = AvlTree;\nexport default AvlTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvlTree\");","map":{"version":3,"sources":["C:/Users/zack/source/repos/Quinten/Web_Project/ReactApp/src/AvlTree/AvlTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","Element","BinaryTreeNode","constructor","value","left","right","getHeight","node","getBalance","rotateRight","x","T2","AvlTreeClass","root","height","insert","current","parent","remove","leftmostChild","treeHeight","AvlTree","forceRender","tree","setTree","insertInput","removeInput","findInput","speedSlider","focus","green","pink","yellow","interval","animating","animationFunction","animationValue","forceUpdate","renders","randomTree","toggleAnimation","randInt","newTree","insertValue","min","max","Math","floor","random","clearInterval","setInterval","data","parseInt","isNaN","insertStep","rotateStep","removeStep","find","findStep","sol","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n}\r\n\r\nfunction getHeight(node) {\r\n    if (node !== null) {\r\n        if (getHeight(node.left) > getHeight(node.right)) {\r\n            return 1 + getHeight(node.left);\r\n        }\r\n        else return 1 + getHeight(node.right);\r\n    }\r\n    else return 0;\r\n}\r\n\r\nfunction getBalance(node) {\r\n    if (node !== null) {\r\n        return getHeight(node.right) - getHeight(node.left);\r\n    }\r\n} \r\n\r\nfunction rotateRight(node) {\r\n    var x = node.left;\r\n    var T2 = x.right;\r\n\r\n    x.right = node;\r\n    node.left = T2;\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    treeHeight() {\r\n        return getHeight(this.root);\r\n    }\r\n\r\n}\r\n\r\n//react component for binary search tree\r\nconst AvlTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        newTree.remove(insertValue);\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.left;\r\n                //toggleAnimation();\r\n                animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.left;\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.right;\r\n                //toggleAnimation();\r\n                animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.right;\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            tree.remove(animationValue.current);\r\n            pink.current = null;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    const rotateStep = () => {\r\n        rotateRight(tree.root);sol\r\n        toggleAnimation();\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n                    <p>Balance of Tree: {getBalance(tree.root)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AvlTree;"]},"metadata":{},"sourceType":"module"}