(this.webpackJsonpquintenreacttest=this.webpackJsonpquintenreacttest||[]).push([[0],Array(27).concat([function(e,t,r){},function(e,t,r){},function(e,t,r){},,,,,,,function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){},function(e,t,r){"use strict";r.r(t);var n=r(1),c=r(21),s=r.n(c),i=(r(27),r(2)),a=r(10),l=r(4),u=(r(28),r(29),r(0)),o=function(e){return e.list.map((function(e,t){return Object(u.jsx)("li",{children:Object(u.jsx)(a.b,{to:"/"+e,children:e})},t)}))},j=function(e){var t=Object(n.useState)(!0),r=Object(i.a)(t,2),c=r[0],s=r[1],a=function(){s((function(e){return!e}))};return c?Object(u.jsxs)(u.Fragment,{children:[Object(u.jsx)("p",{children:e.title}),Object(u.jsx)("button",{onClick:a,children:"\u25bc"}),Object(u.jsx)("ul",{children:Object(u.jsx)(o,{list:e.list})})]}):Object(u.jsxs)(u.Fragment,{children:[Object(u.jsx)("p",{children:e.title}),Object(u.jsx)("button",{onClick:a,children:"\u25b2"})]})},h=function(){return Object(u.jsx)("div",{className:"navigation",children:Object(u.jsxs)("ul",{children:[Object(u.jsx)("li",{children:Object(u.jsx)(a.b,{to:"/",children:"Home"})}),Object(u.jsx)("li",{children:Object(u.jsx)(j,{title:"Data Structures",list:["Array","List","Array List","Linked List","Stack","Queue","Binary Tree","Binary Search Tree","AVL Tree","Binary Heap","Hash Table","Set","Map"]})}),Object(u.jsx)("li",{children:Object(u.jsx)(j,{title:"Algorithms",list:["Insertion Sort","Selection Sort","Bubble Sort","Merge Sort","Quick Sort","Heap Sort","Linear Search","Binary Search","Depth First Search","Breadth First Search"]})}),Object(u.jsx)("li",{children:Object(u.jsx)(a.b,{to:"/about",children:"About Us"})})]})})},d=(r(36),r(37),function(e){return Object(u.jsx)("p",{className:"element "+e.color+" "+e.border,children:e.value})}),b=function(e){return e.array.map((function(e,t){return Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:t}),Object(u.jsx)(d,{value:e})]},t)}))},O=function(){var e=Object(n.useState)([]),t=Object(i.a)(e,2),r=t[0],c=t[1],s=Object(n.useState)(0),a=Object(i.a)(s,2)[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),d=Object(n.useRef)(),O=Object(n.useRef)(),x=Object(n.useRef)(),f=function(){a((function(e){return e+1}))},p=function(){var e=l.current.value;if(""===e&&(e=m(10,60)),!isNaN(parseInt(e))&&e>0){for(var t=[],r=0;r<e;r++)t.push(m(-999,1e3));c(t)}l.current.value=null},m=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(p,[]);return Object(u.jsxs)("div",{className:"array",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:p,children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Size"}),Object(u.jsx)("input",{id:"randomSizeInput",ref:l,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"buildButton",onClick:function(){var e=[],t=parseInt(o.current.value);for(isNaN(t)&&(t=m(10,60));t>0;)e.push(null),t--;c(e),o.current.value=null},children:"Build"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Size"}),Object(u.jsx)("input",{type:"text",ref:o})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"setButton",onClick:function(){var e=parseInt(j.current.value),t=parseInt(h.current.value);!isNaN(e)&&!isNaN(t)&&e>=0&&e<r.length?(r[e]=t,f()):O.current.value="Invalid",j.current.value=null,h.current.value=null},children:"Set"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"setIndex",type:"text",ref:j})]}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Value"}),Object(u.jsx)("input",{id:"setValue",type:"text",ref:h})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"deleteButton",onClick:function(){var e=parseInt(d.current.value);if(!isNaN(e)&&e>=0&&e<r.length){var t=r[e];O.current.value=t,null==r[e]&&(O.current.value="Invalid"),r[e]=null,f()}else O.current.value="Invalid";d.current.value=null},children:"Delete"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{type:"text",ref:d})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"getButton",onClick:function(){var e=parseInt(x.current.value);if(!isNaN(e)&&e>=0&&e<r.length){var t=r[e];O.current.value=t,null==r[e]&&(O.current.value="null")}else O.current.value="Invalid";x.current.value=null},children:"Get"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{type:"text",ref:x})]}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"arrayOutput",type:"text",ref:O,readOnly:!0}),Object(u.jsx)("br",{})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(b,{array:r})})]})},x=(r(38),function(e){return e.list.map((function(e,t){return Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:t}),Object(u.jsx)(d,{value:e})]},t)}))}),f=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),d=Object(n.useRef)(),b=Object(n.useRef)(),O=function(){t((function(e){return e+1}))},f=function(){var e=l.current.value;if(""===e&&(e=p(10,60)),!isNaN(parseInt(e))&&e>0){for(var t=[],r=0;r<e;r++)t.push(p(-999,1e3));a(t)}l.current.value=null},p=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(f,[]);return Object(u.jsxs)("div",{className:"list",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:f,children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Size"}),Object(u.jsx)("input",{id:"randomSizeInput",ref:l,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){var e=parseInt(o.current.value),t=parseInt(j.current.value);isNaN(e)&&(e=0),isNaN(t)&&(t=0),e>=0&&e<=s.length?(s.splice(e,0,t),O()):d.current.value="Invalid",o.current.value=null,j.current.value=null},children:"Insert"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"insertIndex",ref:o,type:"text"})]}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Value"}),Object(u.jsx)("input",{id:"insertValue",ref:j,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){var e=parseInt(h.current.value);if(isNaN(e)&&(e=0),e>=0&&e<s.length){var t=s.splice(e,1);O(),d.current.value=t}else d.current.value="Invalid";h.current.value=null},children:"Remove"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"removeIndex",ref:h,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"listOutput",type:"text",ref:d,readOnly:!0}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"getButton",onClick:function(){var e=parseInt(b.current.value);if(isNaN(e)&&(e=0),e>=0&&e<s.length){var t=s[e];d.current.value=t}else d.current.value="Invalid";b.current.value=null},children:"Get"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"getIndex",ref:b,type:"text"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(x,{list:s})})]})},p=(r(39),function(e){return e.list.map((function(e,t){return Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:t}),Object(u.jsx)(d,{value:e})]},t)}))}),m=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),d=Object(n.useRef)(),b=Object(n.useRef)(),O=function(){t((function(e){return e+1}))},x=function(){var e=l.current.value;if(""===e&&(e=f(10,60)),!isNaN(parseInt(e))&&e>0){for(var t=[],r=0;r<e;r++)t.push(f(-999,1e3));a(t)}l.current.value=null},f=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(x,[]);return Object(u.jsxs)("div",{className:"array-list",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:x,children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Size"}),Object(u.jsx)("input",{id:"randomSizeInput",ref:l,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){var e=parseInt(o.current.value),t=parseInt(j.current.value);isNaN(e)&&(e=0),isNaN(t)&&(t=0),e>=0&&e<=s.length?(s.splice(e,0,t),O()):d.current.value="Invalid",o.current.value=null,j.current.value=null},children:"Insert"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"insertIndex",ref:o,type:"text"})]}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Value"}),Object(u.jsx)("input",{id:"insertValue",ref:j,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){var e=parseInt(h.current.value);if(isNaN(e)&&(e=0),e>=0&&e<s.length){var t=s.splice(e,1);O(),d.current.value=t}else d.current.value="Invalid";h.current.value=null},children:"Remove"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"removeIndex",ref:h,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"listOutput",type:"text",ref:d,readOnly:!0}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"getButton",onClick:function(){var e=parseInt(b.current.value);if(isNaN(e)&&(e=0),e>=0&&e<s.length){var t=s[e];d.current.value=t}else d.current.value="Invalid";b.current.value=null},children:"Get"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"getIndex",ref:b,type:"text"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(p,{list:s})})]})},v=r(8),g=r(3),y=(r(40),function e(t){Object(g.a)(this,e),this.value=t,this.next=null}),w=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;Object(g.a)(this,e),this.head=t,this.size=0}return Object(v.a)(e,[{key:"insert",value:function(e){if(null==this.head)this.head=new y(e);else{for(var t=this.head;null!=t.next;)t=t.next;t.next=new y(e)}this.size++}},{key:"insertAt",value:function(e,t){var r,n=new y(e),c=this.head;if(t<=this.size){if(0===t)n.next=this.head,this.head=n;else{for(var s=0;s<t;)s++,r=c,c=c.next;n.next=c,r.next=n}this.size++}}},{key:"get",value:function(e){for(var t=0,r=this.head;t!==e;)r=r.next,t++;return r.value}},{key:"remove",value:function(e){var t,r,n,c=0;if(e<this.size&&this.size>0)if(0===e)this.head=this.head.next,this.size--;else{for(c++,n=(t=(r=this.head).next).next;c!==e;)c++,r=r.next,t=t.next,n=n.next;r.next=n,this.size--}}}]),e}(),N=function(e){for(var t=e.list.head,r=0,n=[];null!=t;)t===e.focus?n.push(Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t.value,border:"bordered"})]},2*r)):t===e.green?n.push(Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t.value,color:"green"})]},2*r)):t===e.yellow?n.push(Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t.value,color:"yellow"})]},2*r)):t===e.pink?n.push(Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t.value,color:"pink"})]},2*r)):n.push(Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t.value})]},2*r)),n.push(Object(u.jsx)("p",{className:"arrow",children:"\u2192"},2*r+1)),t=t.next,r++;return n.push(Object(u.jsx)(d,{value:"null"},2*r)),n},k=function(){var e=Object(n.useState)(new w),t=Object(i.a)(e,2),r=t[0],c=t[1],s=Object(n.useState)(0),a=Object(i.a)(s,2)[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),d=Object(n.useRef)(),b=Object(n.useRef)(),O=Object(n.useRef)(),x=Object(n.useRef)(),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=Object(n.useRef)(),g=Object(n.useRef)(),y=Object(n.useRef)(),k=Object(n.useRef)(),I=Object(n.useRef)(null),S=Object(n.useRef)(null),R=function(){a((function(e){return e+1}))},T=function(){v.current&&A();var e=l.current.value;if(""===e&&(e=B(8,40)),!isNaN(parseInt(e))&&e>0){for(var t=new w,r=0;r<e;r++)t.insertAt(B(-999,1e3),0);c(t)}l.current.value=null},B=function(e,t){return Math.floor(Math.random()*(t-e)+e)},A=Object(n.useCallback)((function(){v.current?(clearInterval(x.current),v.current=!1,f.current=null,p.current=null,m.current=null,g.current=null,y.current=null,S.current=null):(x.current=setInterval((function(){f.current(),R()}),1e3-O.current.value),v.current=!0,k.current=null,I.current=null)}),[]);Object(n.useEffect)(T,[A]);var C=function(){y.current===m.current-1?(r.insertAt(p.current,m.current),k.current=g.current.next,A()):(g.current=g.current.next,y.current++)};var z=function(){m.current===y.current?null===I.current?(I.current=g.current,g.current=null):(d.current.value=r.get(m.current),A()):(g.current=g.current.next,y.current++)};var L=function(){m.current===y.current?null===S.current?(S.current=g.current,g.current=null):(d.current.value=r.get(m.current),r.remove(m.current),A()):(g.current=g.current.next,y.current++)};return Object(u.jsxs)("div",{className:"linked-list",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:T,children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Size"}),Object(u.jsx)("input",{id:"randomSizeInput",ref:l,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){v.current&&A();var e=parseInt(j.current.value),t=parseInt(o.current.value);isNaN(e)&&(e=B(-999,1e3)),isNaN(t)&&(t=0),0===t?(r.insertAt(e,0),k.current=r.head,I.current=null,R()):t>0&&t<r.size?(f.current=C,p.current=e,m.current=t,g.current=r.head,y.current=0,R(),A()):d.current.value="Invalid",j.current.value=null,o.current.value=null},children:"Insert"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"insertIndex",ref:o,type:"text"})]}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Value"}),Object(u.jsx)("input",{id:"insertValue",ref:j,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{onClick:function(){v.current&&A();var e=parseInt(h.current.value);isNaN(e)&&(e=0),e>=0&&e<r.size?(f.current=L,m.current=e,y.current=0,g.current=r.head,R(),A()):d.current.value="Invalid",h.current.value=null},id:"removeButton",children:"Remove"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"removeIndex",ref:h,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"listOutput",type:"text",ref:d,readOnly:!0}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"getButton",onClick:function(){v.current&&A();var e=parseInt(b.current.value);isNaN(e)&&(e=0),e>=0&&e<r.size?(f.current=z,m.current=e,y.current=0,g.current=r.head,R(),A()):d.current.value="Invalid",b.current.value=null},children:"Get"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Index"}),Object(u.jsx)("input",{id:"getIndex",ref:b,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:O,onChange:function(){null!=f.current&&(clearInterval(x.current),x.current=setInterval((function(){f.current(),R()}),1e3-O.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(N,{list:r,focus:g.current,green:k.current,yellow:I.current,pink:S.current})})]})},I=(r(41),function(e){return e.stack.map((function(e,t){return Object(u.jsx)(d,{value:e},t)}))}),S=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=function(){t((function(e){return e+1}))},h=function(){for(var e=d(10,60),t=[],r=0;r<e;r++)t.push(d(-999,1e3));a(t)},d=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(h,[]);return Object(u.jsxs)("div",{className:"stack",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:h,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"pushButton",onClick:function(){var e=parseInt(l.current.value);isNaN(e)&&(e=0),s.push(e),j(),l.current.value=null},children:"Push"}),Object(u.jsx)("input",{id:"stackInput",ref:l,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"popButton",onClick:function(){var e=s.pop();j(),o.current.value=void 0===e?"None":e},children:"Pop"}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"stackOutput",ref:o,type:"text",readOnly:!0}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"peekButton",onClick:function(){var e=s[s.length-1];o.current.value=void 0===e?"None":e},children:"Peek"}),Object(u.jsx)("br",{})]}),Object(u.jsxs)("div",{className:"visualization",children:[Object(u.jsx)(I,{stack:s}),Object(u.jsxs)("div",{id:"stackTop",children:[Object(u.jsx)("p",{children:"\u2190 Push"}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"\u2192 Pop"})]})]})]})},R=(r(42),function e(t){Object(g.a)(this,e),this.value=t,this.next=null}),T=function(){function e(){Object(g.a)(this,e),this.head=null,this.tail=null}return Object(v.a)(e,[{key:"enqueue",value:function(e){null==this.head?(this.tail=new R(e),this.head=this.tail):(this.tail.next=new R(e),this.tail=this.tail.next)}},{key:"dequeue",value:function(){if(null!=this.head){var e=this.head;return this.head=this.head.next,null==this.head&&(this.tail=null),e.value}}},{key:"peek",value:function(){return null==this.head?void 0:this.head.value}}]),e}(),B=function(e){for(var t=e.queue.head,r=0,n=[];null!=t;)n.push(Object(u.jsx)(d,{value:t.value},r)),t=t.next,r++;return n},A=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new T),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=function(){t((function(e){return e+1}))},h=function(){for(var e=d(10,60),t=new T,r=0;r<e;r++)t.enqueue(d(-999,1e3));a(t)},d=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(h,[]);return Object(u.jsxs)("div",{className:"queue",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:h,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"enqueueButton",onClick:function(){var e=parseInt(l.current.value);isNaN(e)&&(e=0),s.enqueue(e),j(),l.current.value=null},children:"Enqueue"}),Object(u.jsx)("input",{id:"queueInput",ref:l,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"dequeueButton",onClick:function(){var e=s.dequeue();j(),o.current.value=void 0===e?"None":e},children:"Dequeue"}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"queueOutput",ref:o,type:"text",readOnly:!0}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"peekButton",onClick:function(){var e=s.peek();o.current.value=void 0===e?"None":e},children:"Peek"}),Object(u.jsx)("br",{})]}),Object(u.jsxs)("div",{className:"visualization",children:[Object(u.jsx)("div",{className:"queueEnd",children:Object(u.jsx)("p",{children:"Dequeue \u2190"})}),Object(u.jsx)(B,{queue:s}),Object(u.jsx)("div",{className:"queueEnd",children:Object(u.jsx)("p",{children:"\u2190 Enqueue"})})]})]})},C=(r(43),r(44),function(e){return e.list.map((function(t,r){return null===t?Object(u.jsx)(d,{value:"",color:"none"},r):t===e.green?Object(u.jsx)(d,{value:t.value,color:"green"},r):t===e.pink?Object(u.jsx)(d,{value:t.value,color:"pink"},r):t===e.yellow?Object(u.jsx)(d,{value:t.value,color:"yellow"},r):t===e.border?Object(u.jsx)(d,{value:t.value,border:"bordered"},r):Object(u.jsx)(d,{value:t.value},r)}))}),z=function(e){for(var t=[],r=0;r<e.list.length;r++)null===e.list[r]?t.push(Object(u.jsx)("div",{className:"binary-tree-line-none"},t.length)):r%2===0?t.push(Object(u.jsx)("div",{className:"binary-tree-line-left"},t.length)):t.push(Object(u.jsx)("div",{className:"binary-tree-line-right"},t.length));return t},L=function(e){var t=[],r=[];null!==e.tree&&r.push(e.tree.root);for(var n=[];;){n=r,r=[];for(var c=0;c<n.length;c++)null===n[c]?(r.push(null),r.push(null)):(r.push(n[c].left),r.push(n[c].right));t.push(Object(u.jsx)("div",{className:"binary-tree-level",children:Object(u.jsx)(C,{list:n,border:e.border,green:e.green,pink:e.pink,yellow:e.yellow})},t.length));for(var s=!0,i=0;i<r.length;i++)null!==r[i]&&(s=!1);if(s)break;t.push(Object(u.jsx)("div",{className:"binary-tree-line-level",children:Object(u.jsx)(z,{list:r})},t.length))}return t},M=function e(t){Object(g.a)(this,e),this.value=t,this.left=null,this.right=null},F=function e(t){Object(g.a)(this,e),this.root=t},E=function(){var e=Object(n.useState)(null),t=Object(i.a)(e,2),r=t[0],c=t[1],s=function(){for(var e=a(1,5),t=new F(new M(a(-999,1e3))),r=[t.root],n=[],s=0;s<e;s++){for(var i=0;i<r.length;i++)Math.random()<Math.pow(.9,s)&&(r[i].left=new M(a(-999,1e3)),n.push(r[i].left)),Math.random()<Math.pow(.9,s)&&(r[i].right=new M(a(-999,1e3)),n.push(r[i].right));r=n,n=[]}c(t)},a=function(e,t){return Math.floor(Math.random()*(t-e)+e)};return Object(n.useEffect)(s,[]),Object(u.jsxs)("div",{className:"binary-tree",children:[Object(u.jsx)("div",{className:"controls",children:Object(u.jsx)("button",{id:"randomButton",onClick:s,children:"Random"})}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(L,{tree:r})})]})},q=(r(45),function e(t){Object(g.a)(this,e),this.value=t,this.left=null,this.right=null}),H=function(){function e(){Object(g.a)(this,e),this.root=null,this.height=0}return Object(v.a)(e,[{key:"insert",value:function(e){for(var t=this.root,r=null,n=1;null!=t;)if(e<t.value)r=t,t=t.left,n++;else{if(!(e>t.value))return;r=t,t=t.right,n++}null===r?this.root=new q(e):e<r.value?r.left=new q(e):r.right=new q(e),n>this.height&&(this.height=n)}},{key:"remove",value:function(e){for(var t=this.root,r=null;;){if(null===t)return;if(e<t.value)r=t,t=t.left;else{if(!(e>t.value))break;r=t,t=t.right}}if(null===t.left&&null===t.right)null===r?this.root=null:e<r.value?r.left=null:r.right=null;else if(null===t.right)null===r?this.root=t.left:e<r.value?r.left=t.left:r.right=t.left;else if(null===t.left)null===r?this.root=t.right:e<r.value?r.left=t.right:r.right=t.right;else{var n=t.right;for(r=t;null!==n.left;)r=n,n=n.left;t.value=n.value,null===(t=n).left&&null===t.right?t.value<r.value?r.left=null:r.right=null:null===t.right?t.value<r.value?r.left=t.left:r.right=t.left:t.value<r.value?r.left=t.right:r.right=t.right}}}]),e}(),D=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new H),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),b=Object(n.useRef)(),O=Object(n.useRef)(),x=Object(n.useRef)(),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=Object(n.useRef)(),g=Object(n.useRef)(),y=function(){t((function(e){return e+1}))},w=function(){m.current&&k();for(var e=N(2,6),t=new H,r=null;t.height<=e;)r=N(-999,1e3),t.insert(r);t.remove(r),a(t)},N=function(e,t){return Math.floor(Math.random()*(t-e)+e)},k=Object(n.useCallback)((function(){m.current?(clearInterval(p.current),m.current=!1,b.current=null,v.current=null,g.current=null):(p.current=setInterval((function(){v.current(),y()}),1e3-h.current.value),O.current=null,f.current=null,m.current=!0)}),[]);Object(n.useEffect)(w,[k]);var I=function(){g.current<b.current.value?null===b.current.left?(s.insert(g.current),O.current=b.current.left,k()):b.current=b.current.left:g.current>b.current.value?null===b.current.right?(s.insert(g.current),O.current=b.current.right,k()):b.current=b.current.right:k()},S=function(){g.current<b.current.value?null===b.current.left?k():(b.current=b.current.left,b.current.value===g.current&&(x.current=b.current)):g.current>b.current.value?null===b.current.right?k():(b.current=b.current.right,b.current.value===g.current&&(x.current=b.current)):(s.remove(g.current),x.current=null,k())},R=function(){g.current<b.current.value?null===b.current.left?k():(b.current=b.current.left,b.current.value===g.current&&(f.current=b.current)):g.current>b.current.value?null===b.current.right?k():(b.current=b.current.right,b.current.value===g.current&&(f.current=b.current)):k()};return Object(u.jsxs)("div",{className:"binary-search-tree",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:w,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){m.current&&k();var e=parseInt(l.current.value);isNaN(e)&&(e=N(-999,1e3)),l.current.value=null,null===s.root?(s.insert(e),O.current=s.root,y()):(b.current=s.root,y(),v.current=I,g.current=e,k())},children:"Insert"}),Object(u.jsx)("input",{ref:l,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){if(m.current&&k(),null!==s.root){var e=parseInt(o.current.value);isNaN(e)&&(e=s.root.value),b.current=s.root,b.current.value===e&&(x.current=b.current),y(),v.current=S,g.current=e,k()}o.current.value=null},children:"Remove"}),Object(u.jsx)("input",{ref:o,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"findButton",onClick:function(){if(m.current&&k(),null!==s.root){var e=parseInt(j.current.value);isNaN(e)&&(e=s.root.value),b.current=s.root,v.current=R,g.current=e,k(),b.current.value===e&&(f.current=b.current),y()}j.current.value=null},children:"Find"}),Object(u.jsx)("input",{ref:j,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:h,onChange:function(){null!=v.current&&(clearInterval(p.current),p.current=setInterval((function(){v.current(),y()}),1e3-h.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(L,{tree:s,border:b.current,green:O.current,pink:x.current,yellow:f.current})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Last Inserted Element"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Element to Delete"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"yellow"}),Object(u.jsx)("p",{children:"= Last Found Element"})]})]})},W=(r(46),function e(t){Object(g.a)(this,e),this.value=t,this.left=null,this.right=null});function G(e,t){var r=null,n=t.root;if(null!=e){for(;n!==e;)n=e.value>n.value?(r=n).right:(r=n).left;return r}console.log("node is null, no parent")}function V(e){return"object"===typeof e&&null!=e?V(e.left)>V(e.right)?1+V(e.left):1+V(e.right):0}function P(e){if(null!==e&&"undefined"!=typeof e)return V(e.right)-V(e.left)}function Q(e,t){var r=e.left;e===t.root&&(t.root=r);var n=r.right;r.right=e,e.left=n}function U(e,t){var r=e.right;e===t.root&&(t.root=r);var n=r.left;r.left=e,e.right=n}function K(e){var t=e;if(null!=t)for(;null!=t.left;)t=t.left;return t}function J(e){var t=e;if(null!=t)for(;null!=t.right;)t=t.right;return t}var Z=function(){function e(){Object(g.a)(this,e),this.root=null,this.height=0,this.list=[]}return Object(v.a)(e,[{key:"inOrder",value:function(e){null!=e&&(this.inOrder(e.left),this.list.push(e.value),this.inOrder(e.right))}},{key:"insertWithRot",value:function(e){for(var t=this.root,r=null,n=1;null!=t;)if(e<t.value)r=t,t=t.left,n++;else{if(!(e>t.value))return;r=t,t=t.right,n++}null===r?this.root=new W(e):e<r.value?r.left=new W(e):r.right=new W(e),n>this.height&&(this.height=n)}},{key:"insert",value:function(e){for(var t=this.root,r=null,n=1;null!=t;)if(e<t.value)r=t,t=t.left,n++;else{if(!(e>t.value))return;r=t,t=t.right,n++}null===r?this.root=new W(e):e<r.value?r.left=new W(e):r.right=new W(e),n>this.height&&(this.height=n)}},{key:"remove",value:function(e){for(var t=this.root,r=null;;){if(null===t)return;if(e<t.value)r=t,t=t.left;else{if(!(e>t.value))break;r=t,t=t.right}}if(null===t.left&&null===t.right)null===r?this.root=null:e<r.value?r.left=null:r.right=null;else if(null===t.right)null===r?this.root=t.left:e<r.value?r.left=t.left:r.right=t.left;else if(null===t.left)null===r?this.root=t.right:e<r.value?r.left=t.right:r.right=t.right;else{var n=t.right;for(r=t;null!==n.left;)r=n,n=n.left;t.value=n.value,null===(t=n).left&&null===t.right?t.value<r.value?r.left=null:r.right=null:null===t.right?t.value<r.value?r.left=t.left:r.right=t.left:t.value<r.value?r.left=t.right:r.right=t.right}}},{key:"treeHeight",value:function(){return V(this.root)}}]),e}();function Y(e,t,r){if(t>r)return null;var n=parseInt((t+r)/2),c=new W(e[n]);return c.left=Y(e,t,n-1),c.right=Y(e,n+1,r),c}var X=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new Z),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(!1),o=Object(n.useRef)([]),j=Object(n.useRef)(),h=Object(n.useRef)(),b=Object(n.useRef)(),O=Object(n.useRef)(),x=Object(n.useRef)(),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=Object(n.useRef)(),g=Object(n.useRef)(),y=Object(n.useRef)(),w=Object(n.useRef)(),N=Object(n.useRef)(!1),k=Object(n.useRef)("Tree is balanced"),I=function(){t((function(e){return e+1}))},S=function(){g.current&&T();for(var e=R(2,6),t=new Z,r=null;t.height<=e;)r=R(-999,1e3),t.insert(r);t.remove(r),t.inOrder(t.root);var n=t.list,c=t.list.length;t.root=Y(n,0,c-1),a(t)},R=function(e,t){return Math.floor(Math.random()*(t-e)+e)},T=Object(n.useCallback)((function(){N.current=!1,g.current?(clearInterval(v.current),g.current=!1,x.current=null,y.current=null,w.current=null):(v.current=setInterval((function(){y.current(),I()}),1e3-O.current.value),f.current=null,m.current=null,g.current=!0)}),[]);Object(n.useEffect)(S,[T]);var B=function(){N.current=!0,console.log(N.current),k.current="Inserting node",I(),w.current<x.current.value?(o.current.push(x.current),null===x.current.left?(s.insert(w.current),f.current=x.current.left,x.current=x.current.left):x.current=x.current.left):w.current>x.current.value?(o.current.push(x.current),null===x.current.right?(s.insert(w.current),f.current=x.current.right,x.current=x.current.right):x.current=x.current.right):y.current=M},A=function(){if(N.current=!0,k.current="Removing node",w.current<x.current.value)o.current.push(x.current),null===x.current.left?T():(x.current=x.current.left,x.current.value===w.current&&(p.current=x.current));else if(w.current>x.current.value)o.current.push(x.current),null===x.current.right?T():(x.current=x.current.right,x.current.value===w.current&&(p.current=x.current));else{if(0===o.current.length){var e=s.root.right;if(null!=e){if(G(K(e),s)===s.root)return s.remove(w.current),o.current.push(s.root),p.current=null,void(y.current=z);o.current.push(G(K(e),s))}else{if(G(J(s.root.left),s)===s.root)return s.remove(w.current),o.current.push(s.root),p.current=null,void(y.current=z);o.current.push(G(J(s.root.left),s))}}s.remove(w.current),p.current=null,y.current=z}},C=function(){N.current=!0,w.current<x.current.value?null===x.current.left?T():(x.current=x.current.left,x.current.value===w.current&&(m.current=x.current)):w.current>x.current.value?null===x.current.right?T():(x.current=x.current.right,x.current.value===w.current&&(m.current=x.current)):T()},z=function(){N.current=!0;for(var e=[],t=0;t<o.current.length;t++)e.push(o.current[t]);if(0===e.length)T();else{for(var r=e.pop();e.length>0&&Math.abs(P(r))<2;)r=e.pop();if(Math.abs(P(r))<2&&(k.current="Tree is balanced",T()),o.current=[],o.current.push(r),null==r||"undefined"==typeof r)k.current="Tree is empty",T();else if(null!=r.left||null!=r.right){var n=null,c=null;null!=(n=V(r.left)>=V(r.right)?r.left:r.right)&&(c=n.value<r.value?V(n.left)>=V(n.right)?n.left:n.right:V(n.left)>V(n.right)?n.left:n.right)}if(P(r)<-1&&c.value<n.value){Q(r,s),k.current="Rotating Node: "+r.value+" right";var i=G(n,s);null!=i&&(i.value<r.value?i.right=n:i.left=n)}if(P(r)<-1&&c.value>n.value&&(U(n,s),k.current="Rotating Node: "+n.value+" left",r.left=c),P(r)>1&&c.value<n.value&&(Q(n,s),k.current="Rotating Node: "+n.value+" right",r.right=c),P(r)>1&&c.value>n.value){var a=G(r,s);U(r,s),k.current="Rotating Node: "+r.value+" left",null!=a?a.value<r.value?a.right=n:a.left=n:s.root=n}I()}},M=function(){N.current=!0;for(var e=[],t=0;t<o.current.length;t++)e.push(o.current[t]);if(0===e.length)T();else{for(var r=e.pop();Math.abs(P(r))<2&&e.length>0;)r=e.pop();if(Math.abs(P(r))<2&&(k.current="Tree is balanced",T()),-2===P(r)&&-1===P(r.left)){var n=r.left;Q(r,s),k.current="Rotating Node: "+r.value+" right";var c=e.pop();c?c.value<r.value?c.right=n:c.left=n:s.root=n,l.current=!0,o.current.splice(o.current.indexOf(n.right),1)}if(-2===P(r)&&1===P(r.left)){var i=r.left.right;U(r.left,s),k.current="Rotating Node: "+r.left.value+" left",r.left=i}if(2===P(r)&&1===P(r.right)){var a=r.right;U(r,s),k.current="Rotating Node: "+r.value+" left";var u=e.pop();u?u.value<r.value?u.right=a:u.left=a:s.root=a,o.current.splice(o.current.indexOf(r),1)}if(2===P(r)&&-1===P(r.right)){var j=r.right.left;Q(r.right,s),k.current="Rotating Node: "+r.right+" right",o.current.pop(),r.right=j}}I()};return Object(u.jsxs)("div",{className:"binary-search-tree",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:S,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){if(!N.current){g.current&&T();var e=parseInt(j.current.value);isNaN(e)&&(e=R(-999,1e3)),j.current.value=null,null===s.root?(s.insert(e),f.current=s.root,I()):(x.current=s.root,I(),y.current=B,w.current=e,T()),o.current=[]}},children:"Insert"}),Object(u.jsx)("input",{ref:j,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){if(!N.current){if(g.current&&T(),null!==s.root){var e=parseInt(h.current.value);isNaN(e)&&(e=s.root.value),x.current=s.root,x.current.value===e&&(p.current=x.current),I(),y.current=A,w.current=e,T()}h.current.value=null,o.current=[]}},children:"Remove"}),Object(u.jsx)("input",{ref:h,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"findButton",onClick:function(){if(!N.current){if(g.current&&(o.current=[],T()),null!==s.root){var e=parseInt(b.current.value);isNaN(e)&&(e=s.root.value),x.current=s.root,y.current=C,w.current=e,T(),x.current.value===e&&(m.current=x.current),I()}b.current.value=null}},children:"Find"}),Object(u.jsx)("input",{ref:b,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:O,onChange:function(){null!=y.current&&(clearInterval(v.current),v.current=setInterval((function(){y.current(),I()}),1e3-O.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsxs)("div",{className:"visualization",children:[Object(u.jsx)(L,{tree:s,border:x.current,green:f.current,pink:p.current,yellow:m.current}),Object(u.jsx)("p",{children:k.current})]})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Last Inserted Element"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Element to Delete"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"yellow"}),Object(u.jsx)("p",{children:"= Last Found Element"})]})]})},$=(r(47),function(){function e(){Object(g.a)(this,e),this.heap=[],this.focus=null,this.focusNode=null,this.green=null,this.greenNode=null,this.pink=null,this.pinkNode=null}return Object(v.a)(e,[{key:"insert",value:function(e){this.heap.push(e);for(var t=this.heap.length-1,r=Math.floor((t-1)/2);r>=0&&this.heap[t]<this.heap[r];){var n=this.heap[r];this.heap[r]=this.heap[t],this.heap[t]=n,t=r,r=Math.floor((t-1)/2)}}},{key:"remove",value:function(){if(0!==this.heap.length){var e=this.heap[0];if(1===this.heap.length)this.heap=[];else{this.heap[0]=this.heap.pop();for(var t=0;t<this.heap.length;)if(2*t+2<this.heap.length){if(this.heap[t]<=this.heap[2*t+1]&&this.heap[t]<=this.heap[2*t+2])break;if(this.heap[2*t+1]<this.heap[2*t+2]){var r=this.heap[t];this.heap[t]=this.heap[2*t+1],this.heap[2*t+1]=r,t=2*t+1}else{var n=this.heap[t];this.heap[t]=this.heap[2*t+2],this.heap[2*t+2]=n,t=2*t+2}}else{if(!(2*t+1<this.heap.length))break;if(!(this.heap[t]>this.heap[2*t+1]))break;var c=this.heap[t];this.heap[t]=this.heap[2*t+1],this.heap[2*t+1]=c,t=2*t+1}}return e}}},{key:"getTree",value:function(){var e=new F(null);if(this.focusNode=null,this.greenNode=null,this.pinkNode=null,0!==this.heap.length){e.root=new M(this.heap[0]),0===this.focus&&(this.focusNode=e.root),0===this.green&&(this.greenNode=e.root),0===this.pink&&(this.pinkNode=e.root);for(var t=[e.root],r=[],n=[0],c=[];0!==t.length;){for(var s=0;s<t.length;s++)2*n[s]+1<this.heap.length&&(t[s].left=new M(this.heap[2*n[s]+1]),2*n[s]+1===this.focus&&(this.focusNode=t[s].left),2*n[s]+1===this.green&&(this.greenNode=t[s].left),2*n[s]+1===this.pink&&(this.pinkNode=t[s].left),r.push(t[s].left),c.push(2*n[s]+1)),2*n[s]+2<this.heap.length&&(t[s].right=new M(this.heap[2*n[s]+2]),2*n[s]+2===this.focus&&(this.focusNode=t[s].right),2*n[s]+2===this.green&&(this.greenNode=t[s].right),2*n[s]+2===this.pink&&(this.pinkNode=t[s].right),r.push(t[s].right),c.push(2*n[s]+2));t=r,r=[],n=c,c=[]}}return e}}]),e}()),_=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new $),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),d=Object(n.useRef)(),b=Object(n.useRef)(),O=function(){t((function(e){return e+1}))},x=function(){h.current&&p();for(var e=f(2,32),t=new $,r=0;r<e;r++)t.insert(f(-999,1e3));a(t)},f=function(e,t){return Math.floor(Math.random()*(t-e)+e)},p=Object(n.useCallback)((function(){h.current?(clearInterval(j.current),h.current=!1,d.current=null,b.current=null):(j.current=setInterval((function(){d.current(),O()}),1e3-o.current.value),h.current=!0)}),[]);Object(n.useEffect)(x,[p]);var m=function(){var e=Math.floor((b.current-1)/2);if(e<0)p();else if(s.heap[e]>s.heap[b.current]){var t=s.heap[e];s.heap[e]=s.heap[b.current],s.heap[b.current]=t,b.current=e,s.green=b.current}else p()},v=function(){if(null!==s.focus)s.heap[0]=s.heap.pop(),s.focus=null;else if(2*b.current+2<s.heap.length)if(s.heap[b.current]<=s.heap[2*b.current+1]&&s.heap[b.current]<=s.heap[2*b.current+2])p();else if(s.heap[2*b.current+1]<s.heap[2*b.current+2]){var e=s.heap[b.current];s.heap[b.current]=s.heap[2*b.current+1],s.heap[2*b.current+1]=e,b.current=2*b.current+1,s.pink=b.current}else{var t=s.heap[b.current];s.heap[b.current]=s.heap[2*b.current+2],s.heap[2*b.current+2]=t,b.current=2*b.current+2,s.pink=b.current}else if(2*b.current+1<s.heap.length)if(s.heap[b.current]>s.heap[2*b.current+1]){var r=s.heap[b.current];s.heap[b.current]=s.heap[2*b.current+1],s.heap[2*b.current+1]=r,b.current=2*b.current+1,s.pink=b.current}else p();else p()};return Object(u.jsxs)("div",{className:"binary-heap",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:x,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){if(!h.current){var e=parseInt(l.current.value);isNaN(e)&&(e=f(-999,1e3)),l.current.value=null,s.heap.push(e),s.pink=null,s.green=s.heap.length-1,O(),d.current=m,b.current=s.heap.length-1,p()}},children:"Insert"}),Object(u.jsx)("input",{ref:l,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){!h.current&&s.heap.length>0&&(1===s.heap.length?(s.remove(),O()):(s.green=null,s.pink=0,s.focus=s.heap.length-1,O(),d.current=v,b.current=0,p()))},children:"Remove"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:o,onChange:function(){null!=d.current&&(clearInterval(j.current),j.current=setInterval((function(){d.current(),O()}),1e3-o.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(L,{tree:s.getTree(),border:s.focusNode,green:s.greenNode,pink:s.pinkNode})})]})},ee=(r(48),function(){function e(t,r){Object(g.a)(this,e),this.array=[];for(var n=0;n<t;n++)this.array.push(null);this.elements=0,this.size=t,this.LOADFACTOR=r}return Object(v.a)(e,[{key:"hash",value:function(e){return(e%this.size+this.size)%this.size}},{key:"resize",value:function(){var e=this.array;this.array=[],this.elements=0;for(var t=0;t<2*this.size;t++)this.array.push(null);this.size=2*this.size;for(var r=0;r<e.length;r++)null!==e[r]&&this.insert(e[r])}},{key:"insert",value:function(e){(this.elements+1)/this.size>this.LOADFACTOR&&this.resize();for(var t=this.hash(e);null!==this.array[t];)++t===this.array.length&&(t=0);return this.array[t]=e,this.elements++,t}},{key:"remove",value:function(e){for(var t=this.hash(e);this.array[t]!==e;)if(++t===this.array.length&&(t=0),null===this.array[t])return null;return this.array[t]=null,this.elements--,t}},{key:"find",value:function(e){for(var t=this.hash(e);this.array[t]!==e;)if(++t===this.array.length&&(t=0),null===this.array[t])return null;return t}}]),e}()),te=function(e){return e.hashTable.array.map((function(t,r){return r===e.green?Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t,color:"green"})]},r):r===e.pink?Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t,color:"pink"})]},r):r===e.yellow?Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t,color:"yellow"})]},r):Object(u.jsxs)("div",{className:"labeledElement",children:[Object(u.jsx)("label",{children:r}),Object(u.jsx)(d,{value:t})]},r)}))},re=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new ee(10,.5)),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),b=Object(n.useRef)(),O=Object(n.useRef)(),x=Object(n.useRef)(),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=function(){t((function(e){return e+1}))},g=function(){f.current=null,p.current=null,m.current=null;var e=parseInt(l.current.value);l.current.value=null,(isNaN(e)||e<1)&&(e=y(20,100));var t=parseFloat(o.current.value);o.current.value=null,(isNaN(t)||t>1||t<=0)&&(t=.5*Math.random()+.25);for(var r=new ee(e,t),n=0;n<(e*t-1)*(.75*Math.random()+.25);n++)r.insert(y(-999,1e3));a(r)},y=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(g,[]);return Object(u.jsxs)("div",{className:"hash-table",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:g,children:"Rand"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Size"}),Object(u.jsx)("input",{id:"randomSizeInput",ref:l,type:"text"})]}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Load Factor"}),Object(u.jsx)("input",{id:"randomLFInput",ref:o,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"buildButton",onClick:function(){f.current=null,p.current=null,m.current=null;var e=parseInt(j.current.value);j.current.value=null,(isNaN(e)||e<1)&&(e=y(20,100));var t=parseFloat(h.current.value);h.current.value=null,(isNaN(t)||t>1||t<=0)&&(t=.5*Math.random()+.25),a(new ee(e,t))},children:"Build"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Size"}),Object(u.jsx)("input",{id:"buildSizeInput",ref:j,type:"text"})]}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Load Factor"}),Object(u.jsx)("input",{id:"buildLFInput",ref:h,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){f.current=null,p.current=null,m.current=null;var e=parseInt(b.current.value);isNaN(e)&&(e=y(-999,1e3)),f.current=s.insert(e),v(),b.current.value=null},children:"Insert"}),Object(u.jsx)("input",{id:"insertInput",ref:b,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){f.current=null,p.current=null,m.current=null;var e=parseInt(O.current.value);isNaN(e)||(p.current=s.remove(e)),v(),O.current.value=null},children:"Remove"}),Object(u.jsx)("input",{id:"removeInput",ref:O,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"findButton",onClick:function(){f.current=null,p.current=null,m.current=null;var e=parseInt(x.current.value);isNaN(e)||(m.current=s.find(e)),v(),x.current.value=null},children:"Find"}),Object(u.jsx)("input",{id:"findInput",ref:x,type:"text"})]}),Object(u.jsxs)("div",{className:"visualization",children:[Object(u.jsx)(te,{hashTable:s,green:f.current,pink:p.current,yellow:m.current}),Object(u.jsxs)("p",{children:["Current Load Factor: ",(s.elements/s.size).toFixed(2)," / ",s.LOADFACTOR.toFixed(2)]})]})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Last Inserted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Last Removed"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"yellow"}),Object(u.jsx)("p",{children:"= Last Found"})]})]})},ne=r(12),ce=(r(49),function(e){var t=[];return t.push(Object(u.jsx)("p",{className:"curly-brace",children:"{"},-1)),(t=t.concat(Object(ne.a)(e.set).map((function(e,t){return Object(u.jsx)(d,{value:e},t)})))).push(Object(u.jsx)("p",{className:"curly-brace",children:"}"},t.length)),t}),se=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new Set),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),d=function(){t((function(e){return e+1}))},b=function(){for(var e=O(20,100),t=new Set,r=0;r<e;r++)t.add(O(-999,1e3));a(t)},O=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(b,[]);return Object(u.jsxs)("div",{className:"set",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:b,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"emptyButton",onClick:function(){a(new Set)},children:"Empty"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){var e=parseInt(l.current.value);isNaN(e)&&(e=O(-999,1e3)),s.add(e),d(),l.current.value=null},children:"Insert"}),Object(u.jsx)("input",{id:"insertInput",ref:l,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){var e=parseInt(o.current.value);isNaN(e)||s.delete(e),d(),o.current.value=null},children:"Remove"}),Object(u.jsx)("input",{id:"removeInput",ref:o,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"findButton",onClick:function(){var e=parseInt(j.current.value);isNaN(e)||(s.has(e)?h.current.value=e+" is in set":h.current.value=e+" not in set"),d(),j.current.value=null},children:"Find"}),Object(u.jsx)("input",{id:"findInput",ref:j,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"findOutput",ref:h,type:"text",readOnly:!0})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(ce,{set:s})})]})},ie=(r(50),function(e){var t=[];return e.map.forEach((function(e,r){t.push(Object(u.jsxs)("div",{className:"map-pair",children:[Object(u.jsx)(d,{value:r}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{className:"map-arrow",children:"\u2193"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{value:e,color:"green"})]},t.length))})),t}),ae=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new Map),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),d=Object(n.useRef)(),b=function(){t((function(e){return e+1}))},O=function(){for(var e=x(5,40),t=new Map,r=0;r<e;r++)t.set(x(-999,1e3),x(-999,1e3));a(t)},x=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(O,[]);return Object(u.jsxs)("div",{className:"map",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:O,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"emptyButton",onClick:function(){a(new Map)},children:"Empty"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"insertButton",onClick:function(){var e=parseInt(l.current.value);isNaN(e)&&(e=x(-999,1e3));var t=parseInt(o.current.value);isNaN(t)&&(t=x(-999,1e3)),s.set(e,t),b(),l.current.value=null,o.current.value=null},children:"Insert"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Key"}),Object(u.jsx)("input",{id:"insertKey",ref:l,type:"text"})]}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Value"}),Object(u.jsx)("input",{id:"insertValue",ref:o,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"removeButton",onClick:function(){var e=parseInt(j.current.value);isNaN(e)||s.delete(e),b(),j.current.value=null},children:"Remove"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Key"}),Object(u.jsx)("input",{id:"removeKey",ref:j,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"getButton",onClick:function(){var e=parseInt(h.current.value);isNaN(e)||(d.current.value=s.get(e)),b(),h.current.value=null},children:"Get"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Key"}),Object(u.jsx)("input",{id:"getKey",ref:h,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("input",{id:"getOutput",ref:d,type:"text",readonly:!0})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(ie,{map:s})})]})},le=(r(51),function(e){return e.array.map((function(t,r){return r===e.currentCompare&&r===e.currentInserting?Object(u.jsx)(d,{value:t,color:"yellow",border:"bordered"},r):r===e.currentCompare?Object(u.jsx)(d,{value:t,color:"green",border:"bordered"},r):r===e.currentInserting?Object(u.jsx)(d,{value:t,color:"yellow"},r):r<e.sortedEndIndex?Object(u.jsx)(d,{value:t,color:"green"},r):Object(u.jsx)(d,{value:t},r)}))}),ue=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useState)(!1),o=Object(i.a)(l,2),j=o[0],h=o[1],b=Object(n.useRef)(!1),O=Object(n.useRef)(null),x=Object(n.useRef)(-1),f=Object(n.useRef)(-1),p=Object(n.useRef)(-1),m=Object(n.useRef)(),v=Object(n.useRef)(),g=Object(n.useRef)(),y=Object(n.useRef)(),w=function(){t((function(e){return e+1}))},N=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=k(-999,1e3);return t}),[]),k=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){a(N(k(5,50)))}),[N]);var I=function(){if(x.current>=s.length)h(!0),S(),p.current=-1,f.current=-1;else if(s[p.current]<s[f.current]){for(var e=s[f.current],t=f.current-1;t>p.current;t--)s[t+1]=s[t];s[p.current+1]=e,f.current++,p.current=f.current,x.current++}else if(0===p.current){for(var r=s[f.current],n=f.current-1;n>=p.current;n--)s[n+1]=s[n];s[p.current]=r,f.current++,p.current=f.current,x.current++}else-1===f.current?(f.current++,x.current=1,p.current=f.current):p.current--},S=function(){b.current?(clearInterval(O.current),b.current=!1,m.current.innerHTML="Sort",m.current.classList.remove("pinkButton"),m.current.classList.add("greenButton")):j||(O.current=setInterval((function(){I(),w()}),1e3-y.current.value),b.current=!0,m.current.innerHTML="Stop",m.current.classList.remove("greenButton"),m.current.classList.add("pinkButton"))};return Object(u.jsxs)("div",{className:"insertion-sort",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",ref:v,onClick:function(){b.current&&S();var e=parseInt(g.current.value);isNaN(e)&&(e=k(5,50)),e>0&&(a(N(e)),h(!1),x.current=-1,f.current=-1,p.current=-1),g.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:g,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"toggleSortingButton",className:"greenButton",ref:m,onClick:S,children:"Sort"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:y,onChange:function(){b.current&&(clearInterval(O.current),O.current=setInterval((function(){I(),w()}),1e3-y.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(le,{array:s,sortedEndIndex:x.current,currentInserting:f.current,currentCompare:p.current})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Sorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{}),Object(u.jsx)("p",{children:"= Unsorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"yellow"}),Object(u.jsx)("p",{children:"= Current Element to be Inserted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"green",border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"})]})]})},oe=(r(52),function(e){return e.array.map((function(t,r){return r<e.sortedEndIndex?Object(u.jsx)(d,{value:t,color:"green"},r):r===e.currentMinimum&&r===e.currentFocus?Object(u.jsx)(d,{value:t,color:"pink",border:"bordered"},r):r===e.currentMinimum?Object(u.jsx)(d,{value:t,color:"pink"},r):r===e.currentFocus?Object(u.jsx)(d,{value:t,border:"bordered"},r):Object(u.jsx)(d,{value:t},r)}))}),je=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useState)(!1),o=Object(i.a)(l,2),j=o[0],h=o[1],b=Object(n.useRef)(!1),O=Object(n.useRef)(null),x=Object(n.useRef)(0),f=Object(n.useRef)(-1),p=Object(n.useRef)(-1),m=Object(n.useRef)(),v=Object(n.useRef)(),g=Object(n.useRef)(),y=function(){t((function(e){return e+1}))},w=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=N(-999,1e3);return t}),[]),N=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){a(w(N(5,50)))}),[w]);var k=function(){if(x.current>=s.length)return h(!0),void I();if(f.current===s.length-1){var e=s[x.current];return s[x.current]=s[p.current],s[p.current]=e,x.current+=1,f.current=x.current-1,void(p.current=-1)}f.current+=1,(-1===p.current||s[p.current]>s[f.current])&&(p.current=f.current)},I=function(){b.current?(clearInterval(O.current),b.current=!1,m.current.innerHTML="Sort",m.current.classList.remove("pinkButton"),m.current.classList.add("greenButton")):j||(O.current=setInterval((function(){k(),y()}),1e3-g.current.value),b.current=!0,m.current.innerHTML="Stop",m.current.classList.remove("greenButton"),m.current.classList.add("pinkButton"))};return Object(u.jsxs)("div",{className:"selection-sort",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:function(){b.current&&I();var e=parseInt(v.current.value);isNaN(e)&&(e=N(5,50)),e>0&&(a(w(e)),h(!1),x.current=0,f.current=-1,p.current=-1),v.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:v,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"toggleSortingButton",className:"greenButton",ref:m,onClick:I,children:"Sort"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:g,onChange:function(){b.current&&(clearInterval(O.current),O.current=setInterval((function(){k(),y()}),1e3-g.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(oe,{array:s,sortedEndIndex:x.current,currentFocus:f.current,currentMinimum:p.current})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Sorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{}),Object(u.jsx)("p",{children:"= Unsorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Current Minimum"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"})]})]})},he=(r(53),function(e){return e.array.map((function(t,r){return r>e.sortedStart.current?Object(u.jsx)(d,{value:t,color:"green"},r):r===e.focusOne.current||r===e.focusTwo.current?r===e.min.current?Object(u.jsx)(d,{value:t,color:"pink",border:"bordered"},r):r===e.max.current?Object(u.jsx)(d,{value:t,color:"yellow",border:"bordered"},r):Object(u.jsx)(d,{value:t,border:"bordered"},r):Object(u.jsx)(d,{value:t},r)}))}),de=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useState)(!1),o=Object(i.a)(l,2),j=o[0],h=o[1],b=Object(n.useRef)(!1),O=Object(n.useRef)(null),x=Object(n.useRef)(!1),f=Object(n.useRef)(s.length-1),p=Object(n.useRef)(-1),m=Object(n.useRef)(-1),v=Object(n.useRef)(-1),g=Object(n.useRef)(-1),y=Object(n.useRef)(),w=Object(n.useRef)(),N=Object(n.useRef)(),k=Object(n.useRef)(),I=function(){t((function(e){return e+1}))},S=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=R(-999,1e3);return f.current=e-1,t}),[]),R=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){a(S(R(5,50)))}),[S]);var T=function(){if(1!==g.current||1!==f.current){if(f.current<=0)return h(!0),void B();if(-1===p.current&&-1===m.current)return p.current=0,void(m.current=1);if(g.current>=f.current&&(!1===x.current&&(f.current=-1),v.current=-1,g.current=-1,p.current=0,m.current=1,x.current=!1,f.current--),-1===v.current)s[p.current]<s[m.current]?(v.current=p.current,g.current=m.current):(v.current=m.current,g.current=p.current);else if(v.current>g.current){!function(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}(s,v.current,g.current),x.current=!0;var e=g.current;g.current=v.current,v.current=e}else v.current=-1,g.current=-1,p.current++,m.current++}else f.current=-1},B=function(){b.current?(clearInterval(O.current),b.current=!1,y.current.innerHTML="Sort",y.current.classList.remove("pinkButton"),y.current.classList.add("greenButton")):j||(O.current=setInterval((function(){T(),I()}),1e3-k.current.value),b.current=!0,y.current.innerHTML="Stop",y.current.classList.remove("greenButton"),y.current.classList.add("pinkButton"))};return Object(u.jsxs)("div",{className:"bubble-sort",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",ref:w,onClick:function(){b.current&&B();var e=parseInt(N.current.value);isNaN(e)&&(e=R(5,50)),e>0&&(a(S(e)),h(!1),f.current=e-1,p.current=-1,m.current=-1,v.current=-1,g.current=-1),N.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:N,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"toggleSortingButton",className:"greenButton",ref:y,onClick:B,children:"Sort"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:k,onChange:function(){b.current&&(clearInterval(O.current),O.current=setInterval((function(){T(),I()}),1e3-k.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(he,{array:s,sortedStart:f,focusOne:p,focusTwo:m,min:v,max:g})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Sorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{}),Object(u.jsx)("p",{children:"= Unsorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focuses"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Lesser of Focuses"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"yellow"}),Object(u.jsx)("p",{children:"= Greater of Focuses"})]})]})},be=(r(54),function(e){for(var t=[],r=0;r<e.mergedArrays.length;r++){var n=e.arrays[2*r],c=[];2*r+1<e.arrays.length&&(c=e.arrays[2*r+1]),t.push(Object(u.jsx)(Oe,{array1:n,array2:c,mergedArray:e.mergedArrays[r]},t.length)),t.push(Object(u.jsx)("hr",{},t.length))}return t.pop(),t}),Oe=function(e){return Object(u.jsxs)("div",{className:"merge-sort-display-row",children:[Object(u.jsx)("div",{children:Object(u.jsx)(xe,{array1:e.array1,array2:e.array2})}),Object(u.jsx)("div",{children:Object(u.jsx)(fe,{array:e.mergedArray})})]})},xe=function(e){for(var t=[],r=0;r<e.array1.length;r++)r===e.array1.length-1?t.push(Object(u.jsx)(d,{value:e.array1[r],border:"bordered"},t.length)):t.push(Object(u.jsx)(d,{value:e.array1[r]},t.length));0===e.array1.length&&t.push(Object(u.jsx)(d,{color:"none"},t.length)),t.push(Object(u.jsx)("br",{},t.length));for(var n=0;n<e.array2.length;n++)n===e.array2.length-1?t.push(Object(u.jsx)(d,{value:e.array2[n],border:"bordered"},t.length)):t.push(Object(u.jsx)(d,{value:e.array2[n]},t.length));return 0===e.array2.length&&t.push(Object(u.jsx)(d,{color:"none"},t.length)),t},fe=function(e){var t=[];t.push(Object(u.jsx)("p",{className:"arrow",children:"\u2192"},0));for(var r=0;r<e.array.length;r++)null!==e.array[r]&&t.push(Object(u.jsx)(d,{color:"green",value:e.array[r]},t.length));return t},pe=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useRef)([[]]),c=Object(n.useRef)([[]]),s=Object(n.useRef)([]),a=Object(n.useRef)(0),l=Object(n.useState)(!1),o=Object(i.a)(l,2),j=o[0],h=o[1],d=Object(n.useRef)(!1),b=Object(n.useRef)(null),O=Object(n.useRef)(),x=Object(n.useRef)(),f=Object(n.useRef)(),p=function(){t((function(e){return e+1}))},m=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=[v(-999,1e3)];return t}),[]),v=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){r.current=m(v(5,20)),g(),p()}),[m]);var g=function(){c.current=[],s.current=[],a.current=0;for(var e=Math.ceil(r.current.length/2),t=0;t<e;t++)if(c.current.push([]),2*t+1<r.current.length){for(var n=0;n<r.current[2*t].length+r.current[2*t+1].length;n++)c.current[t].push(null);s.current.push(r.current[2*t].length+r.current[2*t+1].length-1)}else{for(var i=0;i<r.current[2*t].length;i++)c.current[t].push(null);s.current.push(r.current[2*t].length-1)}},y=function(){var e=r.current[2*a.current],t=[];if(2*a.current+1<r.current.length&&(t=r.current[2*a.current+1]),0===e.length&&0===t.length&&a.current++,a.current>c.current.length-1)return 1===c.current.length?(h(!0),clearInterval(b.current),d.current=!1,x.current.innerHTML="Sort",x.current.classList.remove("pinkButton"),void x.current.classList.add("greenButton")):(r.current=c.current,void g());if(e=r.current[2*a.current],t=[],2*a.current+1<r.current.length&&(t=r.current[2*a.current+1]),0===e.length){for(var n=t.length-1;n>=0;n--)c.current[a.current][s.current[a.current]]=t[n],s.current[a.current]--;r.current[2*a.current+1]=[]}else if(0===t.length){for(var i=e.length-1;i>=0;i--)c.current[a.current][s.current[a.current]]=e[i],s.current[a.current]--;r.current[2*a.current]=[]}else e[e.length-1]>=t[t.length-1]?(c.current[a.current][s.current[a.current]]=e[e.length-1],s.current[a.current]--,r.current[2*a.current].pop()):(c.current[a.current][s.current[a.current]]=t[t.length-1],s.current[a.current]--,r.current[2*a.current+1].pop())},w=function(){d.current?(clearInterval(b.current),d.current=!1,x.current.innerHTML="Sort",x.current.classList.remove("pinkButton"),x.current.classList.add("greenButton")):j||(b.current=setInterval((function(){y(),p()}),1e3-f.current.value),d.current=!0,x.current.innerHTML="Stop",x.current.classList.remove("greenButton"),x.current.classList.add("pinkButton"))};return Object(u.jsxs)("div",{className:"merge-sort",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:function(){d.current&&w();var e=parseInt(O.current.value);isNaN(e)&&(e=v(5,20)),e>0&&(r.current=m(e),g(),p(),h(!1)),O.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:O,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{ref:x,className:"greenButton",onClick:w,children:"Sort"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:f,onChange:function(){d.current&&(clearInterval(b.current),b.current=setInterval((function(){y(),p()}),1e3-f.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(be,{arrays:r.current,mergedArrays:c.current})})]})},me=(r(55),function(e){return e.array.map((function(t,r){return r===e.pivot.current?Object(u.jsx)(d,{value:t,color:"purple"},r):r===e.low.current&&r===e.high.current?Object(u.jsx)(d,{value:t,border:"bordered",color:"yellow"},r):r===e.low.current?Object(u.jsx)(d,{value:t,border:"bordered",color:"pink"},r):r===e.high.current?Object(u.jsx)(d,{value:t,border:"bordered",color:"green"},r):e.sortedElements.current.includes(r)?Object(u.jsx)(d,{value:t,color:"green"},r):Object(u.jsx)(d,{value:t},r)}))}),ve=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(null),o=Object(n.useRef)(!1),j=Object(n.useState)(!1),h=Object(i.a)(j,2),b=h[0],O=h[1],x=Object(n.useRef)(),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=Object(n.useRef)([]),g=Object(n.useRef)([]),y=Object(n.useRef)(-1),w=Object(n.useRef)(-1),N=Object(n.useRef)(-1),k=function(){t((function(e){return e+1}))};var I=function(){if(v.current.length===s.length&&(clearInterval(l.current),o.current=!1,x.current.innerHTML="Sort",x.current.classList.remove("pinkButton"),x.current.classList.add("greenButton")),1===s.length&&v.current.push(0),-1===N.current)0===v.current.length?(N.current=s.length-1,y.current=0,w.current=s.length-2):(y.current=g.current.shift(),N.current=g.current.shift(),v.current.includes(N.current-1)||(w.current=N.current-1),0===N.current&&(v.current.push(N.current),y.current=-1,N.current=-1,w.current=-1));else if(0===N.current)v.current.push(N.current);else if(y.current>w.current){var e=s[N.current];if(s.splice(N.current,1),s.splice(y.current,0,e),v.current.push(y.current),0!==y.current){var t=v.current.filter((function(e){return e<y.current}));0===t.length?(g.current.push(0),g.current.push(y.current-1)):Math.max.apply(Math,Object(ne.a)(t))!==y.current-1&&(g.current.push(Math.max.apply(Math,Object(ne.a)(t))+1),g.current.push(y.current-1))}if(y.current!==s.length-1){var r=v.current.filter((function(e){return e>y.current}));0===r.length?(g.current.push(y.current+1),g.current.push(s.length-1)):Math.min.apply(Math,Object(ne.a)(r))!==y.current+1&&(g.current.push(y.current+1),g.current.push(Math.min.apply(Math,Object(ne.a)(r))-1))}y.current=-1,N.current=-1,w.current=-1}else s[y.current]>s[N.current]?s[w.current]<s[N.current]?function(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}(s,y.current,w.current):w.current--:y.current++},S=function(){o.current?(clearInterval(l.current),o.current=!1,x.current.innerHTML="Sort",x.current.classList.remove("pinkButton"),x.current.classList.add("greenButton")):b||(l.current=setInterval((function(){I(),k()}),1e3-m.current.value),o.current=!0,x.current.innerHTML="Stop",x.current.classList.remove("greenButton"),x.current.classList.add("pinkButton"))},R=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=T(-999,1e3);return t}),[]),T=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){a(R(T(5,50)))}),[R]);return Object(u.jsxs)("div",{className:"quick-sort",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",ref:f,onClick:function(){o.current&&S();var e=parseInt(p.current.value);isNaN(e)&&(e=T(5,50)),e>0&&(a(R(e)),O(!1),N.current=-1,y.current=-1,w.current=-1,v.current=[]),p.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:p,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"worstButton",onClick:function(){o.current&&S();var e=parseInt(p.current.value);isNaN(e)&&(e=T(5,50)),e>0&&(a(function(e){for(var t=[],r=0;r<e;r++)t.push(r);return t}(e)),O(!1),N.current=-1,y.current=-1,w.current=-1,v.current=[]),p.current.value=null},children:"Worst-case"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"toggleSortingButton",className:"greenButton",ref:x,onClick:S,children:"Sort"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:m,onChange:function(){o.current&&(clearInterval(l.current),l.current=setInterval((function(){I(),k()}),1e3-m.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(me,{array:s,low:y,high:w,pivot:N,sortedElements:v})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Sorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{}),Object(u.jsx)("p",{children:"= Unsorted"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink",border:"bordered"}),Object(u.jsx)("p",{children:"= Current Low"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"green",border:"bordered"}),Object(u.jsx)("p",{children:"= Current High"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"purple"}),Object(u.jsx)("p",{children:"= Pivot"})]})]})},ge=(r(56),function(e){return e.array.map((function(e,t){return Object(u.jsx)(d,{value:e},t)}))}),ye=function(e){return e.array.map((function(e,t){return Object(u.jsx)(d,{value:e,color:"green"},t)}))},we=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new $),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useState)([]),o=Object(i.a)(l,2),j=o[0],h=o[1],d=Object(n.useState)([]),b=Object(i.a)(d,2),O=b[0],x=b[1],f=Object(n.useState)(!1),p=Object(i.a)(f,2),m=p[0],v=p[1],g=Object(n.useRef)(),y=Object(n.useRef)(),w=Object(n.useRef)(),N=Object(n.useRef)(!1),k=Object(n.useRef)(null),I=function(){t((function(e){return e+1}))},S=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=R(-999,1e3);return t}),[]),R=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){h(S(R(5,32)))}),[S]);var T=function(){0===j.length&&0===s.heap.length?(v(!0),B()):0!==j.length?s.insert(j.pop()):O.push(s.remove())},B=function(){N.current?(clearInterval(k.current),N.current=!1,y.current.innerHTML="Sort",y.current.classList.remove("pinkButton"),y.current.classList.add("greenButton")):m||(k.current=setInterval((function(){T(),I()}),1e3-w.current.value),N.current=!0,y.current.innerHTML="Stop",y.current.classList.remove("greenButton"),y.current.classList.add("pinkButton"))};return Object(u.jsxs)("div",{className:"heap-sort",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:function(){N.current&&B();var e=parseInt(g.current.value);isNaN(e)&&(e=R(5,32)),e>0&&(h(S(e)),a(new $),x([]),v(!1)),g.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:g,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"toggleSortingButton",className:"greenButton",ref:y,onClick:B,children:"Sort"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:w,onChange:function(){N.current&&(clearInterval(k.current),k.current=setInterval((function(){T(),I()}),1e3-w.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsxs)("div",{className:"visualization",children:[Object(u.jsx)("div",{className:"array",children:Object(u.jsx)(ge,{array:j})}),Object(u.jsx)(L,{tree:s.getTree()}),Object(u.jsx)("div",{className:"array",children:Object(u.jsx)(ye,{array:O})})]})]})},Ne=(r(57),function(e){return e.array.map((function(t,r){return r===e.focus?Object(u.jsx)(d,{value:t,border:"bordered"},r):r===e.green?Object(u.jsx)(d,{value:t,color:"green"},r):r===e.pink?Object(u.jsx)(d,{value:t,color:"pink"},r):Object(u.jsx)(d,{value:t},r)}))}),ke=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),b=Object(n.useRef)(null),O=Object(n.useRef)(null),x=Object(n.useRef)(),f=Object(n.useRef)(),p=Object(n.useRef)(),m=function(){t((function(e){return e+1}))},v=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=g(-999,1e3);return t}),[]),g=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){a(v(g(5,50)))}),[v]);var y=function(){s[O.current]===b.current?(f.current=O.current,O.current=null,w()):O.current===s.length-1?(p.current=s.length-1,O.current=null,w()):O.current++},w=function(){h.current?(clearInterval(x.current),h.current=!1):(x.current=setInterval((function(){y(),m()}),1e3-j.current.value),h.current=!0,O.current=null,f.current=null,p.current=null)};return Object(u.jsxs)("div",{className:"linear-search",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:function(){h.current&&w(),O.current=null,f.current=null,p.current=null;var e=parseInt(l.current.value);isNaN(e)&&(e=g(5,50)),e>0&&a(v(e)),l.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:l,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"searchButton",onClick:function(){h.current&&w();var e=parseInt(o.current.value);isNaN(e)&&(e=0),o.current.value=null,b.current=e,w(),O.current=0,m()},children:"Search"}),Object(u.jsx)("input",{id:"searchInput",ref:o,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:j,onChange:function(){h.current&&(clearInterval(x.current),x.current=setInterval((function(){y(),m()}),1e3-j.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(Ne,{array:s,focus:O.current,green:f.current,pink:p.current})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Element Found"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Element Not Found"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"})]})]})},Ie=(r(58),function(e){return e.array.map((function(t,r){return r===e.focus?Object(u.jsx)(d,{value:t,border:"bordered"},r):r===e.green?Object(u.jsx)(d,{value:t,color:"green"},r):r>e.upper||r<e.lower?Object(u.jsx)(d,{value:t,color:"pink"},r):Object(u.jsx)(d,{value:t},r)}))}),Se=function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)([]),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)(),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),b=Object(n.useRef)(null),O=Object(n.useRef)(null),x=Object(n.useRef)(),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=function(){t((function(e){return e+1}))},g=Object(n.useCallback)((function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=y(-999,1e3);return t.sort((function(e,t){return e-t})),t}),[]),y=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)((function(){a(g(y(5,50)))}),[g]);var w=function(){m.current<p.current?(O.current=null,N()):O.current>m.current||O.current<p.current?O.current=Math.floor((p.current+m.current)/2):s[O.current]<b.current?p.current=O.current+1:s[O.current]>b.current?m.current=O.current-1:(f.current=O.current,O.current=null,N())},N=function(){h.current?(clearInterval(x.current),h.current=!1):(x.current=setInterval((function(){w(),v()}),1e3-j.current.value),h.current=!0,O.current=null,f.current=null,p.current=0,m.current=s.length-1)};return Object(u.jsxs)("div",{className:"binary-search",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:function(){h.current&&N(),O.current=null,f.current=null;var e=parseInt(l.current.value);isNaN(e)&&(e=y(5,50)),e>0&&(p.current=0,m.current=e-1,a(g(e))),l.current.value=null},children:"Random"}),Object(u.jsxs)("span",{className:"labeledInput",children:[Object(u.jsx)("label",{children:"Array Size"}),Object(u.jsx)("input",{id:"arraySizeInput",ref:l,type:"text"})]}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"searchButton",onClick:function(){h.current&&N();var e=parseInt(o.current.value);isNaN(e)&&(e=0),o.current.value=null,b.current=e,N(),O.current=Math.floor((p.current+m.current)/2),v()},children:"Search"}),Object(u.jsx)("input",{id:"searchInput",ref:o,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:j,onChange:function(){h.current&&(clearInterval(x.current),x.current=setInterval((function(){w(),v()}),1e3-j.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(Ie,{array:s,focus:O.current,green:f.current,lower:p.current,upper:m.current})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Element Found"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Elements Ruled Out"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"})]})]})},Re=(r(59),function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new F(null)),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)([]),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),b=Object(n.useRef)(),O=Object(n.useRef)(null),x=Object(n.useRef)(null),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=function(){t((function(e){return e+1}))},g=function(){for(var e=y(1,5),t=new F(new M(y(-999,1e3))),r=[t.root],n=[],c=0;c<e;c++){for(var s=0;s<r.length;s++)Math.random()<Math.pow(.9,c)&&(r[s].left=new M(y(-999,1e3)),n.push(r[s].left)),Math.random()<Math.pow(.9,c)&&(r[s].right=new M(y(-999,1e3)),n.push(r[s].right));r=n,n=[]}a(t)},y=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(g,[]);var w=function e(t){null!==t&&(l.current.push(t),e(t.left),e(t.right))},N=function(){x.current.value===O.current?(p.current=x.current,x.current=null,k()):o.current===l.current.length-1?(m.current=x.current,x.current=null,k()):(o.current++,x.current=l.current[o.current])},k=function(){b.current?(clearInterval(f.current),b.current=!1):(f.current=setInterval((function(){N(),v()}),1e3-h.current.value),b.current=!0,p.current=null,m.current=null)};return Object(u.jsxs)("div",{className:"depth-first-search",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:g,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"searchButton",onClick:function(){b.current&&k();var e=parseInt(j.current.value);isNaN(e)&&(e=0),j.current.value=null,l.current=[],w(s.root),x.current=l.current[0],o.current=0,O.current=e,k(),v()},children:"Search"}),Object(u.jsx)("input",{id:"searchInput",ref:j,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:h,onChange:function(){b.current&&(clearInterval(f.current),f.current=setInterval((function(){N(),v()}),1e3-h.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(L,{tree:s,border:x.current,green:p.current,pink:m.current})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Element Found"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Element Not Found"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"})]})]})}),Te=(r(60),function(){var e=Object(n.useState)(0),t=Object(i.a)(e,2)[1],r=Object(n.useState)(new F(null)),c=Object(i.a)(r,2),s=c[0],a=c[1],l=Object(n.useRef)([]),o=Object(n.useRef)(),j=Object(n.useRef)(),h=Object(n.useRef)(),b=Object(n.useRef)(),O=Object(n.useRef)(null),x=Object(n.useRef)(null),f=Object(n.useRef)(),p=Object(n.useRef)(),m=Object(n.useRef)(),v=function(){t((function(e){return e+1}))},g=function(){for(var e=y(1,5),t=new F(new M(y(-999,1e3))),r=[t.root],n=[],c=0;c<e;c++){for(var s=0;s<r.length;s++)Math.random()<Math.pow(.9,c)&&(r[s].left=new M(y(-999,1e3)),n.push(r[s].left)),Math.random()<Math.pow(.9,c)&&(r[s].right=new M(y(-999,1e3)),n.push(r[s].right));r=n,n=[]}a(t)},y=function(e,t){return Math.floor(Math.random()*(t-e)+e)};Object(n.useEffect)(g,[]);var w=function(){x.current.value===O.current?(p.current=x.current,x.current=null,N()):o.current===l.current.length-1?(m.current=x.current,x.current=null,N()):(o.current++,x.current=l.current[o.current])},N=function(){b.current?(clearInterval(f.current),b.current=!1):(f.current=setInterval((function(){w(),v()}),1e3-h.current.value),b.current=!0,p.current=null,m.current=null)};return Object(u.jsxs)("div",{className:"breadth-first-search",children:[Object(u.jsxs)("div",{id:"main",children:[Object(u.jsxs)("div",{className:"controls",children:[Object(u.jsx)("button",{id:"randomButton",onClick:g,children:"Random"}),Object(u.jsx)("br",{}),Object(u.jsx)("button",{id:"searchButton",onClick:function(){b.current&&N();var e=parseInt(j.current.value);isNaN(e)&&(e=0),j.current.value=null,l.current=[],function(){for(var e=[s.root],t=[];0!==e.length;){for(var r=0;r<e.length;r++)l.current.push(e[r]),null!==e[r].left&&t.push(e[r].left),null!==e[r].right&&t.push(e[r].right);e=t,t=[]}}(),x.current=l.current[0],o.current=0,O.current=e,N(),v()},children:"Search"}),Object(u.jsx)("input",{id:"searchInput",ref:j,type:"text"}),Object(u.jsx)("br",{}),Object(u.jsxs)("span",{className:"labeledSlider",children:[Object(u.jsx)("label",{children:"Animation Speed"}),Object(u.jsx)("input",{className:"slider",ref:h,onChange:function(){b.current&&(clearInterval(f.current),f.current=setInterval((function(){w(),v()}),1e3-h.current.value))},min:"0",max:"990",type:"range"})]})]}),Object(u.jsx)("div",{className:"visualization",children:Object(u.jsx)(L,{tree:s,border:x.current,green:p.current,pink:m.current})})]}),Object(u.jsxs)("div",{className:"legend",children:[Object(u.jsx)(d,{color:"green"}),Object(u.jsx)("p",{children:"= Element Found"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{color:"pink"}),Object(u.jsx)("p",{children:"= Element Not Found"}),Object(u.jsx)("br",{}),Object(u.jsx)(d,{border:"bordered"}),Object(u.jsx)("p",{children:"= Current Focus"})]})]})}),Be=function(e){return"Array"===e.visualization?Object(u.jsx)(O,{}):"List"===e.visualization?Object(u.jsx)(f,{}):"Array List"===e.visualization?Object(u.jsx)(m,{}):"Linked List"===e.visualization?Object(u.jsx)(k,{}):"Stack"===e.visualization?Object(u.jsx)(S,{}):"Queue"===e.visualization?Object(u.jsx)(A,{}):"Binary Tree"===e.visualization?Object(u.jsx)(E,{}):"Binary Search Tree"===e.visualization?Object(u.jsx)(D,{}):"AVL Tree"===e.visualization?Object(u.jsx)(X,{}):"Binary Heap"===e.visualization?Object(u.jsx)(_,{}):"Hash Table"===e.visualization?Object(u.jsx)(re,{}):"Set"===e.visualization?Object(u.jsx)(se,{}):"Map"===e.visualization?Object(u.jsx)(ae,{}):"Insertion Sort"===e.visualization?Object(u.jsx)(ue,{}):"Selection Sort"===e.visualization?Object(u.jsx)(je,{}):"Bubble Sort"===e.visualization?Object(u.jsx)(de,{}):"Merge Sort"===e.visualization?Object(u.jsx)(pe,{}):"Quick Sort"===e.visualization?Object(u.jsx)(ve,{}):"Heap Sort"===e.visualization?Object(u.jsx)(we,{}):"Linear Search"===e.visualization?Object(u.jsx)(ke,{}):"Binary Search"===e.visualization?Object(u.jsx)(Se,{}):"Depth First Search"===e.visualization?Object(u.jsx)(Re,{}):"Breadth First Search"===e.visualization?Object(u.jsx)(Te,{}):null},Ae=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"An array is a linear data structure where elements are stored in a contiguous block of memory. Each element typically takes up the same amount of space in memory so that the location of an element can be easily computed from its index. To find the location of the element in memory, the index is multiplied by the size of an element and then added to the base address of the array."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"An Array has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Build:"})," initializes an array of a certain size by allocating space in memory"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Set:"})," sets the value of an element at a specific index in the array"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Delete:"})," removes an element at a specific index in the array"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Get:"})," returns the value of an element at a specific index in the array"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Because an array allows for finding the location of an element in memory in constant time, operations like set, delete, and get can all be done in constant time. However, some more complex operations such as insertion and deletion from a full array require copying several elements to new locations in memory, and therefore take linear time."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Build"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Set"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Delete"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Get"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Ce=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A list is an Abstract Data Type (ADT) that represents data in a linear structure. Elements can be added or removed at any point in the list. The list maintains a specific order depending on where in the list elements were inserted and removed."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A list includes the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," inserts an element into the list at a specific index"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," removes an element from the list at a specific index"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Get:"})," returns an element from the list at a specific index without removing it"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"Since a List is an ADT, it has multiple possible implementations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Array List:"})," Elements are kept in an contiguous piece of memory in an array form. The benefit of this is its simplicity and relatively lower memory usage. Another benefit is the ability to reach an element at a given index in constant time. The cons of this implementation are that it has a limitted capacity and may need to copy all of its values to a new array to increase the capacity. Also, it takes linear time to insert or remove an element."]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Linked List:"})," Each element is kept with a pointer to the next element in the list. A pointer is kept for the first element in the list. The advantage of this is that it can dynamically resize at runtime and takes only as much memory as is needed. It also allows constant time removal or addition to the head, or any other place in the list if it has a pointer to that spot. A disadvantage of linked list is the greater memory cost to store values and pointers to the next node. Also, reaching an element at a given index takes linear time."]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{}),Object(u.jsx)("th",{children:"Array List"}),Object(u.jsx)("th",{children:"Linked List"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Insert at head"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:"O(1)"})})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Remove at head"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:"O(1)"})})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Get from head"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Insert at given index"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Remove at given index"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Get from given index"}),Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:"O(1)"})}),Object(u.jsx)("td",{children:"O(n)"})]})]})})]})},ze=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"An Array List is a linear data structure. Values are stored in an array structure using a contiguous block of memory. An Array List is one possible implementation of a List, an Abstract Data Type (ADT)."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"An Array List has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," inserts an element into the array list at a specific index"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," removes an element from the array list at a specific index"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Get:"})," returns an element from the array list at a specific index without removing it"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Since the information in an array list is stored contiguously in an array, it benefits from random access. Consequently, operations such as accessing an element from a given index are very inexpensive. The trade off for this is that insertion and deletion become expensive operations since they require creating a new array or copying several elements to new locations in memory."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert at head"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove at head"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Get from head"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert at given index"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove at given index"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Get from given index"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Le=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A Linked List is a linear data structure consisting of several nodes. Each node contains an element value, and a pointer to the next node's location in memory. The last node in the list will have a pointer to null. A pointer to the head of the list is always kept track of. A Linked List is one possible implementation of a List, an Abstract Data Type (ADT)."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A linked list includes the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," inserts an element into the list at a specific index"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," removes an element from the list at a specific index"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Get:"})," returns an element from the list at a specific index without removing it"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The nodes in a Linked List do not need to be stored in contiguous memory. Because of this, it benefits from the ability to insert and delete elements at any point in the list without restructuring or reallocating data in memory. However, one prominent trade off for these benefits is the lack of random access. This causes basic operations, such as obtaining an element by a given index or locating a point of insertion/deletion, to require iterating over the data structure."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert at head"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove at head"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Get from head"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert at given index"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove at given index"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Get from given index"}),Object(u.jsx)("td",{children:"O(n)"})]})]})})]})},Me=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A stack is an Abstract Data Type (ADT) that represents a linear data structure. Elements are stored in a sequential order depending on when they are added to the stack. Elements may only be added or removed from one end of the stack. Therefore a stack is a last-in-first-out (LIFO) data structure. When an element is removed from the stack, it must be the last element that was added onto the end. Likewise, the last element to be removed before the stack is empty would be the first element that was inserted."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A stack has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Push:"})," adds an element at the end of the stack"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Pop:"})," removes an element from the end of the stack"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Peek:"})," returns the element at the end of the stack without removing it"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"Since a stack is an ADT, it has multiple possible implementations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Array Implementation:"})," An array is allocated with a certain capacity to represent the stack. The index of the current top of the stack is kept track of. The advantages of this implementation are its simplicity and relatively low memory usage. The main disadvantage is that the size of the array cannot change so there is a limit to how much data can be stored. On the other hand, the space allocated may be way more than needed."]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Linked List Implementation:"})," A linked list is created to represent the stack. Elements are added and removed from the head of the linked last. The advantage of this implementation is its ability to be resized at runtime, therefore only using as much memory as is needed. The disadvantage of this is that the pointers involved in linked lists use more memory than a simple array."]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{}),Object(u.jsx)("th",{children:"Array Implementation"}),Object(u.jsx)("th",{children:"Linked List Implementation"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Push"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Pop"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Peek"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Fe=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A queue is an Abstract Data Type (ADT) that represents a linear data structure. Elements may only be added to one end and removed from the other end of a queue. Therefore a queue is a first-in-first-out (FIFO) data structure. When an element is removed from the queue, it will be the earliest one added. The last element to be removed will be the last one added to the queue."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A queue has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Enqueue:"})," adds an element to the queue"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Dequeue:"})," removes an element from the queue"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Peek:"})," returns the next element to be removed from the queue without removing it"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"Since a queue is an ADT, it has multiple possible implementations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Linked List Implementation:"})," A linked list is created to represent the queue. Elements are enqueued at the tail of the linked list and dequeued at the head. A pointer is kept for both the head and tail to allow this. Often a doubly linked list is often used instead of this. The advantage of the linked list implementation is its ability to be resized and grown as much as necessary. The disadvantage of this is that the pointers involved in linked lists use more memory than a simple array."]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Array Implementation:"})," An array is allocated with a certain capacity to represent the queue. The index of both ends of the queue are kept track of. When we remove or add an element, these indices are updated. The array is used in a circular fashion so that our queue maintains a constant maximum capacity. The advantages of this implementation are its simplicity and relatively low memory usage. The main disadvantage is that the size of the array cannot change so there is a limit to how much data can be stored. On the other hand, the space allocated may be way more than needed."]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{}),Object(u.jsx)("th",{children:"Array Implementation"}),Object(u.jsx)("th",{children:"Linked List Implementation"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Enqueue"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Dequeue"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Peek"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Ee=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A Tree is a heirarchal data structure consisting of levels of nodes. Each node contains a value for that element in the tree, and some amount of pointers to children nodes. Since there can be any number of children nodes, a list is typically used to keep track of all of the children of a given node. The first node in the tree is known as the root, and is always kept track of as the start of the entire structure. The children of the root can be thought of as sub-trees, which are on there own also a data structure. Depending on how many children that a node has, the tree can be very different."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"One specific type of Tree is a Binary Tree. A Binary Tree is a data structure in which each node in the tree contains at most two children nodes, a left and a right child. Each node contains the value of an element, a pointer to the left child node, and a pointer to the right child node. If a node does not have a left or right child it typically has a null pointer."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"Binary Trees are used to implement several other data structures:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Binary Search Tree:"})," elements are kept in an ordered pattern to allow for fast searching"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"AVL Tree:"})," after insertion or deletion the tree balances itself to keep a minimal height"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Binary Heap:"})," elements are kept in an ordered pattern to keep extrema at the root"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"When we consider trees, it is often useful to think about the height of the tree. This is because operations that require a single traversal down the tree will have a complexity equal to the height. Because of its heirarchical structure, a Binary Tree has an average-case height of O(log n) where n is the number of elements. In the worst-case where the tree is just a sequence of nodes with only right or left children, the height of the tree becomes O(n)."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Property"}),Object(u.jsx)("th",{children:"Worst-Case"}),Object(u.jsx)("th",{children:"Average-Case"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Height"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(log n)"})]})]})})]})},qe=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A Binary Search Tree is a tree data structure where elements are kept in an ordered pattern. For any given node, all of the elements in the left sub-tree are less than or equal to the given node, and all of the elements in the right sub-tree are greater than or equal to the given node."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A Binary Search Tree has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," inserts an element into tree"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," removes an element from the tree"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Find:"})," searches for an element in the tree"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In order to maintain the ordered property of the tree, insertion and removal of elements must be done in a careful manner. For insertion the tree is traversed going left if the new value is less than the current node and going right if the new value is greater than the current node. Once we reach an empty spot, a new node is created there with the new value."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"To remove a value from the tree, it becomes more complex. First we traverse the tree to find the node of the value we want to remove. If it has no children, we simply set its parent's child to null. If it has 1 child, we set its parent's child to its child. If it has 2 children, we find the leftmost child of the right sub-tree of the current node, set the current node to that value, and then delete the leftmost child of the right sub-tree. This can also be done with the rightmost child of the left sub-tree."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"To understand the complexity of the operations in a Binary Search Tree we must consider the height of the tree. In the worst-case, the tree will be a straight line, and the height will be equal to the number of elements, O(n). In the average-case and best-case, the height of the tree will be O(log n)."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Worst-Case"}),Object(u.jsx)("th",{children:"Average-Case"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(log n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(log n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Find"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(log n)"})]})]})})]})},He=function e(){Object(g.a)(this,e),this.root=null,this.height=0,this.list=[]},De=function e(t){Object(g.a)(this,e),this.value=t,this.left=null,this.right=null},We=function(){var e=new He,t=new De("z"),r=new De("y"),n=new De("x");e.root=t,t.left=r,r.left=n;var c=new He,s=new De("z"),i=new De("y"),a=new De("x");c.root=s,s.right=i,i.right=a;var l=new He,o=new De("z"),j=new De("y"),h=new De("x");l.root=o,o.right=j,j.left=h;var d=new He,b=new De("z"),O=new De("y"),x=new De("x");d.root=b,b.left=O,O.right=x;var f=new He,p=new De("y");p.left=new De("x"),p.right=new De("z"),f.root=p;var m=new He,v=new De("y");return v.left=new De("z"),v.right=new De("x"),m.root=v,Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"An AVL Tree is a self-balancing binary search tree. Thus, it inherits the properties of order as well as the restriction that each node has either zero, one, or two children. The additional restriction placed on AVL Trees is that the height of two sibling subtrees differ by at most one. It maintains this condition by performing a series of rotational operations on nodes following insertion and deletion."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"An AVL Tree has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," inserts an element into tree"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," removes an element from the tree"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Find:"})," searches for an element in the tree"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"At insertion, a regular BST insertion is performed. Next, if there is an unbalanced node found on the path up from the newly inserted node to the root, then a rotation will occur. The exact rotation operation depends on the relative postions of the first unbalanced node and its two immediate adjacent ancestors on the path back to the newly inserted node."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Likewise, at deletion, a regular BST deletion is performed and a rotation may also occur. However, whether or not the rotation occurs and the exact rotation operation depends instead on the relative positions of the first unbalanced node on the path up the tree as well as its two immediate ancestors that are each the largest height child of their parent node."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Because of the fact that AVL Trees maintain a balanced state, they have advantages over a traditional Binary Search Tree. The height of the tree will always be O(log n), where as a regular BST may have a height of O(n). The worst-case time complexities for each basic operation are O(log n) in an AVL Tree rather than O(n)."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"AVL trees use two rotation operations to rotate nodes in a tree: "}),Object(u.jsxs)("div",{style:{border:"2px solid black",padding:"25px",borderRadius:"10px"},children:[Object(u.jsx)("p",{style:{textAlign:"center"},children:Object(u.jsx)("b",{children:"Right Rotation (node z)"})}),Object(u.jsx)(L,{tree:e}),Object(u.jsx)("h2",{style:{textAlign:"center",fontSize:"50px"},children:"\ud83e\udc17"}),Object(u.jsx)(L,{tree:f}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{style:{textAlign:"center"},children:Object(u.jsx)("b",{children:"Left Rotation (node z)"})}),Object(u.jsx)(L,{tree:c}),Object(u.jsx)("h2",{style:{textAlign:"center",fontSize:"50px"},children:"\ud83e\udc17"}),Object(u.jsx)(L,{tree:m}),Object(u.jsx)("br",{})]}),Object(u.jsx)("br",{}),Object(u.jsx)("h3",{children:"Insertion and Deletion may result in the following patterns of nodes and thus the necessity to perform rotation operations to rebalance the tree."}),Object(u.jsxs)("div",{style:{border:"2px solid black",padding:"25px",borderRadius:"10px"},children:[Object(u.jsx)("p",{style:{textAlign:"center"},children:Object(u.jsx)("b",{children:"Left Left"})}),Object(u.jsx)(L,{style:{transform:"translate(100px, 100px)"},tree:e}),Object(u.jsx)("p",{style:{textAlign:"center"},children:"Resolved by a right-rotation at node z."}),Object(u.jsx)("br",{}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{style:{textAlign:"center"},children:Object(u.jsx)("b",{children:"Right Right"})}),Object(u.jsx)(L,{tree:c}),Object(u.jsx)("p",{style:{textAlign:"center"},children:"Resolved by a left-rotation at node z."}),Object(u.jsx)("br",{}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{style:{textAlign:"center"},children:Object(u.jsx)("b",{children:"Right Left"})}),Object(u.jsx)(L,{tree:l}),Object(u.jsx)("p",{style:{textAlign:"center"},children:"Resolved by a right-rotation at node y,"}),Object(u.jsx)("p",{style:{textAlign:"center"},children:"followed by a left-rotation at node z."}),Object(u.jsx)("br",{}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{style:{textAlign:"center"},children:Object(u.jsx)("b",{children:"Left Right"})}),Object(u.jsx)(L,{tree:d}),Object(u.jsx)("p",{style:{textAlign:"center"},children:"Resolved by a left-rotation at node y,"}),Object(u.jsx)("p",{style:{textAlign:"center"},children:"followed by a right-rotation at node z."})]}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Worst-Case"}),Object(u.jsx)("th",{children:"Average-Case"}),Object(u.jsx)("th",{children:"BST Worst-Case"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert"}),Object(u.jsx)("td",{children:"O(log n)"}),Object(u.jsx)("td",{children:"O(log n)"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove"}),Object(u.jsx)("td",{children:"O(log n)"}),Object(u.jsx)("td",{children:"O(log n)"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Find"}),Object(u.jsx)("td",{children:"O(log n)"}),Object(u.jsx)("td",{children:"O(log n)"}),Object(u.jsx)("td",{children:"O(n)"})]})]})})]})},Ge=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A Binary Heap is special type of Binary Tree with a few special properties. The first property is that it is a complete tree. This means that every level in the tree is completely filled with nodes except the last level, where all of the nodes are as far left as possible. The second property is that any given node in the tree has a smaller or greater value than all of the nodes in its child sub-trees. In a Min Heap, the value will always be smaller than all of its children. In a Max Heap the value will always be larger than all of its children. Here we will be using a Min Heap."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A Binary Heap has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," inserts an element into the heap"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," removes the element at the root of the heap"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In order to maintain the special properties of the heap, insertion and removal of elements must be done in a careful manner. For inserting a value, a new node is created at the left-most position in the lowest layer of the tree that is not yet filled. Then this new node is repeatedly compared with its parent. If its value is less than its parent, it must swap positions with its parent in order to maintain the second property of a heap. It repeats this process until the parent is less than the new node, or the new node becomes the root."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In a heap removal is only done from the root of the tree. Since all of the nodes in the left and right sub-trees of the root are greater than the root, the root will be the minimum value in the heap. When we remove the root, we replace it with the left-most bottom node in the tree to maintain the first property of a heap. Then we must repeatedly compare the new root with its children elements. If the new node is less than the two children nodes, then the second property of a heap is maintained, and we are done. If it is not less than the two children, it is swapped with the smaller of the two children, and the process repeats. It must swap with the smaller of the two children because that child will become the parent of the other child. Once the new node is smaller than both of its children, or it reaches the bottom of the tree, the removal process is finished."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Because a Binary Heap is a complete tree, it can be stored in the form of an array with each level stored consecutively from left to right. The root is stored at index 0, and any node at index i  has its two children at index 2*i+1 and index 2*i+2. The parent of any node at index i is the floor of (i-1)/2. The advantage of storing the tree in an array form is that we do not need extra memory to store pointers, and we do not have to deal with changing pointers when nodes are swapped."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The complexities of the operations in a Binary Heap are dependent on the height of the tree, h. Because it is a complete tree, the height will always be O(log n). For insertion, the worst-case scenario is that the new node has to move all the way up to the root of the tree. For removal, the worst-case is that the node swapped with the previous root has to move all the way back to the bottom of the tree. Both of these things will take O(h) comparisons, so both insertion and removal have a complexity of O(log n)."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert"}),Object(u.jsx)("td",{children:"O(log n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove"}),Object(u.jsx)("td",{children:"O(log n)"})]})]})})]})},Ve=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A Hash Table is a data structure that places values in an array at an index based on a hash code computed from the key using a hash function. In this visualization, the key and the value are the same integer value. An array is defined for the Hash Table with a fixed size. Once the array reaches a certain capacity of elements, a new larger array is created and all of the previous elements are inserted back into the new array. The maximum capacity of the array before it must be resized is called the load factor, and is typically a fixed percentage."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A Hash Table has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Build:"})," initializes a hash table with a given size and load factor"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," inserts a value into the hash table with a certain key"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," removes the value for a given key from the hash table"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Find:"})," checks if a given key is in the hash table and returns its value"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In an ideal situation, the hash function will provide a unique index for every key provided to it. However, it is possible to have two different keys that produce the same hash code. This is called a collision and can be handled in many different ways. One way to handle it is linear probing. This means that if a value is already located at the computed index when inserting a key and value, we perform a linear scan of the array to find the next open position, and insert the key and value there."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"A key and value can be removed from the hash table similar to insertion. First the hash code is computed, then that index is checked for the given key and value. If it is not a linear scan is performed to find the target. If an empty slot is found in the linear scan, it means that key is not in the hash table and the scan ends. If the key and value are found, they are removed. Finding the value for a key can be done in exactly the same way, except the value is returned instead of deleting the key value pair."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Because the ideal position of elements can be computed in constant time for a Hash Table, most of its operations have an average-case complexity of O(1). However because of collisions and the potential need to resize the array of a hash table, the worst-case complexity of most operations is O(n)."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Worst-Case"}),Object(u.jsx)("th",{children:"Average-Case"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Build"}),Object(u.jsx)("td",{children:"O(1)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Find"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Pe=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A set is an Abstract Data Type (ADT) representing an unordered collection of data with no repeat elements. The data is stored in no particular order, and there can only be one of any given value in the set. Elements are either in or not in the set. There is no concept of order or quantities in a set. Thus sets are most useful for problems in which membership in the set is the most important property."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A Set has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," attempts to add an element to the set"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," attempts to remove an element from the set"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Find:"})," checks if an element is in the set"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The Set ADT is typically implemented using a Hash Table. With the hash table implementation, the key used for any value in the set is the same as its value. Because a Hash Table has constant time complexities for insertion, removal, and finding operations, a set has the same complexities for these operations."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Worst-Case"}),Object(u.jsx)("th",{children:"Average-Case"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Find"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Qe=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"A Map is an Abstract Data Type (ADT) representing a collection of key and value pairs. Any value in the Map can be accessed using its corresponding key. Keys in a map must be unique, meaning each key can only have one corresponding value. The key value pairs in a map are stored in no particular order, they are simply a collection of data."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:Object(u.jsx)("u",{children:"A Map has the following basic operations:"})}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Insert:"})," adds a new key and value pair to the map or sets a new value for a key"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Remove:"})," attempts to remove a key and value pair from the map"]}),Object(u.jsxs)("li",{children:[Object(u.jsx)("b",{children:"Get:"})," attempts to return the value in the map for a given key"]})]}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The Map ADT is typically implemented using a Hash Table. A Hash Table is a natural choice to implement a Map because it already has key and value pairs. Because a Hash Table has constant time complexities for insertion, removal, and get operations, a map has the same complexities for these operations."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Operation"}),Object(u.jsx)("th",{children:"Worst-Case"}),Object(u.jsx)("th",{children:"Average-Case"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Insert"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Remove"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Get"}),Object(u.jsx)("td",{children:"O(n)"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Ue=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Insertion sort is an algorithm used to sort an array by partitioning an array into two subarrays: sorted and unsorted. It then builds the sorted subarray one element at a time until the unsorted subarray is depleted."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The algorithm repeatedly designates a value from the unsorted subarray as the current value to be inserted. It then iterates through the sorted array, comparing each element to the one to be inserted. Once the sorted position of the element to be inserted is determined, it is moved from the unsorted subarray into its proper sorted position in the sorted subarray. This process of designating the element to be inserted, finding its sorted position, and inserting it repeats until the unsorted subarray has been completely depleted and the whole starting list has been sorted."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Although the algorithm does become signicantly less efficient when used on large data sets, it is quite effiecient for sorting lists that are already mostly sorted. This, in conjunction with the ease of implementation, makes it an ideal sorting algorithm for many situtions. For example, a large sorted list which is constantly being added to."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Insertion Sort"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsxs)("td",{children:["O(n",Object(u.jsx)("sup",{children:"2"}),")"]})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Ke=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Selection sort is an algorithm to sort an array that repeatedly finds the minimum value of the unsorted elements. Two subarrays are kept. At the beginning of the array is a subarray of elements that have been already been selected as the minimum and are placed in their correct position in the sorted array. The rest of the array is the remaining unsorted elements."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The algorithm repeatedly finds the minimum value of the unsorted subarray, and swaps it with the first element of the unsorted portion. That element is then considered sorted, so the sorted subarray grows in size, and the unsorted subarray decreases in size. This is repeated until the sorted portion of the array becomes as large as the entire array."}),Object(u.jsx)("br",{}),Object(u.jsxs)("p",{children:["To find the minimum element of the unsorted subarray, a linear scan is used where the smallest element is kept track of. Then the minimum can be swapped with the beginning in costant time. The linear scan portion takes n comparisons the first time, n-1 comparisons the second time, and so on until there is 1 comparison on the last scan. Because of this the overall time complexity is O(n",Object(u.jsx)("sup",{children:"2"}),"). Since all of the swaps are done in place for selection sort, the space complexity is constant."]}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Selection Sort"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsxs)("td",{children:["O(n",Object(u.jsx)("sup",{children:"2"}),")"]})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Je=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Bubble sort is an algorithm used to sort an array by repeatedly iterating through each adjacent pair of elements in a list, comparing each element to its adjacent partner, and then either swapping or not swapping the elements such that they end up in the correct order. Upon reaching the end of the list, the algorithm repeats this process, starting over at the first element of the array. This process is repeated until each adjacent pair is observed to be in the correct order and no swaps take place for an entire pass."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The visualization below shows an optimized version of Bubble sort. This version involves recognizing that after n passes over the array, the nth element in the array is in the sorted position. Thus, the algorithm need not pass over the final n-1 elements after n passes. This reduces the total number of necessary comparisons, however makes no change to the number of swaps (since swaps only occur on elements which are in the incorrect position)."}),Object(u.jsx)("br",{}),Object(u.jsxs)("p",{children:["In both versions of Bubble sort, the maximum number of passes needed to sort an an array with n elements will be O(n). Since each pass will also take on average O(n) time, the overall time complexity of Bubble sort is O(n",Object(u.jsx)("sup",{children:"2"}),"). No extra space is needed for Bubble sort."]}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Bubble Sort"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsxs)("td",{children:["O(n",Object(u.jsx)("sup",{children:"2"}),")"]})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},Ze=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Merge Sort is a divide and conquer algorithm for sorting an array. First the array is split up into several sub-arrays of size 1. Then every pair of arrays is merged in such a way that the new merged array contains the elements of the two previous arrays in sorted order. This is repeated until all arrays have been merged into one final sorted array."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Another way to think of Merge Sort is as a recursive algorithm. First the array is split into two parts, then both parts are recursively sorted, and finally the two parts are merged back together in a sorted order. The base case of this recursion would be a sub-array of size 1, which is already sorted."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The way that two sorted sub-arrays can be merged into one sorted array is fairly simple. We just repeatedly take the larger of the two elements at the ends of both arrays, and add that to our new merged array. This continues until one sub-array is empty, and then we just concatenate the remaining values at the beginning of our new array. This works because the maximum value of the two values at the ends of the sub-arrays is guaranteed to be the largest value remaining in all of the two sub-arrays."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"To understand the complexity of Merge Sort, consider the complexity of a single level of the algorithm, and how many levels there will be. A single level of Merge Sort consists of merging k pairs of sub-arrays with a total size n/k. Merging a pair of sub-arrays with a total size of n/k takes linear time with a worst case of n/k-1 comparisons. Doing this k times gives a single level of Merge Sort a complexity of k*O(n/k) which is just O(n). The number of levels of Merge Sort is equal to the number of times we can split our sub-arrays into two parts. This will be O(log n). So with O(log n) levels and O(n) time on each level, the overall time complexity of Merge Sort is O(n log n). The space required for Merge Sort is just memory for the new arrays that are being merged into which will be O(n) in total."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Merge Sort"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsx)("td",{children:"O(n log n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(n)"})]})]})})]})},Ye=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Quick sort is a divide-and-conquer algorithm to sort an array. It involves first selecting a pivot and then swapping elements and moving the pivot such that all elements to the left of the pivot are less than the pivot and all elements to the right of the pivot are greater. The greater and less than values are then partitioned into two subarrays and the process is repeated recursiveley."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"The choice of the pivot is open to some variation. In this visualization we chose to use the last element in each partition as the pivot. Thus, a single partition is processed by first designating the last element in the partition as the pivot. Next, a low pointer is placed on the lower bound index of the partition and a high pointer is placed on the higher bound index of the parition. The low pointer then moves rightward until and element is found that is greater than the pivot element. The high pointer follows suit by moving leftward until it finds an element that is less than the pivot element. When both the low and high pointers find their target they perform a swap. The pointers then both move again, repeating the process, until they cross. Crossed pointers indicate the sorted location of the pivot element. Thus, the pivot is moved to that location and the array is partitioned into a lower and upper subarray. The entire procedure is then repeated recursively until all elements are sorted."}),Object(u.jsx)("br",{}),Object(u.jsxs)("p",{children:["Quick sort has a worst-case time complexity of O(n",Object(u.jsx)("sup",{children:"2"}),"). This occurs when partitions are repeatedly the most unbalanced they can be, meaning that after every partitioning process one of the new paritions is of size n-1 elements. In our visualization this would occur when the array is already sorted prior to the use of our algorithm. In the best-case, all partitions created of nearly equal sizes, and the time-complexity is O(n log n). The average case is also O(n log n)."]}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Quick Sort"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Average-case Time Complexity"}),Object(u.jsx)("td",{children:"O(n log n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Worst-case Time Complexity"}),Object(u.jsxs)("td",{children:["O(n",Object(u.jsx)("sup",{children:"2"}),")"]})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(n)"})]})]})})]})},Xe=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Heap Sort is an algorithm to sort an array which adds all of the elements to a Binary Heap, and then repeatedly removes elements from the heap until it is empty. The elements are removed from the heap in a sorted order, and are added to a new sorted array in the order that they are removed."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In order to sort the elements in our array from least to greatest, the heap we use must be a Min Heap. This way the element at the root of the tree is guaranteed to be the smallest value in the heap. We repeatedly remove from the root to get the smallest remaining value in the tree. Once the heap is empty, all of the original elements have been removed in a sorted order."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Insertion and removal into a Binary Heap both have a time complexity of O(log n). Because every element in the array must be both inserted and removed from the heap, the overall time complexity of Heap Sort is n*O(log n) + n*O(log n), which is O(n log n). The space required to store all of the values in a Binary Heap will be linear with regards to the number of elements in the original array. However, it is possible to convert the original array into a Binary Heap in place, and vice versa. Thus, the space complexity of Heap Sort can be constant."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Heap Sort"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsx)("td",{children:"O(n log n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},$e=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Linear Search is an algorithm to search for a value in an array or any other linear data structure. It takes the straightforward approach of starting at the beginning of the array, and searching every element one by one from the beginning to the end. If it finds the target value or reaches the end of the array, the search is over."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In the worst-case, Linear Search must compare the target value with every value in the array. Thus, an array with n elements will have a time complexity of O(n) for Linear Search. The space complexity of linear search is constant because no extra space is required."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Linear Search"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},_e=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Binary Search is an algorithm to search for a value in an array or any other linear data structure. Binary Search is only possible if the array is already in a sorted order. The search starts at the midpoint of the array, and compares it with the target value. If it is less than the target value, the search continues only in the right half of the array. If it is greater than the target value, the search continues only in the left half of the array. If it is equal, the search ends and we have found our target value. The number of elements we are searching is cut in half with every comparison this way. Once we are down to a single element and it is not equal to our target then our search is over."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Binary Search relies on the fact that the array is already sorted beforehand. Because of this it is able to eliminate half of the entries remaining with every comparison, because all values after a certain value are greater than or equal to that value, and all values before a certain value are less than or equal to that value."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"Because the number of elements we are looking at gets cut in half with every comparison, the total number of comparisons needed to complete Binary Search in an array of length n will be maximum log n. Thus the time complexity of Binary Search is O(log n). The only extra memory we need for Binary Search is two pointers representing the start and end of the section of the array we are still considering. Therefore the space complexity of Binary Search is constant."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Binary Search"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsx)("td",{children:"O(log n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},et=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Depth First Search (DFS) is an algorithm to search for a value in a tree data structure. Every node is traversed in a certain order until either the value is found, or every node in the tree has been visited meaning the value is not in the tree."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In a Depth First Search, we start searching at the root of the tree. The root of the tree becomes our current node. We first check if the current node contains our target value. Then we recursively check all of the children sub-trees of the current node. For a binary tree, this means we recursively check the entire left sub-tree of the current node and the entire right sub-tree. In this way we first check all the way down the left-most path down the tree, and then backtrack when there are no more nodes left on that branch, and continue until every node has been visited."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"For any tree with n nodes, the DFS algorithm will have a time complexity of O(n). This is because in the worst-case it will visit every node in the tree once, and compare its value with the target value. The space complexity of DFS is constant because it requires no extra space."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Depth First Search"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(1)"})]})]})})]})},tt=function(){return Object(u.jsxs)("div",{className:"information",children:[Object(u.jsx)("p",{children:"Breadth First Search (BFS) is an algorithm to search for a value in a tree data structure. Every node is traversed in a certain order until either the value is found, or every node in the tree has been visited meaning the value is not in the tree."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"In a Breadth First Search, we start searching at the root of the tree. We then traverse down the tree level by level, checking every node in each level from left to right. The way that this is typically implemented is using a queue. First we start by adding the root to our queue. Then we dequeue the root from the queue, check if it was our target value, and then enqueue all of its children into the queue. We repeat this with every element that we dequeue from the queue until we find our target value, or the queue is empty. If the queue is empty and we have not found our target value then it means that value is not in the tree."}),Object(u.jsx)("br",{}),Object(u.jsx)("p",{children:"For any tree with n nodes, the BFS algorithm will have a time complexity of O(n). This is because in the worst-case it will visit every node in the tree once, and compare its value with the target value. The space complexity of BFS is O(n), because in the worst case all of the nodes of the tree besides the root will be on a single level, and they must all be stored in the queue."}),Object(u.jsx)("br",{}),Object(u.jsx)("table",{children:Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsx)("th",{children:"Depth First Search"}),Object(u.jsx)("th",{children:"Complexity"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Time Complexity"}),Object(u.jsx)("td",{children:"O(n)"})]}),Object(u.jsxs)("tr",{children:[Object(u.jsx)("td",{children:"Space Complexity"}),Object(u.jsx)("td",{children:"O(n)"})]})]})})]})},rt=function(){var e=Object(n.useState)(),t=Object(i.a)(e,2),r=t[0],c=t[1];return Object(n.useEffect)((function(){fetch("/api").then((function(e){return e.json()})).then((function(e){return c(e.visualization)}))}),[]),Object(u.jsxs)(a.a,{children:[Object(u.jsx)("header",{children:"DAILY DOSE OF DATA"}),Object(u.jsxs)("div",{className:"main",children:[Object(u.jsx)(h,{}),Object(u.jsx)("div",{className:"content",children:Object(u.jsxs)(l.c,{children:[Object(u.jsxs)(l.a,{exact:!0,path:"/",children:[Object(u.jsx)("header",{className:"page-title",children:"Home"}),Object(u.jsx)("div",{className:"information",children:Object(u.jsx)("p",{children:"Welcome to Daily Dose of Data! This is a website to provide visualizations of various data structures and algorithms, as well as information on them for educational purposes! Every day a random data structure or algorithm is featured on the home page so you can learn something new every day! This website is still a work in progress so any feedback is appreciated. Please view to about us page to learn more."})}),Object(u.jsxs)("header",{className:"page-title",style:{fontSize:"16px",height:"30px",lineHeight:"30px"},children:["Visualization of the Day: ",r]}),Object(u.jsx)(Be,{visualization:r})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Array",children:[Object(u.jsx)("header",{className:"page-title",children:"Array"}),Object(u.jsx)(O,{}),Object(u.jsx)(Ae,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/List",children:[Object(u.jsx)("header",{className:"page-title",children:"List"}),Object(u.jsx)(f,{}),Object(u.jsx)(Ce,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Array List",children:[Object(u.jsx)("header",{className:"page-title",children:"Array List"}),Object(u.jsx)(m,{}),Object(u.jsx)(ze,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Linked List",children:[Object(u.jsx)("header",{className:"page-title",children:"Linked List"}),Object(u.jsx)(k,{}),Object(u.jsx)(Le,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Stack",children:[Object(u.jsx)("header",{className:"page-title",children:"Stack"}),Object(u.jsx)(S,{}),Object(u.jsx)(Me,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Queue",children:[Object(u.jsx)("header",{className:"page-title",children:"Queue"}),Object(u.jsx)(A,{}),Object(u.jsx)(Fe,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Binary Tree",children:[Object(u.jsx)("header",{className:"page-title",children:"Binary Tree"}),Object(u.jsx)(E,{}),Object(u.jsx)(Ee,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Binary Search Tree",children:[Object(u.jsx)("header",{className:"page-title",children:"Binary Search Tree"}),Object(u.jsx)(D,{}),Object(u.jsx)(qe,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Avl Tree",children:[Object(u.jsx)("header",{className:"page-title",children:"AVL Tree"}),Object(u.jsx)(X,{}),Object(u.jsx)(We,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Binary Heap",children:[Object(u.jsx)("header",{className:"page-title",children:"Binary Heap"}),Object(u.jsx)(_,{}),Object(u.jsx)(Ge,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Hash Table",children:[Object(u.jsx)("header",{className:"page-title",children:"Hash Table"}),Object(u.jsx)(re,{}),Object(u.jsx)(Ve,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Set",children:[Object(u.jsx)("header",{className:"page-title",children:"Set"}),Object(u.jsx)(se,{}),Object(u.jsx)(Pe,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Map",children:[Object(u.jsx)("header",{className:"page-title",children:"Map"}),Object(u.jsx)(ae,{}),Object(u.jsx)(Qe,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Insertion Sort",children:[Object(u.jsx)("header",{className:"page-title",children:"Insertion Sort"}),Object(u.jsx)(ue,{}),Object(u.jsx)(Ue,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Selection Sort",children:[Object(u.jsx)("header",{className:"page-title",children:"Selection Sort"}),Object(u.jsx)(je,{}),Object(u.jsx)(Ke,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Bubble Sort",children:[Object(u.jsx)("header",{className:"page-title",children:"Bubble Sort"}),Object(u.jsx)(de,{}),Object(u.jsx)(Je,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Merge Sort",children:[Object(u.jsx)("header",{className:"page-title",children:"Merge Sort"}),Object(u.jsx)(pe,{}),Object(u.jsx)(Ze,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Quick Sort",children:[Object(u.jsx)("header",{className:"page-title",children:"Quick Sort"}),Object(u.jsx)(ve,{}),Object(u.jsx)(Ye,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Heap Sort",children:[Object(u.jsx)("header",{className:"page-title",children:"Heap Sort"}),Object(u.jsx)(we,{}),Object(u.jsx)(Xe,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Linear Search",children:[Object(u.jsx)("header",{className:"page-title",children:"Linear Search"}),Object(u.jsx)(ke,{}),Object(u.jsx)($e,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Binary Search",children:[Object(u.jsx)("header",{className:"page-title",children:"Binary Search"}),Object(u.jsx)(Se,{}),Object(u.jsx)(_e,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Depth First Search",children:[Object(u.jsx)("header",{className:"page-title",children:"Depth First Search"}),Object(u.jsx)(Re,{}),Object(u.jsx)(et,{})]}),Object(u.jsxs)(l.a,{exact:!0,path:"/Breadth First Search",children:[Object(u.jsx)("header",{className:"page-title",children:"Breadth First Search"}),Object(u.jsx)(Te,{}),Object(u.jsx)(tt,{})]}),Object(u.jsx)(l.a,{exact:!0,path:"/about",children:Object(u.jsxs)("div",{id:"about-us",className:"information",children:[Object(u.jsx)("h1",{children:"About Us"}),Object(u.jsx)("p",{children:"Thank you for visiting our website! We are two undergraduate college students studying in areas related to Computer Science. We decided to work together over an entire summer to bring to life this idea of a website to provide visualizations of various data structures and algorithms for educational purposes. We had little to no experience with web development before this, and we fully self-studied JavaScript, HTML, CSS, React.js, and Node.js, all of which were used to develop this website. This website is still a work in progress, and we plan to continue adding new content and features. Any feedback you would like to give us is appreciated, so feel free to contact us with the information below!"}),Object(u.jsx)("hr",{}),Object(u.jsxs)("div",{className:"personal-information",children:[Object(u.jsx)("img",{src:"quintenpicture.jpg",alt:""}),Object(u.jsx)("img",{src:"stonybrooklogo.jpg",alt:""}),Object(u.jsxs)("div",{id:"quinten-information",children:[Object(u.jsxs)("div",{className:"information-header",children:[Object(u.jsxs)("div",{className:"personal-information-section",children:[Object(u.jsx)("p",{children:Object(u.jsx)("b",{children:"Quinten De Man"})}),Object(u.jsx)("p",{children:"Stony Brook University"}),Object(u.jsx)("p",{children:"Computer Science Honors"}),Object(u.jsx)("p",{children:"Applied Mathematics and Statistics"})]}),Object(u.jsxs)("div",{className:"personal-information-section",children:[Object(u.jsxs)("p",{children:[Object(u.jsx)("b",{children:"Email:"})," quinten.deman@gmail.com"]}),Object(u.jsxs)("p",{children:[Object(u.jsx)("b",{children:"LinkedIn:"})," ",Object(u.jsx)("a",{href:"https://www.linkedin.com/in/quinten-de-man/",children:"https://www.linkedin.com/in/quinten-de-man/"})]}),Object(u.jsxs)("p",{children:[Object(u.jsx)("b",{children:"GitHub:"})," ",Object(u.jsx)("a",{href:"https://github.com/quintendeman",children:"https://github.com/quintendeman"})]})]})]}),Object(u.jsxs)("div",{className:"biography",children:[Object(u.jsx)("p",{children:Object(u.jsx)("b",{children:"Biography"})}),Object(u.jsx)("p",{children:"Quinten is a rising junior at Stony Brook University with a double major in Computer Science and Applied Mathematics and Statistics. He has interests in Data Structures, Algorithms, Web Development, Machine Learning, and Artificial Intelligence. He has lots of experience with these topics from previous research experiences, work experiences, personal projects, and academic coursework. For more information visit his LinkedIn or GitHub pages."})]})]})]}),Object(u.jsx)("hr",{}),Object(u.jsxs)("div",{className:"personal-information",children:[Object(u.jsx)("img",{src:"zackpicture.jpg",alt:""}),Object(u.jsx)("img",{src:"northeasternlogo.png",alt:""}),Object(u.jsxs)("div",{id:"zack-information",children:[Object(u.jsxs)("div",{className:"information-header",children:[Object(u.jsxs)("div",{className:"personal-information-section",children:[Object(u.jsx)("p",{children:Object(u.jsx)("b",{children:"Zackary Lassetter"})}),Object(u.jsx)("p",{children:"Northeastern University"}),Object(u.jsx)("p",{children:"Northeastern National Merit Scholar"}),Object(u.jsx)("p",{children:"Data Science and Economics"})]}),Object(u.jsxs)("div",{className:"personal-information-section",children:[Object(u.jsxs)("p",{children:[Object(u.jsx)("b",{children:"Email:"})," zackary@lassetter.org"]}),Object(u.jsxs)("p",{children:[Object(u.jsx)("b",{children:"LinkedIn:"})," ",Object(u.jsx)("a",{href:"https://www.linkedin.com/in/zackary-lassetter/",children:"https://www.linkedin.com/in/zackary-lassetter/"})]}),Object(u.jsxs)("p",{children:[Object(u.jsx)("b",{children:"GitHub:"})," ",Object(u.jsx)("a",{href:"https://github.com/zlassetter",children:"https://github.com/zlassetter"})]})]})]}),Object(u.jsxs)("div",{className:"biography",children:[Object(u.jsx)("p",{children:Object(u.jsx)("b",{children:"Biography"})}),Object(u.jsx)("p",{children:"Zackary is a rising sophmore at Northeastern University and is currently pursing a combined major in Data Science and Economics. He is interested many topics across the field of computer science including Data Structures and Algorithms, but is also interested in the applications of these tools in the fields of Quantitative Finance, Econometrics, and Data Analytics. Please visit his LinkedIn and GitHub for more information."})]})]})]})]})})]})})]}),Object(u.jsx)("footer",{children:"Made by Quinten De Man and Zackary Lassetter"})]})};s.a.render(Object(u.jsx)(rt,{}),document.getElementById("root"))}]),[[61,1,2]]]);
//# sourceMappingURL=main.6b7d79d9.chunk.js.map