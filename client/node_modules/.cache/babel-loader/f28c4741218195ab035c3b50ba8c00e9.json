{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\DepthFirstSearch\\\\DepthFirstSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './DepthFirstSearch.scss';\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DepthFirstSearch = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new BinaryTreeClass(null));\n  const toggleSearchingButton = useRef();\n  const speedSlider = useRef();\n  const searching = useRef();\n  const interval = useRef();\n  const current = useRef();\n  const green = useRef();\n  const pink = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate random tree\n\n\n  const randomTree = () => {\n    var newNodeChance = 0.9;\n    const levels = randInt(1, 5);\n    var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999, 1000)));\n    var nodes = [newTree.root];\n    var newNodes = [];\n\n    for (let level = 0; level < levels; level++) {\n      for (let i = 0; i < nodes.length; i++) {\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].left = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].left);\n        }\n\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].right = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].right);\n        }\n      }\n\n      nodes = newNodes;\n      newNodes = [];\n    }\n\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize tree to a random tree\n\n\n  useEffect(randomTree, []); //function to 1 step of searching animation\n\n  const searchingStep = () => {}; //function to turn searching on and off by button click\n\n\n  const toggleSearching = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      searching.current = false;\n      toggleSearchingButton.current.innerHTML = \"Sort\";\n      toggleSearchingButton.current.classList.remove(\"pinkButton\");\n      toggleSearchingButton.current.classList.add(\"greenButton\");\n    } else {\n      current.current = tree.root;\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      searching.current = true;\n      toggleSearchingButton.current.innerHTML = \"Stop\";\n      toggleSearchingButton.current.classList.remove(\"greenButton\");\n      toggleSearchingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //changes the animation speed of searching when the slider changes\n\n\n  const updateSpeed = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"depth-first-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomTree,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"toggleSearchingButton\",\n        className: \"greenButton\",\n        ref: toggleSearchingButton,\n        onClick: toggleSearching,\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree,\n        border: current.current,\n        green: green.current,\n        pink: pink.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DepthFirstSearch, \"Kc+Rw0AXn3KtXFpfD/wLUAQgn7k=\");\n\n_c = DepthFirstSearch;\nexport default DepthFirstSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DepthFirstSearch\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/DepthFirstSearch/DepthFirstSearch.js"],"names":["React","useState","useRef","useEffect","BinaryTreeNode","BinaryTreeClass","BinaryTreeDisplay","DepthFirstSearch","forceRender","tree","setTree","toggleSearchingButton","speedSlider","searching","interval","current","green","pink","forceUpdate","renders","randomTree","newNodeChance","levels","randInt","newTree","nodes","root","newNodes","level","i","length","Math","random","pow","left","push","right","min","max","floor","searchingStep","toggleSearching","clearInterval","innerHTML","classList","remove","add","setInterval","value","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './DepthFirstSearch.scss';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\r\n\r\nconst DepthFirstSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinaryTreeClass(null));\r\n    const toggleSearchingButton = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const interval = useRef();\r\n    const current = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleSearching = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n            toggleSearchingButton.current.innerHTML = \"Sort\";\r\n            toggleSearchingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSearchingButton.current.classList.add(\"greenButton\");\r\n        } else {\r\n            current.current = tree.root;\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            toggleSearchingButton.current.innerHTML = \"Stop\";\r\n            toggleSearchingButton.current.classList.remove(\"greenButton\");\r\n            toggleSearchingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"depth-first-search\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                <br />\r\n                <button id=\"toggleSearchingButton\" className=\"greenButton\" ref={toggleSearchingButton} onClick={toggleSearching}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} border={current.current} green={green.current} pink={pink.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DepthFirstSearch;"]},"metadata":{},"sourceType":"module"}