{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\HeapSort\\\\HeapSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './HeapSort.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\nimport { BinaryHeapClass } from '../BinaryHeap/BinaryHeap.js'; //main react component for heap sort animation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HeapSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [heap, setHeap] = useState(new BinaryHeapClass());\n  const [array, setArray] = useState([]);\n  const [sorted, setSorted] = useState(false);\n  const arraySizeInput = useRef();\n  const toggleSortingButton = useRef();\n  const speedSlider = useRef();\n  const sorting = useRef(false);\n  const interval = useRef(null); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets state array to a random array for sorting\n\n\n  const generateArray = () => {\n    if (sorting.current) {\n      toggleSorting();\n    }\n\n    var size = parseInt(arraySizeInput.current.value);\n    if (isNaN(size)) size = randInt(5, 50);\n\n    if (size > 0) {\n      setArray(randomArray(size));\n      setSorted(false);\n    }\n\n    arraySizeInput.current.value = null;\n  }; //generates a random array within reasonable bounds\n\n\n  const randomArray = useCallback(size => {\n    var newArray = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      newArray[i] = randInt(-999, 1000);\n    }\n\n    return newArray;\n  }, []);\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the array randomly at start\n\n\n  useEffect(() => {\n    setArray(randomArray(randInt(5, 50)));\n  }, [randomArray]); //function to do a single step of sorting animation\n\n  const sortingStep = () => {}; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n      toggleSortingButton.current.classList.remove(\"greenButton\");\n      toggleSortingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //changes the animation speed of sorting when the slider changes\n\n\n  const updateSpeed = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"heap-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: generateArray,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Array Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"arraySizeInput\",\n          ref: arraySizeInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"toggleSortingButton\",\n        className: \"greenButton\",\n        ref: toggleSortingButton,\n        onClick: toggleSorting,\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HeapSort, \"G+d2WEd14MJh0BtQVE5gFR17uoY=\");\n\n_c = HeapSort;\nexport default HeapSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"HeapSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/HeapSort/HeapSort.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","BinaryTreeNode","BinaryTreeClass","BinaryHeapClass","HeapSort","forceRender","heap","setHeap","array","setArray","sorted","setSorted","arraySizeInput","toggleSortingButton","speedSlider","sorting","interval","forceUpdate","renders","generateArray","current","toggleSorting","size","parseInt","value","isNaN","randInt","randomArray","newArray","Array","i","min","max","Math","floor","random","sortingStep","clearInterval","innerHTML","classList","remove","add","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './HeapSort.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\nimport { BinaryHeapClass } from '../BinaryHeap/BinaryHeap.js';\r\n\r\n//main react component for heap sort animation\r\nconst HeapSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const [array, setArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const arraySizeInput = useRef();\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //function to do a single step of sorting animation\r\n    const sortingStep = () => {\r\n\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"heap-sort\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Array Size</label>\r\n                    <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default HeapSort;"]},"metadata":{},"sourceType":"module"}