{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\MergeSort\\\\MergeSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './MergeSort.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exampleArrays = [[-4, 0, 3, 7], [-8, 1, 2, 11], [-5, 3, 8, 9], [-9, -4, -3, 2], [1, 3, 6]];\nconst exampleNextArrays = [[1], [2], [3]]; //react component to display merge sort arrays\n\nconst MergeSortDisplay = props => {\n  var componentList = [];\n\n  for (let i = 0; i < props.nextArrays.length; i++) {\n    var array1 = props.arrays[2 * i];\n    var array2 = [];\n    if (2 * i + 1 < props.arrays.length) array2 = props.arrays[2 * i + 1];\n    componentList.push( /*#__PURE__*/_jsxDEV(MergeSortDisplayRow, {\n      array1: array1,\n      array2: array2,\n      nextArray: props.nextArrays[i]\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 28\n    }, this));\n    componentList.push( /*#__PURE__*/_jsxDEV(\"hr\", {}, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 28\n    }, this));\n  }\n\n  componentList.pop();\n  return componentList;\n}; //react component to display a merge sort row consisting of 2 arrays, and the array it is merging into\n\n\n_c = MergeSortDisplay;\n\nconst MergeSortDisplayRow = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"merge-sort-display-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MergeSortDisplayRowHelper1, {\n        array1: props.array1,\n        array2: props.array2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MergeSortDisplayRowHelper2, {\n        array: props.nextArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = MergeSortDisplayRow;\n\nconst MergeSortDisplayRowHelper1 = props => {\n  var componentList = [];\n\n  for (let i = 0; i < props.array1.length; i++) {\n    if (i === props.array1.length - 1) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array1[i],\n      border: \"bordered\"\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 32\n    }, this));else componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array1[i]\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 32\n    }, this));\n  }\n\n  if (props.array1.length === 0) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    color: \"none\"\n  }, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 28\n  }, this));\n  componentList.push( /*#__PURE__*/_jsxDEV(\"br\", {}, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 24\n  }, this));\n\n  for (let i = 0; i < props.array2.length; i++) {\n    if (i === props.array2.length - 1) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array2[i],\n      border: \"bordered\"\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 32\n    }, this));else componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array2[i]\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 32\n    }, this));\n  }\n\n  if (props.array2.length === 0) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    color: \"none\"\n  }, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 28\n  }, this));\n  return componentList;\n};\n\n_c3 = MergeSortDisplayRowHelper1;\n\nconst MergeSortDisplayRowHelper2 = props => {\n  var componentList = [];\n  componentList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"arrow\",\n    children: \"\\u2192\"\n  }, 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 24\n  }, this));\n\n  for (let i = 0; i < props.array.length; i++) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    color: \"green\",\n    value: props.array[i]\n  }, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 28\n  }, this));\n\n  return componentList;\n}; //react component for merge sort\n\n\n_c4 = MergeSortDisplayRowHelper2;\n\nconst MergeSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [arrays] = useState(exampleArrays);\n  const [nextArrays] = useState(exampleNextArrays);\n  const [sorted, setSorted] = useState(false);\n  const [merged, setMerged] = useState(false);\n  const sorting = useRef(false);\n  const interval = useRef(null);\n  const toggleSortingButton = useRef();\n  const speedSlider = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to do a single step of merge sorting\n\n\n  const sortingStep = () => {\n    if (!merged) {\n      //find the index of a non-empty array and its next\n      var array1Index = null;\n      var array2Index = null;\n\n      for (let i = 0; i < arrays.length; i++) {}\n    } else {}\n  }; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n      toggleSortingButton.current.classList.remove(\"greenButton\");\n      toggleSortingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //changes the animation speed of sorting when the slider changes\n\n\n  const updateSpeed = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"merge-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        ref: toggleSortingButton,\n        className: \"greenButton\",\n        onClick: toggleSorting,\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(MergeSortDisplay, {\n        arrays: arrays,\n        nextArrays: nextArrays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MergeSort, \"7xO4ifRBgSdXnTIrlOmKeVecnRw=\");\n\n_c5 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MergeSortDisplay\");\n$RefreshReg$(_c2, \"MergeSortDisplayRow\");\n$RefreshReg$(_c3, \"MergeSortDisplayRowHelper1\");\n$RefreshReg$(_c4, \"MergeSortDisplayRowHelper2\");\n$RefreshReg$(_c5, \"MergeSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/MergeSort/MergeSort.js"],"names":["React","useState","useRef","Element","exampleArrays","exampleNextArrays","MergeSortDisplay","props","componentList","i","nextArrays","length","array1","arrays","array2","push","pop","MergeSortDisplayRow","nextArray","MergeSortDisplayRowHelper1","MergeSortDisplayRowHelper2","array","MergeSort","forceRender","sorted","setSorted","merged","setMerged","sorting","interval","toggleSortingButton","speedSlider","forceUpdate","renders","sortingStep","array1Index","array2Index","toggleSorting","current","clearInterval","innerHTML","classList","remove","add","setInterval","value","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './MergeSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst exampleArrays = [[-4,0,3,7],[-8,1,2,11],[-5,3,8,9],[-9,-4,-3,2],[1,3,6]];\r\nconst exampleNextArrays = [[1],[2],[3]];\r\n\r\n//react component to display merge sort arrays\r\nconst MergeSortDisplay = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.nextArrays.length; i++) {\r\n        var array1 = props.arrays[2*i];\r\n        var array2 = [];\r\n        if (2*i+1 < props.arrays.length)\r\n            array2 = props.arrays[2*i+1];\r\n        componentList.push(<MergeSortDisplayRow key={componentList.length} array1={array1} array2={array2} nextArray={props.nextArrays[i]} />);\r\n        componentList.push(<hr key={componentList.length} />);\r\n    }\r\n    componentList.pop();\r\n    return componentList;\r\n}\r\n\r\n//react component to display a merge sort row consisting of 2 arrays, and the array it is merging into\r\nconst MergeSortDisplayRow = (props) => {\r\n    return (\r\n        <div className=\"merge-sort-display-row\">\r\n            <div>\r\n                <MergeSortDisplayRowHelper1 array1={props.array1} array2={props.array2} />\r\n            </div>\r\n            <div>\r\n                <MergeSortDisplayRowHelper2 array={props.nextArray} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst MergeSortDisplayRowHelper1 = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.array1.length; i++) {\r\n        if (i === props.array1.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} />);\r\n    }\r\n    if (props.array1.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    componentList.push(<br key={componentList.length} />);\r\n    for (let i = 0; i < props.array2.length; i++) {\r\n        if (i === props.array2.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} />);\r\n    }\r\n    if (props.array2.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    return componentList;\r\n}\r\nconst MergeSortDisplayRowHelper2 = (props) => {\r\n    var componentList = [];\r\n    componentList.push(<p className=\"arrow\" key={0}>&#x2192;</p>);\r\n    for (let i = 0; i < props.array.length; i++)\r\n        componentList.push(<Element key={componentList.length} color=\"green\" value={props.array[i]} />);\r\n    return componentList;\r\n}\r\n\r\n//react component for merge sort\r\nconst MergeSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [arrays, ] = useState(exampleArrays);\r\n    const [nextArrays, ] = useState(exampleNextArrays);\r\n    const [sorted, setSorted] = useState(false);\r\n    const [merged, setMerged] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to do a single step of merge sorting\r\n    const sortingStep = () => {\r\n        if(!merged) {\r\n            //find the index of a non-empty array and its next\r\n            var array1Index = null;\r\n            var array2Index = null;\r\n            for (let i = 0; i < arrays.length; i++) {\r\n\r\n            }\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"merge-sort\">\r\n            <div className=\"controls\">\r\n                <button ref={toggleSortingButton} className=\"greenButton\" onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <MergeSortDisplay arrays={arrays} nextArrays={nextArrays} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}