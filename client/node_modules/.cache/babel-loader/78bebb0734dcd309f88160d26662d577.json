{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\SelectionSort\\\\SelectionSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './SelectionSort.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectionSortDisplay = props => {\n  return props.array.map((value, index) => {\n    if (index < props.sortedEndIndex) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentMinimum && index === props.currentFocus) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"pink\",\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentMinimum) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"pink\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentFocus) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 20\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  });\n};\n\n_c = SelectionSortDisplay;\n\nconst SelectionSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [array, setArray] = useState([]);\n  const [sorted, setSorted] = useState(false);\n  const sorting = useRef(false);\n  const interval = useRef(null);\n  const sortedEndIndex = useRef(0);\n  const currentFocus = useRef(-1);\n  const currentMinimum = useRef(-1);\n  const toggleSortingButton = useRef();\n  const arraySizeInput = useRef();\n  const speedSlider = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets state array to a random array for sorting\n\n\n  const generateArray = () => {\n    if (sorting.current) {\n      toggleSorting();\n    }\n\n    const size = parseInt(arraySizeInput.current.value);\n\n    if (!isNaN(size) && size > 0) {\n      setArray(randomArray(size));\n      setSorted(false);\n      sortedEndIndex.current = 0;\n      currentFocus.current = -1;\n      currentMinimum.current = -1;\n    }\n\n    arraySizeInput.current.value = null;\n  }; //generates a random array within reasonable bounds\n\n\n  const randomArray = useCallback(size => {\n    var newArray = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      newArray[i] = randInt(-999, 1000);\n    }\n\n    return newArray;\n  }, []);\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the array randomly at start\n\n\n  useEffect(() => {\n    setArray(randomArray(randInt(5, 50)));\n  }, [randomArray]); //completes one step of the sorting algorithm\n\n  const sortingStep = () => {\n    if (sortedEndIndex.current >= array.length) {\n      setSorted(true);\n      toggleSorting();\n      return;\n    }\n\n    if (currentFocus.current === array.length - 1) {\n      var temp = array[sortedEndIndex.current];\n      array[sortedEndIndex.current] = array[currentMinimum.current];\n      array[currentMinimum.current] = temp;\n      sortedEndIndex.current += 1;\n      currentFocus.current = sortedEndIndex.current - 1;\n      currentMinimum.current = -1;\n      return;\n    }\n\n    currentFocus.current += 1;\n\n    if (currentMinimum.current === -1) {\n      currentMinimum.current = currentFocus.current;\n    } else if (array[currentMinimum.current] > array[currentFocus.current]) {\n      currentMinimum.current = currentFocus.current;\n    }\n  }; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n      toggleSortingButton.current.classList.remove(\"greenButton\");\n      toggleSortingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //changes the animation speed of sorting when the slider changes\n\n\n  const updateSpeed = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selection-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: generateArray,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Array Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"arraySizeInput\",\n            ref: arraySizeInput,\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"toggleSortingButton\",\n          className: \"greenButton\",\n          ref: toggleSortingButton,\n          onClick: toggleSorting,\n          children: \"Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: /*#__PURE__*/_jsxDEV(SelectionSortDisplay, {\n          array: array,\n          sortedEndIndex: sortedEndIndex.current,\n          currentFocus: currentFocus.current,\n          currentMinimum: currentMinimum.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Sorted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Unsorted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Minimum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectionSort, \"3omXWlWNZIpfDpvcsrG63kPBISk=\");\n\n_c2 = SelectionSort;\nexport default SelectionSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SelectionSortDisplay\");\n$RefreshReg$(_c2, \"SelectionSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/SelectionSort/SelectionSort.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","SelectionSortDisplay","props","array","map","value","index","sortedEndIndex","currentMinimum","currentFocus","SelectionSort","forceRender","setArray","sorted","setSorted","sorting","interval","toggleSortingButton","arraySizeInput","speedSlider","forceUpdate","renders","generateArray","current","toggleSorting","size","parseInt","isNaN","randomArray","newArray","Array","i","randInt","min","max","Math","floor","random","sortingStep","length","temp","clearInterval","innerHTML","classList","remove","add","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './SelectionSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst SelectionSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index < props.sortedEndIndex)\r\n            return <Element key={index} value={value} color=\"green\" />\r\n        if (index === props.currentMinimum && index === props.currentFocus)\r\n            return <Element key={index} value={value} color=\"pink\" border=\"bordered\" />\r\n        if (index === props.currentMinimum)\r\n            return <Element key={index} value={value} color=\"pink\" />\r\n        if (index === props.currentFocus)\r\n            return <Element key={index} value={value} border=\"bordered\" />\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\nconst SelectionSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const sortedEndIndex = useRef(0);\r\n    const currentFocus = useRef(-1);\r\n    const currentMinimum = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        const size = parseInt(arraySizeInput.current.value);\r\n        if (!isNaN(size) && size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n            sortedEndIndex.current = 0;\r\n            currentFocus.current = -1;\r\n            currentMinimum.current = -1;\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        if (sortedEndIndex.current >= array.length) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n            return;\r\n        }\r\n        if (currentFocus.current === array.length-1) {\r\n            var temp = array[sortedEndIndex.current];\r\n            array[sortedEndIndex.current] = array[currentMinimum.current];\r\n            array[currentMinimum.current] = temp;\r\n            sortedEndIndex.current += 1;\r\n            currentFocus.current = sortedEndIndex.current-1;\r\n            currentMinimum.current = -1;\r\n            return;\r\n        }\r\n        currentFocus.current += 1;\r\n        if (currentMinimum.current === -1) {\r\n            currentMinimum.current = currentFocus.current;\r\n        } else if (array[currentMinimum.current] > array[currentFocus.current]) {\r\n            currentMinimum.current = currentFocus.current;\r\n        }\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"selection-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <SelectionSortDisplay array={array} sortedEndIndex={sortedEndIndex.current} currentFocus={currentFocus.current} currentMinimum={currentMinimum.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Current Minimum</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectionSort;"]},"metadata":{},"sourceType":"module"}