{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\MergeSort\\\\MergeSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './MergeSort.scss';\nimport Element from '../Element/Element'; //react component to display merge sort arrays\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MergeSortDisplay = props => {\n  var componentList = [];\n\n  for (let i = 0; i < props.mergedArrays.length; i++) {\n    var array1 = props.arrays[2 * i];\n    var array2 = [];\n    if (2 * i + 1 < props.arrays.length) array2 = props.arrays[2 * i + 1];\n    componentList.push( /*#__PURE__*/_jsxDEV(MergeSortDisplayRow, {\n      array1: array1,\n      array2: array2,\n      mergedArray: props.mergedArrays[i]\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 28\n    }, this));\n    componentList.push( /*#__PURE__*/_jsxDEV(\"hr\", {}, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 28\n    }, this));\n  }\n\n  componentList.pop();\n  return componentList;\n}; //react component to display a merge sort row consisting of 2 arrays, and the array it is merging into\n\n\n_c = MergeSortDisplay;\n\nconst MergeSortDisplayRow = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"merge-sort-display-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MergeSortDisplayRowHelper1, {\n        array1: props.array1,\n        array2: props.array2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MergeSortDisplayRowHelper2, {\n        array: props.mergedArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = MergeSortDisplayRow;\n\nconst MergeSortDisplayRowHelper1 = props => {\n  var componentList = [];\n\n  for (let i = 0; i < props.array1.length; i++) {\n    if (i === props.array1.length - 1) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array1[i],\n      border: \"bordered\"\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 32\n    }, this));else componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array1[i]\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }, this));\n  }\n\n  if (props.array1.length === 0) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    color: \"none\"\n  }, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 28\n  }, this));\n  componentList.push( /*#__PURE__*/_jsxDEV(\"br\", {}, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 24\n  }, this));\n\n  for (let i = 0; i < props.array2.length; i++) {\n    if (i === props.array2.length - 1) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array2[i],\n      border: \"bordered\"\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 32\n    }, this));else componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.array2[i]\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 32\n    }, this));\n  }\n\n  if (props.array2.length === 0) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    color: \"none\"\n  }, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 28\n  }, this));\n  return componentList;\n};\n\n_c3 = MergeSortDisplayRowHelper1;\n\nconst MergeSortDisplayRowHelper2 = props => {\n  var componentList = [];\n  componentList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"arrow\",\n    children: \"\\u2192\"\n  }, 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 24\n  }, this));\n\n  for (let i = 0; i < props.array.length; i++) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    color: \"green\",\n    value: props.array[i]\n  }, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 28\n  }, this));\n\n  return componentList;\n}; //react component for merge sort\n\n\n_c4 = MergeSortDisplayRowHelper2;\n\nconst MergeSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const arrays = useRef();\n  const mergedArrays = useRef();\n  const [sorted, setSorted] = useState(false);\n  const merged = useRef(false);\n  const sorting = useRef(false);\n  const interval = useRef(null);\n  const arraySizeInput = useRef();\n  const toggleSortingButton = useRef();\n  const speedSlider = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets state array to a random array for sorting\n\n\n  const generateArrays = useCallback(() => {\n    if (sorting.current) {\n      toggleSorting();\n    }\n\n    const size = parseInt(arraySizeInput.current.value);\n\n    if (!isNaN(size) && size > 0) {\n      arrays.current = randomArrays(size);\n      setSorted(false);\n      merged.current = false;\n      initializeMergedArrays();\n    }\n\n    arraySizeInput.current.value = null;\n  }, []); //generates a random array within reasonable bounds\n\n  const randomArrays = useCallback(size => {\n    var newArrays = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      newArrays[i] = [randInt(-999, 1000)];\n    }\n\n    return newArrays;\n  }, []);\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the arrays randomly\n\n\n  useEffect(() => {\n    generateArrays();\n  }, [generateArrays, randomArrays]); //function to initialize list of empty arrays to be merged into\n\n  const initializeMergedArrays = () => {\n    mergedArrays.current = [];\n    const length = Math.ceil(arrays.current.length / 2);\n\n    for (let i = 0; i < length; i++) mergedArrays.current.push([]);\n  }; //function to do a single step of merge sorting\n\n\n  const sortingStep = () => {\n    console.log(arrays);\n    console.log(mergedArrays);\n\n    if (!merged.current) {\n      //find the index of a row that still needs merging\n      var mergeRowIndex = null;\n\n      for (let i = 0; i < arrays.current.length; i++) {\n        if (arrays.current[i].length !== 0) {\n          mergeRowIndex = Math.floor(i / 2);\n          break;\n        }\n      } //if no rows found that still need to merge set merged to true\n\n\n      if (mergeRowIndex === null) {\n        merged.current = true;\n        return;\n      } //perform 1 merge operation for the found row\n\n\n      var array1 = arrays.current[2 * mergeRowIndex];\n      var array2 = [];\n      if (2 * mergeRowIndex + 1 < arrays.current.length) array2 = arrays.current[2 * mergeRowIndex + 1]; //if either array is empty concatenate the other to the merged array\n\n      if (array1.length === 0) {\n        mergedArrays.current[mergeRowIndex] = array2.concat(mergedArrays.current[mergeRowIndex]);\n        arrays.current[2 * mergeRowIndex + 1] = [];\n      } else if (array2.length === 0) {\n        mergedArrays.current[mergeRowIndex] = array1.concat(mergedArrays.current[mergeRowIndex]);\n        arrays.current[2 * mergeRowIndex] = []; //add the max of the last elements to the merged array\n      } else {\n        if (array1[array1.length - 1] >= array2[array2.length - 1]) {\n          mergedArrays.current[mergeRowIndex].unshift(array1[array1.length - 1]);\n          arrays.current[2 * mergeRowIndex].pop();\n        } else {\n          mergedArrays.current[mergeRowIndex].unshift(array2[array2.length - 1]);\n          arrays.current[2 * mergeRowIndex + 1].pop();\n        }\n      }\n    } else {\n      if (mergedArrays.current.length === 1) {\n        setSorted(true);\n        toggleSorting();\n        return;\n      }\n\n      arrays.current = mergedArrays.current;\n      initializeMergedArrays();\n      merged.current = false;\n    }\n  }; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n      toggleSortingButton.current.classList.remove(\"greenButton\");\n      toggleSortingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //changes the animation speed of sorting when the slider changes\n\n\n  const updateSpeed = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"merge-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: generateArrays,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Array Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"arraySizeInput\",\n          ref: arraySizeInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: toggleSortingButton,\n        className: \"greenButton\",\n        onClick: toggleSorting,\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(MergeSortDisplay, {\n        arrays: arrays.current,\n        mergedArrays: mergedArrays.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MergeSort, \"YvTJ5HdL6RFuYhZ3R8IsFABDdbw=\");\n\n_c5 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MergeSortDisplay\");\n$RefreshReg$(_c2, \"MergeSortDisplayRow\");\n$RefreshReg$(_c3, \"MergeSortDisplayRowHelper1\");\n$RefreshReg$(_c4, \"MergeSortDisplayRowHelper2\");\n$RefreshReg$(_c5, \"MergeSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/MergeSort/MergeSort.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","MergeSortDisplay","props","componentList","i","mergedArrays","length","array1","arrays","array2","push","pop","MergeSortDisplayRow","mergedArray","MergeSortDisplayRowHelper1","MergeSortDisplayRowHelper2","array","MergeSort","forceRender","sorted","setSorted","merged","sorting","interval","arraySizeInput","toggleSortingButton","speedSlider","forceUpdate","renders","generateArrays","current","toggleSorting","size","parseInt","value","isNaN","randomArrays","initializeMergedArrays","newArrays","Array","randInt","min","max","Math","floor","random","ceil","sortingStep","console","log","mergeRowIndex","concat","unshift","clearInterval","innerHTML","classList","remove","add","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './MergeSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display merge sort arrays\r\nconst MergeSortDisplay = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.mergedArrays.length; i++) {\r\n        var array1 = props.arrays[2*i];\r\n        var array2 = [];\r\n        if (2*i+1 < props.arrays.length)\r\n            array2 = props.arrays[2*i+1];\r\n        componentList.push(<MergeSortDisplayRow key={componentList.length} array1={array1} array2={array2} mergedArray={props.mergedArrays[i]} />);\r\n        componentList.push(<hr key={componentList.length} />);\r\n    }\r\n    componentList.pop();\r\n    return componentList;\r\n}\r\n\r\n//react component to display a merge sort row consisting of 2 arrays, and the array it is merging into\r\nconst MergeSortDisplayRow = (props) => {\r\n    return (\r\n        <div className=\"merge-sort-display-row\">\r\n            <div>\r\n                <MergeSortDisplayRowHelper1 array1={props.array1} array2={props.array2} />\r\n            </div>\r\n            <div>\r\n                <MergeSortDisplayRowHelper2 array={props.mergedArray} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst MergeSortDisplayRowHelper1 = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.array1.length; i++) {\r\n        if (i === props.array1.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} />);\r\n    }\r\n    if (props.array1.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    componentList.push(<br key={componentList.length} />);\r\n    for (let i = 0; i < props.array2.length; i++) {\r\n        if (i === props.array2.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} />);\r\n    }\r\n    if (props.array2.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    return componentList;\r\n}\r\nconst MergeSortDisplayRowHelper2 = (props) => {\r\n    var componentList = [];\r\n    componentList.push(<p className=\"arrow\" key={0}>&#x2192;</p>);\r\n    for (let i = 0; i < props.array.length; i++)\r\n        componentList.push(<Element key={componentList.length} color=\"green\" value={props.array[i]} />);\r\n    return componentList;\r\n}\r\n\r\n//react component for merge sort\r\nconst MergeSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const arrays = useRef();\r\n    const mergedArrays = useRef();\r\n    const [sorted, setSorted] = useState(false);\r\n    const merged = useRef(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const arraySizeInput = useRef();\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArrays = useCallback(() => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        const size = parseInt(arraySizeInput.current.value);\r\n        if (!isNaN(size) && size > 0) {\r\n            arrays.current = randomArrays(size);\r\n            setSorted(false);\r\n            merged.current = false;\r\n            initializeMergedArrays();\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }, []);\r\n    //generates a random array within reasonable bounds\r\n    const randomArrays = useCallback((size) => {\r\n        var newArrays = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArrays[i] = [randInt(-999, 1000)];\r\n            }\r\n        return newArrays;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the arrays randomly\r\n    useEffect(() => {\r\n        generateArrays();\r\n    }, [generateArrays, randomArrays]);\r\n\r\n    //function to initialize list of empty arrays to be merged into\r\n    const initializeMergedArrays = () => {\r\n        mergedArrays.current = [];\r\n        const length = Math.ceil(arrays.current.length/2);\r\n        for (let i = 0; i < length; i++)\r\n            mergedArrays.current.push([]);\r\n    }\r\n\r\n    //function to do a single step of merge sorting\r\n    const sortingStep = () => {\r\n        console.log(arrays);\r\n        console.log(mergedArrays);\r\n        if(!merged.current) {\r\n            //find the index of a row that still needs merging\r\n            var mergeRowIndex = null;\r\n            for (let i = 0; i < arrays.current.length; i++) {\r\n                if (arrays.current[i].length !== 0) {\r\n                    mergeRowIndex = Math.floor(i/2);\r\n                    break;\r\n                }\r\n            }\r\n            //if no rows found that still need to merge set merged to true\r\n            if (mergeRowIndex === null) {\r\n                merged.current = true;\r\n                return;\r\n            }\r\n            //perform 1 merge operation for the found row\r\n            var array1 = arrays.current[2*mergeRowIndex];\r\n            var array2 = [];\r\n            if (2*mergeRowIndex+1 < arrays.current.length)\r\n                array2 = arrays.current[2*mergeRowIndex+1];\r\n            //if either array is empty concatenate the other to the merged array\r\n            if (array1.length === 0) {\r\n                mergedArrays.current[mergeRowIndex] = array2.concat(mergedArrays.current[mergeRowIndex]);\r\n                arrays.current[2*mergeRowIndex+1] = [];\r\n            } else if (array2.length === 0) {\r\n                mergedArrays.current[mergeRowIndex] = array1.concat(mergedArrays.current[mergeRowIndex]);\r\n                arrays.current[2*mergeRowIndex] = [];\r\n            //add the max of the last elements to the merged array\r\n            } else {\r\n                if (array1[array1.length-1] >= array2[array2.length-1]) {\r\n                    mergedArrays.current[mergeRowIndex].unshift(array1[array1.length-1]);\r\n                    arrays.current[2*mergeRowIndex].pop();\r\n                } else {\r\n                    mergedArrays.current[mergeRowIndex].unshift(array2[array2.length-1]);\r\n                    arrays.current[2*mergeRowIndex+1].pop();\r\n                }\r\n            }\r\n        } else {\r\n            if (mergedArrays.current.length === 1) {\r\n                setSorted(true);\r\n                toggleSorting();\r\n                return;\r\n            }\r\n            arrays.current = mergedArrays.current;\r\n            initializeMergedArrays();\r\n            merged.current = false;\r\n        }\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"merge-sort\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={generateArrays}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Array Size</label>\r\n                    <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button ref={toggleSortingButton} className=\"greenButton\" onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <MergeSortDisplay arrays={arrays.current} mergedArrays={mergedArrays.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}