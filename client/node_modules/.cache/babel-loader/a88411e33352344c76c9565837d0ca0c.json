{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinarySearch\\\\BinarySearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './BinarySearch.scss';\nimport Element from '../Element/Element'; //react component to display a linear search array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ArrayDisplay = props => {\n  return props.array.map((value, index) => {\n    if (index === props.focus) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 20\n    }, this);else if (index === props.green) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 20\n    }, this);else if (index === props.pink) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"pink\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 20\n    }, this);else return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 20\n    }, this);\n  });\n}; //react component for linear search\n\n\n_c = ArrayDisplay;\n\nconst BinarySearch = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [array, setArray] = useState([]);\n  const arraySizeInput = useRef();\n  const searchInput = useRef();\n  const speedSlider = useRef();\n  const searching = useRef();\n  const searchValue = useRef(null);\n  const focus = useRef(null);\n  const interval = useRef();\n  const green = useRef();\n  const pink = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets state array to a random array for sorting\n\n\n  const generateArray = () => {\n    if (searching.current) {\n      toggleAnimation();\n    }\n\n    focus.current = null;\n    green.current = null;\n    pink.current = null;\n    var size = parseInt(arraySizeInput.current.value);\n    if (isNaN(size)) size = randInt(5, 50);\n\n    if (size > 0) {\n      setArray(randomArray(size));\n    }\n\n    arraySizeInput.current.value = null;\n  }; //generates a random array within reasonable bounds\n\n\n  const randomArray = useCallback(size => {\n    var newArray = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      newArray[i] = randInt(-999, 1000);\n    }\n\n    return newArray;\n  }, []);\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the array randomly at start\n\n\n  useEffect(() => {\n    setArray(randomArray(randInt(5, 50)));\n  }, [randomArray]); //function to start searching animation\n\n  const search = () => {\n    if (searching.current) toggleAnimation();\n    var data = parseInt(searchInput.current.value);\n    if (isNaN(data)) data = 0;\n    searchInput.current.value = null;\n    searchValue.current = data;\n    toggleAnimation();\n    focus.current = 0;\n    forceUpdate();\n  }; //function to 1 step of searching animation\n\n\n  const searchingStep = () => {}; //function to turn searching on and off by button click\n\n\n  const toggleAnimation = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      searching.current = false;\n    } else {\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      searching.current = true;\n      focus.current = null;\n      green.current = null;\n      pink.current = null;\n    }\n  }; //changes the animation speed of searching when the slider changes\n\n\n  const updateSpeed = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: generateArray,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Array Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"arraySizeInput\",\n            ref: arraySizeInput,\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"searchButton\",\n          onClick: search,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"searchInput\",\n          ref: searchInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: /*#__PURE__*/_jsxDEV(ArrayDisplay, {\n          array: array,\n          focus: focus.current,\n          green: green.current,\n          pink: pink.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element Not Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinarySearch, \"mOJXShRheo/lJZji2aL8NtMqiVI=\");\n\n_c2 = BinarySearch;\nexport default BinarySearch;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ArrayDisplay\");\n$RefreshReg$(_c2, \"BinarySearch\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinarySearch/BinarySearch.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","ArrayDisplay","props","array","map","value","index","focus","green","pink","BinarySearch","forceRender","setArray","arraySizeInput","searchInput","speedSlider","searching","searchValue","interval","forceUpdate","renders","generateArray","current","toggleAnimation","size","parseInt","isNaN","randInt","randomArray","newArray","Array","i","min","max","Math","floor","random","search","data","searchingStep","clearInterval","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinarySearch.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a linear search array\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.focus)\r\n            return <Element key={index} value={value} border=\"bordered\" />;\r\n        else if (index === props.green)\r\n            return <Element key={index} value={value} color=\"green\" />;\r\n        else if (index === props.pink)\r\n            return <Element key={index} value={value} color=\"pink\" />;\r\n        else\r\n            return <Element key={index} value={value} />;\r\n    });\r\n}\r\n\r\n//react component for linear search\r\nconst BinarySearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const arraySizeInput = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const focus = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (searching.current) {\r\n            toggleAnimation();\r\n        }\r\n        focus.current = null;\r\n        green.current = null;\r\n        pink.current = null;\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        focus.current = 0;\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        \r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            focus.current = null;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <ArrayDisplay array={array} focus={focus.current} green={green.current} pink={pink.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element Not Found</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinarySearch;"]},"metadata":{},"sourceType":"module"}