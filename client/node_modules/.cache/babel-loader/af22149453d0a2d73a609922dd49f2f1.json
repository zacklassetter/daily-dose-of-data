{"ast":null,"code":"import _slicedToArray from\"C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,useEffect,useCallback}from'react';import'./HeapSort.scss';import Element from'../Element/Element.js';import{BinaryHeapClass}from'../BinaryHeap/BinaryHeap.js';import BinaryTreeDisplay from'../BinaryTree/BinaryTreeDisplay.js';//react component to dislplay an aray\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ArrayDisplay=function ArrayDisplay(props){return props.array.map(function(value,index){return/*#__PURE__*/_jsx(Element,{value:value},index);});};var SortedArrayDisplay=function SortedArrayDisplay(props){return props.array.map(function(value,index){return/*#__PURE__*/_jsx(Element,{value:value,color:\"green\"},index);});};//main react component for heap sort animation\nvar HeapSort=function HeapSort(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState(new BinaryHeapClass()),_useState4=_slicedToArray(_useState3,2),heap=_useState4[0],setHeap=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),array=_useState6[0],setArray=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),sortedArray=_useState8[0],setSortedArray=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),sorted=_useState10[0],setSorted=_useState10[1];var arraySizeInput=useRef();var toggleSortingButton=useRef();var speedSlider=useRef();var sorting=useRef(false);var interval=useRef(null);//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//sets state array to a random array for sorting\nvar generateArray=function generateArray(){if(sorting.current){toggleSorting();}var size=parseInt(arraySizeInput.current.value);if(isNaN(size))size=randInt(5,32);if(size>0){setArray(randomArray(size));setHeap(new BinaryHeapClass());setSortedArray([]);setSorted(false);}arraySizeInput.current.value=null;};//generates a random array within reasonable bounds\nvar randomArray=useCallback(function(size){var newArray=new Array(size);for(var i=0;i<size;i++){newArray[i]=randInt(-999,1000);}return newArray;},[]);var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//initialize the array randomly at start\nuseEffect(function(){setArray(randomArray(randInt(5,32)));},[randomArray]);//function to do a single step of sorting animation\nvar sortingStep=function sortingStep(){if(array.length===0&&heap.heap.length===0){setSorted(true);toggleSorting();}else if(array.length!==0)heap.insert(array.pop());else sortedArray.push(heap.remove());};//function to turn sorting on and off by button click\nvar toggleSorting=function toggleSorting(){if(sorting.current){clearInterval(interval.current);sorting.current=false;toggleSortingButton.current.innerHTML=\"Sort\";toggleSortingButton.current.classList.remove(\"pinkButton\");toggleSortingButton.current.classList.add(\"greenButton\");}else if(!sorted){interval.current=setInterval(function(){sortingStep();forceUpdate();},1000-speedSlider.current.value);sorting.current=true;toggleSortingButton.current.innerHTML=\"Stop\";toggleSortingButton.current.classList.remove(\"greenButton\");toggleSortingButton.current.classList.add(\"pinkButton\");}};//changes the animation speed of sorting when the slider changes\nvar updateSpeed=function updateSpeed(){if(sorting.current){clearInterval(interval.current);interval.current=setInterval(function(){sortingStep();forceUpdate();},1000-speedSlider.current.value);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"heap-sort\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:generateArray,children:\"Random\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledInput\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Array Size\"}),/*#__PURE__*/_jsx(\"input\",{id:\"arraySizeInput\",ref:arraySizeInput,type:\"text\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"toggleSortingButton\",className:\"greenButton\",ref:toggleSortingButton,onClick:toggleSorting,children:\"Sort\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledSlider\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Animation Speed\"}),/*#__PURE__*/_jsx(\"input\",{className:\"slider\",ref:speedSlider,onChange:updateSpeed,min:\"0\",max:\"990\",type:\"range\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"visualization\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"array\",children:/*#__PURE__*/_jsx(ArrayDisplay,{array:array})}),/*#__PURE__*/_jsx(BinaryTreeDisplay,{tree:heap.getTree()}),/*#__PURE__*/_jsx(\"div\",{className:\"array\",children:/*#__PURE__*/_jsx(SortedArrayDisplay,{array:sortedArray})})]})]});};export default HeapSort;","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/src/HeapSort/HeapSort.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","BinaryHeapClass","BinaryTreeDisplay","ArrayDisplay","props","array","map","value","index","SortedArrayDisplay","HeapSort","forceRender","heap","setHeap","setArray","sortedArray","setSortedArray","sorted","setSorted","arraySizeInput","toggleSortingButton","speedSlider","sorting","interval","forceUpdate","renders","generateArray","current","toggleSorting","size","parseInt","isNaN","randInt","randomArray","newArray","Array","i","min","max","Math","floor","random","sortingStep","length","insert","pop","push","remove","clearInterval","innerHTML","classList","add","setInterval","updateSpeed","getTree"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './HeapSort.scss';\r\nimport Element from '../Element/Element.js';\r\nimport { BinaryHeapClass } from '../BinaryHeap/BinaryHeap.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//react component to dislplay an aray\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\nconst SortedArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        return <Element key={index} value={value} color=\"green\" />\r\n    });\r\n}\r\n\r\n//main react component for heap sort animation\r\nconst HeapSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const [array, setArray] = useState([]);\r\n    const [sortedArray, setSortedArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const arraySizeInput = useRef();\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,32);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setHeap(new BinaryHeapClass());\r\n            setSortedArray([]);\r\n            setSorted(false);\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,32)));\r\n    }, [randomArray]);\r\n\r\n    //function to do a single step of sorting animation\r\n    const sortingStep = () => {\r\n        if(array.length === 0 && heap.heap.length === 0) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n        } else if(array.length !== 0)\r\n            heap.insert(array.pop())\r\n        else\r\n            sortedArray.push(heap.remove());\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"heap-sort\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={generateArray}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Array Size</label>\r\n                    <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <div className=\"array\">\r\n                    <ArrayDisplay array={array} />\r\n                </div>\r\n                <BinaryTreeDisplay tree={heap.getTree()} />\r\n                <div className=\"array\">\r\n                    <SortedArrayDisplay array={sortedArray} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default HeapSort;"]},"metadata":{},"sourceType":"module"}