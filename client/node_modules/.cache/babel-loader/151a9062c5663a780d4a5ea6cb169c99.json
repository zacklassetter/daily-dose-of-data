{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinaryTree\\\\BinaryTreeInformation.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BinaryTreeInformation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"information\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Binary Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A Binary Tree is a data structure in which each element in the tree contains at most two children elements, a left and a right child. Each element in the tree is contained in a node. A node contains the value of an element, a pointer to the left child node, and a pointer to the right child node. If a node does not have a left or right child it typically has a null pointer.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"u\", {\n        children: \"Binary Trees are used to implement several other data structures:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = BinaryTreeInformation;\nexport default BinaryTreeInformation;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryTreeInformation\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinaryTree/BinaryTreeInformation.js"],"names":["React","BinaryTreeInformation"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,qBAAqB,GAAG,MAAM;AAChC,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;KAAMA,qB;AAWN,eAAeA,qBAAf","sourcesContent":["import React from 'react';\r\n\r\nconst BinaryTreeInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <h1>Binary Tree</h1>\r\n            <p>A Binary Tree is a data structure in which each element in the tree contains at most two children elements, a left and a right child. Each element in the tree is contained in a node. A node contains the value of an element, a pointer to the left child node, and a pointer to the right child node. If a node does not have a left or right child it typically has a null pointer.</p>\r\n            <br />\r\n            <p><u>Binary Trees are used to implement several other data structures:</u></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryTreeInformation;"]},"metadata":{},"sourceType":"module"}