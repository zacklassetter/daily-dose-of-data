{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\HashTable\\\\HashTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './HashTable.scss';\nimport Element from '../Element/Element'; //class for a hash table with linear probing\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HashTableClass {\n  constructor(size, loadFactor) {\n    this.array = [];\n\n    for (let i = 0; i < size; i++) this.array.push(null);\n\n    this.elements = 0;\n    this.size = size;\n    this.LOADFACTOR = loadFactor;\n  } //hash function to return normal modulus results with + or - numbers (value % size)\n\n\n  hash(value) {\n    return (value % this.size + this.size) % this.size;\n  }\n\n  resize() {\n    let oldArray = this.array;\n    this.array = [];\n    this.elements = 0;\n\n    for (let i = 0; i < 2 * this.size; i++) this.array.push(null);\n\n    this.size = 2 * this.size;\n\n    for (let i = 0; i < oldArray.length; i++) if (oldArray[i] !== null) this.insert(oldArray[i]);\n  }\n\n  insert(value) {\n    if ((this.elements + 1) / this.size > this.LOADFACTOR) this.resize();\n    let hashCode = this.hash(value);\n\n    while (this.array[hashCode] !== null) {\n      hashCode++;\n      if (hashCode === this.array.length) hashCode = 0;\n    }\n\n    this.array[hashCode] = value;\n    this.elements++;\n    return hashCode;\n  }\n\n  remove(value) {\n    let hashCode = this.hash(value);\n\n    while (this.array[hashCode] !== value) {\n      hashCode++;\n      if (hashCode === this.array.length) hashCode = 0;\n      if (this.array[hashCode] === null) return null;\n    }\n\n    this.array[hashCode] = null;\n    this.elements--;\n    return hashCode;\n  }\n\n  find(value) {\n    let hashCode = this.hash(value);\n\n    while (this.array[hashCode] !== value) {\n      hashCode++;\n      if (hashCode === this.array.length) hashCode = 0;\n      if (this.array[hashCode] === null) return null;\n    }\n\n    return hashCode;\n  }\n\n} //react component to display a hashtable\n\n\nconst HashTableDisplay = props => {\n  return props.hashTable.array.map((value, index) => {\n    if (index === props.green) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"labeledElement\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Element, {\n          value: value,\n          color: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this);\n    } else if (index === props.pink) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"labeledElement\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Element, {\n          value: value,\n          color: \"pink\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this);\n    } else if (index === props.yellow) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"labeledElement\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Element, {\n          value: value,\n          color: \"yellow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"labeledElement\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: index\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Element, {\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this);\n    }\n  });\n}; //react component for hash table visualization\n\n\n_c = HashTableDisplay;\n\nconst HashTable = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [hashTable, setHashTable] = useState(new HashTableClass(10, 0.5));\n  const randomSize = useRef();\n  const randomLF = useRef();\n  const buildSize = useRef();\n  const buildLF = useRef();\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const findInput = useRef();\n  const lastInserted = useRef();\n  const lastRemoved = useRef();\n  const lastFound = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random hashTable\n\n\n  const randomHashTable = () => {\n    lastInserted.current = null;\n    lastRemoved.current = null;\n    lastFound.current = null;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to build an empty hash table\n\n\n  const build = () => {\n    lastInserted.current = null;\n    lastRemoved.current = null;\n    lastFound.current = null;\n    var size = parseInt(buildSize.current.value);\n    buildSize.current.value = null;\n    if (isNaN(size)) size = randInt(20, 100);\n    var loadFactor = parseFloat(buildLF.current.value);\n    buildLF.current.value = null;\n    if (isNaN(loadFactor)) loadFactor = Math.random() * 0.4 + 0.5;\n    setHashTable(new HashTableClass(size, loadFactor));\n  }; //function to insert into hash table\n\n\n  const insert = () => {\n    lastInserted.current = null;\n    lastRemoved.current = null;\n    lastFound.current = null;\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    lastInserted.current = hashTable.insert(data);\n    forceUpdate();\n    insertInput.current.value = null;\n  }; //function to remove from hash table\n\n\n  const remove = () => {\n    lastInserted.current = null;\n    lastRemoved.current = null;\n    lastFound.current = null;\n    var data = parseInt(removeInput.current.value);\n    if (!isNaN(data)) lastRemoved.current = hashTable.remove(data);\n    forceUpdate();\n    removeInput.current.value = null;\n  }; //function to find a value in the hash table\n\n\n  const find = () => {\n    lastInserted.current = null;\n    lastRemoved.current = null;\n    lastFound.current = null;\n    var data = parseInt(findInput.current.value);\n    if (!isNaN(data)) lastFound.current = hashTable.find(data);\n    forceUpdate();\n    findInput.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hash-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomHashTable,\n        children: \"Rand\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomSizeInput\",\n          ref: randomSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Load Factor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomLFInput\",\n          ref: randomLF,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"buildButton\",\n        onClick: build,\n        children: \"Build\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"buildSizeInput\",\n          ref: buildSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Load Factor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"buildLFInput\",\n          ref: buildLF,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"insertInput\",\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"removeInput\",\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"findButton\",\n        onClick: find,\n        children: \"Find\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"findInput\",\n        ref: findInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(HashTableDisplay, {\n        hashTable: hashTable,\n        green: lastInserted.current,\n        pink: lastRemoved.current,\n        yellow: lastFound.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HashTable, \"gVHFVzbPFggK9ShviKuSXDFGuXU=\");\n\n_c2 = HashTable;\nexport default HashTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HashTableDisplay\");\n$RefreshReg$(_c2, \"HashTable\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/HashTable/HashTable.js"],"names":["React","useState","useRef","useEffect","Element","HashTableClass","constructor","size","loadFactor","array","i","push","elements","LOADFACTOR","hash","value","resize","oldArray","length","insert","hashCode","remove","find","HashTableDisplay","props","hashTable","map","index","green","pink","yellow","HashTable","forceRender","setHashTable","randomSize","randomLF","buildSize","buildLF","insertInput","removeInput","findInput","lastInserted","lastRemoved","lastFound","forceUpdate","renders","randomHashTable","current","randInt","min","max","Math","floor","random","build","parseInt","isNaN","parseFloat","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAO,kBAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB,C,CAEA;;;;AACA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,UAAR,EAAoB;AAC3B,SAAKC,KAAL,GAAa,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EACI,KAAKD,KAAL,CAAWE,IAAX,CAAgB,IAAhB;;AACJ,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKM,UAAL,GAAkBL,UAAlB;AACH,GARgB,CAUjB;;;AACAM,EAAAA,IAAI,CAAEC,KAAF,EAAS;AACT,WAAO,CAAEA,KAAK,GAAG,KAAKR,IAAd,GAAoB,KAAKA,IAA1B,IAAgC,KAAKA,IAA5C;AACH;;AAEDS,EAAAA,MAAM,GAAI;AACN,QAAIC,QAAQ,GAAG,KAAKR,KAApB;AACA,SAAKA,KAAL,GAAa,EAAb;AACA,SAAKG,QAAL,GAAgB,CAAhB;;AACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAE,KAAKH,IAA3B,EAAiCG,CAAC,EAAlC,EACI,KAAKD,KAAL,CAAWE,IAAX,CAAgB,IAAhB;;AACJ,SAAKJ,IAAL,GAAY,IAAE,KAAKA,IAAnB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,QAAQ,CAACC,MAA7B,EAAqCR,CAAC,EAAtC,EACI,IAAIO,QAAQ,CAACP,CAAD,CAAR,KAAgB,IAApB,EACI,KAAKS,MAAL,CAAYF,QAAQ,CAACP,CAAD,CAApB;AACX;;AAEDS,EAAAA,MAAM,CAAEJ,KAAF,EAAS;AACX,QAAI,CAAC,KAAKH,QAAL,GAAc,CAAf,IAAkB,KAAKL,IAAvB,GAA8B,KAAKM,UAAvC,EACI,KAAKG,MAAL;AACJ,QAAII,QAAQ,GAAG,KAAKN,IAAL,CAAUC,KAAV,CAAf;;AACA,WAAO,KAAKN,KAAL,CAAWW,QAAX,MAAyB,IAAhC,EAAsC;AAClCA,MAAAA,QAAQ;AACR,UAAIA,QAAQ,KAAK,KAAKX,KAAL,CAAWS,MAA5B,EACIE,QAAQ,GAAG,CAAX;AACP;;AACD,SAAKX,KAAL,CAAWW,QAAX,IAAuBL,KAAvB;AACA,SAAKH,QAAL;AACA,WAAOQ,QAAP;AACH;;AAEDC,EAAAA,MAAM,CAAEN,KAAF,EAAS;AACX,QAAIK,QAAQ,GAAG,KAAKN,IAAL,CAAUC,KAAV,CAAf;;AACA,WAAO,KAAKN,KAAL,CAAWW,QAAX,MAAyBL,KAAhC,EAAuC;AACnCK,MAAAA,QAAQ;AACR,UAAIA,QAAQ,KAAK,KAAKX,KAAL,CAAWS,MAA5B,EACIE,QAAQ,GAAG,CAAX;AACJ,UAAI,KAAKX,KAAL,CAAWW,QAAX,MAAyB,IAA7B,EACI,OAAO,IAAP;AACP;;AACD,SAAKX,KAAL,CAAWW,QAAX,IAAuB,IAAvB;AACA,SAAKR,QAAL;AACA,WAAOQ,QAAP;AACH;;AAEDE,EAAAA,IAAI,CAAEP,KAAF,EAAS;AACT,QAAIK,QAAQ,GAAG,KAAKN,IAAL,CAAUC,KAAV,CAAf;;AACA,WAAO,KAAKN,KAAL,CAAWW,QAAX,MAAyBL,KAAhC,EAAuC;AACnCK,MAAAA,QAAQ;AACR,UAAIA,QAAQ,KAAK,KAAKX,KAAL,CAAWS,MAA5B,EACIE,QAAQ,GAAG,CAAX;AACJ,UAAI,KAAKX,KAAL,CAAWW,QAAX,MAAyB,IAA7B,EACI,OAAO,IAAP;AACP;;AACD,WAAOA,QAAP;AACH;;AAjEgB,C,CAoErB;;;AACA,MAAMG,gBAAgB,GAAIC,KAAD,IAAW;AAChC,SAAOA,KAAK,CAACC,SAAN,CAAgBhB,KAAhB,CAAsBiB,GAAtB,CAA0B,CAACX,KAAD,EAAQY,KAAR,KAAkB;AAC/C,QAAIA,KAAK,KAAKH,KAAK,CAACI,KAApB,EAA2B;AACvB,0BACI;AAAiB,QAAA,SAAS,EAAC,gBAA3B;AAAA,gCACI;AAAA,oBAAQD;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,OAAD;AAAS,UAAA,KAAK,EAAEZ,KAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUY,KAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KAPD,MAOO,IAAIA,KAAK,KAAKH,KAAK,CAACK,IAApB,EAA0B;AAC7B,0BACI;AAAiB,QAAA,SAAS,EAAC,gBAA3B;AAAA,gCACI;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,OAAD;AAAS,UAAA,KAAK,EAAEZ,KAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUY,KAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KAPM,MAOA,IAAIA,KAAK,KAAKH,KAAK,CAACM,MAApB,EAA4B;AAC/B,0BACI;AAAiB,QAAA,SAAS,EAAC,gBAA3B;AAAA,gCACI;AAAA,oBAAQH;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,OAAD;AAAS,UAAA,KAAK,EAAEZ,KAAhB;AAAuB,UAAA,KAAK,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUY,KAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KAPM,MAOA;AACH,0BACI;AAAiB,QAAA,SAAS,EAAC,gBAA3B;AAAA,gCACI;AAAA,oBAAQA;AAAR;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,OAAD;AAAS,UAAA,KAAK,EAAEZ;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUY,KAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH;AACJ,GA9BM,CAAP;AA+BH,CAhCD,C,CAkCA;;;KAlCMJ,gB;;AAmCN,MAAMQ,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM,GAAGC,WAAH,IAAkB/B,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACwB,SAAD,EAAYQ,YAAZ,IAA4BhC,QAAQ,CAAC,IAAII,cAAJ,CAAmB,EAAnB,EAAuB,GAAvB,CAAD,CAA1C;AACA,QAAM6B,UAAU,GAAGhC,MAAM,EAAzB;AACA,QAAMiC,QAAQ,GAAGjC,MAAM,EAAvB;AACA,QAAMkC,SAAS,GAAGlC,MAAM,EAAxB;AACA,QAAMmC,OAAO,GAAGnC,MAAM,EAAtB;AACA,QAAMoC,WAAW,GAAGpC,MAAM,EAA1B;AACA,QAAMqC,WAAW,GAAGrC,MAAM,EAA1B;AACA,QAAMsC,SAAS,GAAGtC,MAAM,EAAxB;AACA,QAAMuC,YAAY,GAAGvC,MAAM,EAA3B;AACA,QAAMwC,WAAW,GAAGxC,MAAM,EAA1B;AACA,QAAMyC,SAAS,GAAGzC,MAAM,EAAxB,CAboB,CAepB;;AACH,QAAM0C,WAAW,GAAG,MAAM;AACzBZ,IAAAA,WAAW,CAACa,OAAO,IAAIA,OAAO,GAAC,CAApB,CAAX;AACA,GAFD,CAhBuB,CAoBpB;;;AACA,QAAMC,eAAe,GAAG,MAAM;AAC1BL,IAAAA,YAAY,CAACM,OAAb,GAAuB,IAAvB;AACAL,IAAAA,WAAW,CAACK,OAAZ,GAAsB,IAAtB;AACAJ,IAAAA,SAAS,CAACI,OAAV,GAAoB,IAApB;AACH,GAJD;;AAKA,QAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC1B,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAACD,GAArB,IAA4BA,GAAvC,CAAP;AACH,GAFD,CA1BoB,CA8BpB;;;AACA,QAAMK,KAAK,GAAG,MAAM;AAChBb,IAAAA,YAAY,CAACM,OAAb,GAAuB,IAAvB;AACAL,IAAAA,WAAW,CAACK,OAAZ,GAAsB,IAAtB;AACAJ,IAAAA,SAAS,CAACI,OAAV,GAAoB,IAApB;AACA,QAAIxC,IAAI,GAAGgD,QAAQ,CAACnB,SAAS,CAACW,OAAV,CAAkBhC,KAAnB,CAAnB;AACAqB,IAAAA,SAAS,CAACW,OAAV,CAAkBhC,KAAlB,GAA0B,IAA1B;AACA,QAAIyC,KAAK,CAACjD,IAAD,CAAT,EACIA,IAAI,GAAGyC,OAAO,CAAC,EAAD,EAAK,GAAL,CAAd;AACJ,QAAIxC,UAAU,GAAGiD,UAAU,CAACpB,OAAO,CAACU,OAAR,CAAgBhC,KAAjB,CAA3B;AACAsB,IAAAA,OAAO,CAACU,OAAR,CAAgBhC,KAAhB,GAAwB,IAAxB;AACA,QAAGyC,KAAK,CAAChD,UAAD,CAAR,EACIA,UAAU,GAAG2C,IAAI,CAACE,MAAL,KAAgB,GAAhB,GAAsB,GAAnC;AACJpB,IAAAA,YAAY,CAAC,IAAI5B,cAAJ,CAAmBE,IAAnB,EAAyBC,UAAzB,CAAD,CAAZ;AACH,GAbD,CA/BoB,CA8CpB;;;AACA,QAAMW,MAAM,GAAG,MAAM;AACjBsB,IAAAA,YAAY,CAACM,OAAb,GAAuB,IAAvB;AACAL,IAAAA,WAAW,CAACK,OAAZ,GAAsB,IAAtB;AACAJ,IAAAA,SAAS,CAACI,OAAV,GAAoB,IAApB;AACA,QAAIW,IAAI,GAAGH,QAAQ,CAACjB,WAAW,CAACS,OAAZ,CAAoBhC,KAArB,CAAnB;AACA,QAAIyC,KAAK,CAACE,IAAD,CAAT,EACIA,IAAI,GAAGV,OAAO,CAAC,CAAC,GAAF,EAAM,IAAN,CAAd;AACJP,IAAAA,YAAY,CAACM,OAAb,GAAuBtB,SAAS,CAACN,MAAV,CAAiBuC,IAAjB,CAAvB;AACAd,IAAAA,WAAW;AACXN,IAAAA,WAAW,CAACS,OAAZ,CAAoBhC,KAApB,GAA4B,IAA5B;AACH,GAVD,CA/CoB,CA2DpB;;;AACA,QAAMM,MAAM,GAAG,MAAM;AACjBoB,IAAAA,YAAY,CAACM,OAAb,GAAuB,IAAvB;AACAL,IAAAA,WAAW,CAACK,OAAZ,GAAsB,IAAtB;AACAJ,IAAAA,SAAS,CAACI,OAAV,GAAoB,IAApB;AACA,QAAIW,IAAI,GAAGH,QAAQ,CAAChB,WAAW,CAACQ,OAAZ,CAAoBhC,KAArB,CAAnB;AACA,QAAI,CAACyC,KAAK,CAACE,IAAD,CAAV,EACIhB,WAAW,CAACK,OAAZ,GAAsBtB,SAAS,CAACJ,MAAV,CAAiBqC,IAAjB,CAAtB;AACJd,IAAAA,WAAW;AACXL,IAAAA,WAAW,CAACQ,OAAZ,CAAoBhC,KAApB,GAA4B,IAA5B;AACH,GATD,CA5DoB,CAuEpB;;;AACA,QAAMO,IAAI,GAAG,MAAM;AACfmB,IAAAA,YAAY,CAACM,OAAb,GAAuB,IAAvB;AACAL,IAAAA,WAAW,CAACK,OAAZ,GAAsB,IAAtB;AACAJ,IAAAA,SAAS,CAACI,OAAV,GAAoB,IAApB;AACA,QAAIW,IAAI,GAAGH,QAAQ,CAACf,SAAS,CAACO,OAAV,CAAkBhC,KAAnB,CAAnB;AACA,QAAI,CAACyC,KAAK,CAACE,IAAD,CAAV,EACIf,SAAS,CAACI,OAAV,GAAoBtB,SAAS,CAACH,IAAV,CAAeoC,IAAf,CAApB;AACJd,IAAAA,WAAW;AACXJ,IAAAA,SAAS,CAACO,OAAV,CAAkBhC,KAAlB,GAA0B,IAA1B;AACH,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,OAAO,EAAE+B,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,iBAAV;AAA4B,UAAA,GAAG,EAAEZ,UAAjC;AAA6C,UAAA,IAAI,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,eAAV;AAA0B,UAAA,GAAG,EAAEC,QAA/B;AAAyC,UAAA,IAAI,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAUI;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAQ,QAAA,EAAE,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEmB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,gBAAV;AAA2B,UAAA,GAAG,EAAElB,SAAhC;AAA2C,UAAA,IAAI,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ,eAgBI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,cAAV;AAAyB,UAAA,GAAG,EAAEC,OAA9B;AAAuC,UAAA,IAAI,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ,eAoBI;AAAA;AAAA;AAAA;AAAA,cApBJ,eAqBI;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,OAAO,EAAElB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ,eAsBI;AAAO,QAAA,EAAE,EAAC,aAAV;AAAwB,QAAA,GAAG,EAAEmB,WAA7B;AAA0C,QAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,cAtBJ,eAuBI;AAAA;AAAA;AAAA;AAAA,cAvBJ,eAwBI;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,OAAO,EAAEjB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBJ,eAyBI;AAAO,QAAA,EAAE,EAAC,aAAV;AAAwB,QAAA,GAAG,EAAEkB,WAA7B;AAA0C,QAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,cAzBJ,eA0BI;AAAA;AAAA;AAAA;AAAA,cA1BJ,eA2BI;AAAQ,QAAA,EAAE,EAAC,YAAX;AAAwB,QAAA,OAAO,EAAEjB,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BJ,eA4BI;AAAO,QAAA,EAAE,EAAC,WAAV;AAAsB,QAAA,GAAG,EAAEkB,SAA3B;AAAsC,QAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eA+BI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACI,QAAC,gBAAD;AAAkB,QAAA,SAAS,EAAEf,SAA7B;AAAwC,QAAA,KAAK,EAAEgB,YAAY,CAACM,OAA5D;AAAqE,QAAA,IAAI,EAAEL,WAAW,CAACK,OAAvF;AAAgG,QAAA,MAAM,EAAEJ,SAAS,CAACI;AAAlH;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH,CAzHD;;GAAMhB,S;;MAAAA,S;AA2HN,eAAeA,SAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './HashTable.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//class for a hash table with linear probing\r\nclass HashTableClass {\r\n    constructor (size, loadFactor) {\r\n        this.array = [];\r\n        for (let i = 0; i < size; i++)\r\n            this.array.push(null);\r\n        this.elements = 0;\r\n        this.size = size;\r\n        this.LOADFACTOR = loadFactor;\r\n    }\r\n\r\n    //hash function to return normal modulus results with + or - numbers (value % size)\r\n    hash (value) {\r\n        return ((value % this.size)+this.size)%this.size;\r\n    }\r\n\r\n    resize () {\r\n        let oldArray = this.array;\r\n        this.array = [];\r\n        this.elements = 0;\r\n        for (let i = 0; i < 2*this.size; i++)\r\n            this.array.push(null);\r\n        this.size = 2*this.size;\r\n        for (let i = 0; i < oldArray.length; i++)\r\n            if (oldArray[i] !== null)\r\n                this.insert(oldArray[i]);\r\n    }\r\n\r\n    insert (value) {\r\n        if ((this.elements+1)/this.size > this.LOADFACTOR)\r\n            this.resize();\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== null) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n        }\r\n        this.array[hashCode] = value;\r\n        this.elements++;\r\n        return hashCode;\r\n    }\r\n\r\n    remove (value) {\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== value) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n            if (this.array[hashCode] === null)\r\n                return null;\r\n        }\r\n        this.array[hashCode] = null;\r\n        this.elements--;\r\n        return hashCode;\r\n    }\r\n\r\n    find (value) {\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== value) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n            if (this.array[hashCode] === null)\r\n                return null;\r\n        }\r\n        return hashCode;\r\n    }\r\n}\r\n\r\n//react component to display a hashtable\r\nconst HashTableDisplay = (props) => {\r\n    return props.hashTable.array.map((value, index) => {\r\n        if (index === props.green) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"green\"></Element>\r\n                </div>\r\n            );\r\n        } else if (index === props.pink) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"pink\"></Element>\r\n                </div>\r\n            );\r\n        } else if (index === props.yellow) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"yellow\"></Element>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value}></Element>\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\n//react component for hash table visualization\r\nconst HashTable = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [hashTable, setHashTable] = useState(new HashTableClass(10, 0.5));\r\n    const randomSize = useRef();\r\n    const randomLF = useRef();\r\n    const buildSize = useRef();\r\n    const buildLF = useRef();\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const lastInserted = useRef();\r\n    const lastRemoved = useRef();\r\n    const lastFound = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random hashTable\r\n    const randomHashTable = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to build an empty hash table\r\n    const build = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var size = parseInt(buildSize.current.value);\r\n        buildSize.current.value = null;\r\n        if (isNaN(size))\r\n            size = randInt(20, 100);\r\n        var loadFactor = parseFloat(buildLF.current.value);\r\n        buildLF.current.value = null;\r\n        if(isNaN(loadFactor))\r\n            loadFactor = Math.random() * 0.4 + 0.5;\r\n        setHashTable(new HashTableClass(size, loadFactor));\r\n    }\r\n\r\n    //function to insert into hash table\r\n    const insert = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999,1000);\r\n        lastInserted.current = hashTable.insert(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from hash table\r\n    const remove = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(removeInput.current.value);\r\n        if (!isNaN(data))\r\n            lastRemoved.current = hashTable.remove(data);\r\n        forceUpdate();\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to find a value in the hash table\r\n    const find = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(findInput.current.value);\r\n        if (!isNaN(data))\r\n            lastFound.current = hashTable.find(data);\r\n        forceUpdate();\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"hash-table\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHashTable}>Rand</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Load Factor</label>\r\n                    <input id=\"randomLFInput\" ref={randomLF} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"buildButton\" onClick={build}>Build</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"buildSizeInput\" ref={buildSize} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Load Factor</label>\r\n                    <input id=\"buildLFInput\" ref={buildLF} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"findButton\" onClick={find}>Find</button>\r\n                <input id=\"findInput\" ref={findInput} type=\"text\"></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <HashTableDisplay hashTable={hashTable} green={lastInserted.current} pink={lastRemoved.current} yellow={lastFound.current} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HashTable;"]},"metadata":{},"sourceType":"module"}