{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinaryHeap\\\\BinaryHeap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './BinaryHeap.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary tree data structure\n\n\nclass BinaryTreeClass {\n  constructor(root) {\n    this.root = root;\n  }\n\n} //class for binary heap data structure\n\n\nclass BinaryHeapClass {\n  constructor() {\n    this.heap = [];\n  }\n\n  insert(value) {\n    this.heap.push(value);\n    var current = this.heap.length - 1;\n    var parent = Math.floor((current - 1) / 2);\n\n    while (parent >= 0) {\n      if (this.heap[current] < this.heap[parent]) {\n        let temp = this.heap[parent];\n        this.heap[parent] = this.heap[current];\n        this.heap[current] = temp;\n        current = parent;\n        parent = Math.floor((current - 1) / 2);\n      } else break;\n    }\n  }\n\n  remove() {\n    var current = 0;\n\n    while (current < this.heap.length) {\n      if (this.heap[2 * current + 1] < this.heap[2 * current + 2]) {\n        this.heap[current] = this.heap[2 * current + 1];\n        current = 2 * current + 1;\n      } else {\n        this.heap[current] = this.heap[2 * current + 2];\n        current = 2 * current + 2;\n      }\n    }\n  }\n\n  getTree() {\n    var tree = new BinaryTreeClass(null);\n\n    if (this.heap.length !== 0) {\n      tree.root = new BinaryTreeNode(this.heap[0]);\n      var nodes = [tree.root];\n      var newNodes = [];\n      var indices = [0];\n      var newIndices = [];\n\n      while (nodes.length !== 0) {\n        console.log(nodes);\n        console.log(indices);\n\n        for (let i = 0; i < nodes.length; i++) {\n          if (2 * indices[i] + 1 < this.heap.length) {\n            nodes[i].left = new BinaryTreeNode(this.heap[2 * indices[i] + 1]);\n            newNodes.push(nodes[i].left);\n            newIndices.push(2 * indices[i] + 1);\n          }\n\n          if (2 * indices[i] + 2 < this.heap.length) {\n            nodes[i].right = new BinaryTreeNode(this.heap[2 * indices[i] + 2]);\n            newNodes.push(nodes[i].right);\n            newIndices.push(2 * indices[i] + 2);\n          }\n        }\n\n        nodes = newNodes;\n        newNodes = [];\n        indices = newIndices;\n        newIndices = [];\n      }\n    }\n\n    return tree;\n  }\n\n} //main react component for binary heap visualization\n\n\nconst BinaryHeap = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [heap, setHeap] = useState(new BinaryHeapClass());\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const speedSlider = useRef();\n  const interval = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random heap\n\n\n  const randomHeap = () => {\n    const elements = randInt(2, 32);\n    var newHeap = new BinaryHeapClass();\n\n    for (let i = 0; i < elements; i++) newHeap.insert(randInt(-999, 1000));\n\n    setHeap(newHeap);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the tree to a random binary heap\n\n\n  useEffect(randomHeap, []); //function to insert a value into the heap\n\n  const insert = () => {\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    heap.insert(data);\n    forceUpdate();\n    insertInput.current.value = null;\n  }; //function to remove a value from the heap\n\n\n  const remove = () => {}; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    clearInterval(interval.current);\n    interval.current = setInterval(() => {\n      forceUpdate();\n    }, 1000 - speedSlider.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-heap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomHeap,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: heap.getTree()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryHeap, \"twiVDI5jJ+/qsUcSVlQAxDjIbyQ=\");\n\n_c = BinaryHeap;\nexport default BinaryHeap;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryHeap\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinaryHeap/BinaryHeap.js"],"names":["React","useState","useRef","useEffect","BinaryTreeDisplay","BinaryTreeNode","constructor","value","left","right","BinaryTreeClass","root","BinaryHeapClass","heap","insert","push","current","length","parent","Math","floor","temp","remove","getTree","tree","nodes","newNodes","indices","newIndices","console","log","i","BinaryHeap","forceRender","setHeap","insertInput","removeInput","speedSlider","interval","forceUpdate","renders","randomHeap","elements","randInt","newHeap","min","max","random","data","parseInt","isNaN","updateSpeed","clearInterval","setInterval"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './BinaryHeap.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nclass BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//class for binary heap data structure\r\nclass BinaryHeapClass {\r\n    constructor() {\r\n        this.heap = [];\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        var current = this.heap.length-1;\r\n        var parent = Math.floor((current-1)/2);\r\n        while(parent >= 0) {\r\n            if (this.heap[current] < this.heap[parent]) {\r\n                let temp = this.heap[parent];\r\n                this.heap[parent] = this.heap[current];\r\n                this.heap[current] = temp;\r\n                current = parent;\r\n                parent = Math.floor((current-1)/2);\r\n            } else\r\n                break;\r\n        }\r\n    }\r\n\r\n    remove() {\r\n        var current = 0;\r\n        while (current < this.heap.length) {\r\n            if (this.heap[2*current+1] < this.heap[2*current+2]) {\r\n                this.heap[current] = this.heap[2*current+1];\r\n                current = 2*current+1;\r\n            } else {\r\n                this.heap[current] = this.heap[2*current+2];\r\n                current = 2*current+2;\r\n            }\r\n        }\r\n    }\r\n\r\n    getTree() {\r\n        var tree = new BinaryTreeClass(null);\r\n        if (this.heap.length !== 0) {\r\n            tree.root = new BinaryTreeNode(this.heap[0]);\r\n            var nodes = [tree.root];\r\n            var newNodes = [];\r\n            var indices = [0];\r\n            var newIndices = [];\r\n            while (nodes.length !== 0) {\r\n                console.log(nodes);\r\n                console.log(indices);\r\n                for (let i = 0; i < nodes.length; i++) {\r\n                    if (2*indices[i]+1 < this.heap.length) {\r\n                        nodes[i].left = new BinaryTreeNode(this.heap[2*indices[i]+1]);\r\n                        newNodes.push(nodes[i].left);\r\n                        newIndices.push(2*indices[i]+1);\r\n                    }\r\n                    if (2*indices[i]+2 < this.heap.length) {\r\n                        nodes[i].right = new BinaryTreeNode(this.heap[2*indices[i]+2]);\r\n                        newNodes.push(nodes[i].right);\r\n                        newIndices.push(2*indices[i]+2);\r\n                    }\r\n                }\r\n                nodes = newNodes;\r\n                newNodes = [];\r\n                indices = newIndices;\r\n                newIndices = [];\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n}\r\n\r\n//main react component for binary heap visualization\r\nconst BinaryHeap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const speedSlider = useRef();\r\n    const interval = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random heap\r\n    const randomHeap = () => {\r\n        const elements = randInt(2,32);\r\n        var newHeap = new BinaryHeapClass();\r\n        for (let i = 0; i < elements; i++)\r\n            newHeap.insert(randInt(-999,1000));\r\n        setHeap(newHeap);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the tree to a random binary heap\r\n    useEffect(randomHeap, []);\r\n\r\n    //function to insert a value into the heap\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        heap.insert(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove a value from the heap\r\n    const remove = () => {\r\n\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        clearInterval(interval.current);\r\n        interval.current = setInterval(() => {\r\n            \r\n            forceUpdate();\r\n        }, 1000 - speedSlider.current.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-heap\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHeap}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={heap.getTree()} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryHeap;"]},"metadata":{},"sourceType":"module"}