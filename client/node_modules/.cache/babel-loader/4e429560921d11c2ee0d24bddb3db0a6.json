{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\QuickSort\\\\QuickSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './QuickSort.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuickSortDisplay = props => {\n  return props.array.map((value, index) => {\n    if (index === props.pivot.current) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"purple\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 20\n    }, this);\n    if (index === props.low.current && index === props.high.current) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      border: \"bordered\",\n      color: \"yellow\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 20\n    }, this);\n    if (index === props.low.current) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      border: \"bordered\",\n      color: \"pink\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 20\n    }, this);\n    if (index === props.high.current) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      border: \"bordered\",\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 20\n    }, this);\n    if (props.sortedElements.current.includes(index)) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 20\n    }, this);else return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }, this);\n  });\n};\n\n_c = QuickSortDisplay;\n\nconst QuickSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [array, setArray] = useState([]);\n  const interval = useRef(null);\n  const sorting = useRef(false);\n  const [sorted, setSorted] = useState(false);\n  const toggleSortingButton = useRef();\n  const generateArrayButton = useRef();\n  const arraySizeInput = useRef();\n  const speedSlider = useRef();\n  const sortedElements = useRef([]);\n  const worklist = useRef([]);\n  const low = useRef(-1);\n  const high = useRef(-1);\n  const pivot = useRef(-1); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  };\n\n  function swap(arr, x, y) {\n    var temp = arr[x];\n    arr[x] = arr[y];\n    arr[y] = temp;\n  }\n\n  const sortingStep = () => {\n    if (sortedElements.current.length === array.length) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    }\n\n    if (array.length === 1) {\n      sortedElements.current.push(0);\n    }\n\n    if (pivot.current === -1) {\n      //initial step\n      if (sortedElements.current.length === 0) {\n        pivot.current = array.length - 1;\n        low.current = 0;\n        high.current = array.length - 2;\n      } else {\n        low.current = worklist.current.shift();\n        pivot.current = worklist.current.shift();\n        if (!sortedElements.current.includes(pivot.current - 1)) high.current = pivot.current - 1;\n\n        if (pivot.current === 0) {\n          sortedElements.current.push(pivot.current);\n          low.current = -1;\n          pivot.current = -1;\n          high.current = -1;\n        }\n      }\n    } else {\n      if (pivot.current === 0) {\n        sortedElements.current.push(pivot.current);\n      } else if (low.current > high.current) {\n        var toInsert = array[pivot.current];\n        array.splice(pivot.current, 1);\n        array.splice(low.current, 0, toInsert);\n        sortedElements.current.push(low.current); //worklist.current = worklist.current.map((value, index) => {\n        //    if (value > low.current) return value + 1;\n        //    else return;\n        //})\n\n        if (low.current !== 0) {\n          //find low partition\n          var temp = sortedElements.current.filter(n => n < low.current);\n\n          if (temp.length === 0) {\n            worklist.current.push(0);\n            worklist.current.push(low.current - 1);\n          } else {\n            if (Math.max(...temp) !== low.current - 1) {\n              worklist.current.push(Math.max(...temp) + 1);\n              worklist.current.push(low.current - 1);\n            }\n          }\n        } //find high bound\n\n\n        if (low.current !== array.length - 1) {\n          var temp = sortedElements.current.filter(n => n > low.current);\n\n          if (temp.length === 0) {\n            worklist.current.push(low.current + 1);\n            worklist.current.push(array.length - 1);\n          } else {\n            if (Math.min(...temp) !== low.current + 1) {\n              worklist.current.push(low.current + 1);\n              worklist.current.push(Math.min(...temp) - 1);\n            }\n          }\n        }\n\n        low.current = -1;\n        pivot.current = -1;\n        high.current = -1;\n      } else if (array[low.current] > array[pivot.current]) {\n        if (array[high.current] < array[pivot.current]) {\n          swap(array, low.current, high.current);\n        } else high.current--;\n      } else low.current++;\n    }\n  }; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n      toggleSortingButton.current.classList.remove(\"greenButton\");\n      toggleSortingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //sets state array to a random array for sorting\n\n\n  const generateArray = () => {\n    if (sorting.current) {\n      toggleSorting();\n    }\n\n    var size = parseInt(arraySizeInput.current.value);\n    if (isNaN(size)) size = randInt(5, 50);\n\n    if (size > 0) {\n      setArray(randomArray(size));\n      setSorted(false);\n      pivot.current = -1;\n      low.current = -1;\n      high.current = -1;\n      sortedElements.current = [];\n    }\n\n    arraySizeInput.current.value = null;\n  }; //generates a random array within reasonable bounds\n\n\n  const randomArray = useCallback(size => {\n    var newArray = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      newArray[i] = randInt(-999, 1000);\n    }\n\n    return newArray;\n  }, []);\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the array randomly at start\n\n\n  useEffect(() => {\n    setArray(randomArray(randInt(5, 50)));\n  }, [randomArray]); //changes the animation speed of sorting when the slider changes\n\n  const updateSpeed = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quick-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          ref: generateArrayButton,\n          onClick: generateArray,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Array Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"arraySizeInput\",\n            ref: arraySizeInput,\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"toggleSortingButton\",\n          className: \"greenButton\",\n          ref: toggleSortingButton,\n          onClick: toggleSorting,\n          children: \"Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: /*#__PURE__*/_jsxDEV(QuickSortDisplay, {\n          array: array,\n          low: low,\n          high: high,\n          pivot: pivot,\n          sortedElements: sortedElements\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Sorted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Unsorted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\",\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Low\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\",\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current High\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"purple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Pivot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuickSort, \"2HzPrkrwaOEL8lkbszaxYcccwg0=\");\n\n_c2 = QuickSort;\nexport default QuickSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuickSortDisplay\");\n$RefreshReg$(_c2, \"QuickSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/QuickSort/QuickSort.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","QuickSortDisplay","props","array","map","value","index","pivot","current","low","high","sortedElements","includes","QuickSort","forceRender","setArray","interval","sorting","sorted","setSorted","toggleSortingButton","generateArrayButton","arraySizeInput","speedSlider","worklist","forceUpdate","renders","swap","arr","x","y","temp","sortingStep","length","clearInterval","innerHTML","classList","remove","add","push","shift","toInsert","splice","filter","n","Math","max","min","toggleSorting","setInterval","generateArray","size","parseInt","isNaN","randInt","randomArray","newArray","Array","i","floor","random","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './QuickSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst QuickSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.pivot.current)\r\n            return <Element key={index} value={value} color=\"purple\" />\r\n        if (index === props.low.current && index === props.high.current)\r\n            return <Element key={index} value={value} border=\"bordered\" color=\"yellow\" />\r\n        if (index === props.low.current)\r\n            return <Element key={index} value={value} border=\"bordered\" color=\"pink\" />\r\n        if (index === props.high.current)\r\n            return <Element key={index} value={value} border=\"bordered\" color=\"green\" />\r\n        if (props.sortedElements.current.includes(index))\r\n            return <Element key={index} value={value} color=\"green\" />\r\n        else return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\n\r\nconst QuickSort = () => {\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const interval = useRef(null);\r\n    const sorting = useRef(false);\r\n    const [sorted, setSorted] = useState(false);\r\n    const toggleSortingButton = useRef();\r\n    const generateArrayButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    const sortedElements = useRef([]);\r\n    const worklist = useRef([]);\r\n    const low = useRef(-1);\r\n    const high = useRef(-1);\r\n    const pivot = useRef(-1);\r\n\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    function swap(arr, x, y) {\r\n        var temp = arr[x];\r\n        arr[x] = arr[y];\r\n        arr[y] = temp;\r\n    }\r\n\r\n    const sortingStep = () => {\r\n        if (sortedElements.current.length === array.length) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        }\r\n\r\n        \r\n        if (array.length === 1) {\r\n            sortedElements.current.push(0);\r\n        }\r\n        if (pivot.current === -1) {\r\n            //initial step\r\n            if (sortedElements.current.length === 0) {\r\n                pivot.current = array.length - 1;\r\n                low.current = 0;\r\n                high.current = array.length - 2;\r\n            }\r\n            else {\r\n                low.current = worklist.current.shift();\r\n                pivot.current = worklist.current.shift();\r\n                if (!sortedElements.current.includes(pivot.current - 1)) high.current = pivot.current - 1;\r\n\r\n                if (pivot.current === 0) {\r\n                    sortedElements.current.push(pivot.current);\r\n                    low.current = -1;\r\n                    pivot.current = -1;\r\n                    high.current = -1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (pivot.current === 0) {\r\n                sortedElements.current.push(pivot.current);\r\n            }\r\n            else if (low.current > high.current) {\r\n                var toInsert = array[pivot.current];\r\n                array.splice(pivot.current, 1);\r\n                array.splice(low.current, 0, toInsert);\r\n                sortedElements.current.push(low.current);\r\n                //worklist.current = worklist.current.map((value, index) => {\r\n                //    if (value > low.current) return value + 1;\r\n                //    else return;\r\n                //})\r\n\r\n                if (low.current !== 0) {\r\n                    //find low partition\r\n                    var temp = sortedElements.current.filter(n => n < low.current);\r\n                    \r\n                    if (temp.length === 0) {\r\n\r\n\r\n                        \r\n                        worklist.current.push(0);\r\n                        worklist.current.push(low.current - 1);\r\n                    }\r\n                    else {\r\n                        if (Math.max(...temp) !== low.current - 1) {\r\n                            worklist.current.push(Math.max(...temp) + 1);\r\n                            worklist.current.push(low.current - 1);\r\n                        }\r\n                    }\r\n                }\r\n                //find high bound\r\n                if (low.current !== array.length - 1) {\r\n                    var temp = sortedElements.current.filter(n => n > low.current);\r\n                    if (temp.length === 0) {\r\n                        worklist.current.push(low.current + 1);\r\n                        worklist.current.push(array.length - 1);\r\n                    }\r\n                    else {\r\n                        if (Math.min(...temp) !== low.current + 1) {\r\n                            worklist.current.push(low.current + 1);\r\n                            worklist.current.push(Math.min(...temp) - 1);\r\n                        }\r\n                    }\r\n\r\n                    \r\n                }\r\n\r\n                low.current = -1;\r\n                pivot.current = -1;\r\n                high.current = -1;\r\n\r\n            }\r\n            else if (array[low.current] > array[pivot.current]) {\r\n                if (array[high.current] < array[pivot.current]) {\r\n                    swap(array, low.current, high.current);\r\n                }\r\n                else high.current--;\r\n            }\r\n            else low.current++;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if (isNaN(size))\r\n            size = randInt(5, 50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n\r\n            pivot.current = -1;\r\n            low.current = -1;\r\n            high.current = -1;\r\n            sortedElements.current = [];\r\n            \r\n        }\r\n        \r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            newArray[i] = randInt(-999, 1000);\r\n        }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5, 50)));\r\n    }, [randomArray]);\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"quick-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" ref={generateArrayButton} onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <QuickSortDisplay array={array} low={low} high={high} pivot={pivot} sortedElements={sortedElements} />\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element color=\"pink\" border=\"bordered\"></Element>\r\n                <p>= Current Low</p>\r\n                <br />\r\n                <Element color=\"green\" border=\"bordered\"></Element>\r\n                <p>= Current High</p>\r\n                <br />\r\n                <Element color=\"purple\" ></Element>\r\n                <p>= Pivot</p>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\n\r\n\r\n\r\nexport default QuickSort;"]},"metadata":{},"sourceType":"module"}