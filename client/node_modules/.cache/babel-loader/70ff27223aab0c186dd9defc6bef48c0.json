{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\BinaryTree\\\\BinaryTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './BinaryTree.scss';\nimport Element from '../Element/Element'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary tree data structure\n\n\nclass BinaryTreeClass {\n  constructor(root) {\n    this.root = root;\n  }\n\n} //react component for a single level in a binary tree\n\n\nconst BinaryTreeLevel = props => {\n  return props.list.map((node, index) => {\n    if (node === null) return /*#__PURE__*/_jsxDEV(Element, {\n      value: \"\",\n      color: \"none\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 20\n    }, this);else return /*#__PURE__*/_jsxDEV(Element, {\n      value: node.value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 20\n    }, this);\n  });\n}; //react component for lines between binary tree nodes\n\n\n_c = BinaryTreeLevel;\n\nconst BinaryTreeLinesLevel = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-tree-line-level\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"binary-tree-line-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 57\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"binary-tree-line-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 57\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}; //react component to display the tree\n\n\n_c2 = BinaryTreeLinesLevel;\n\nconst BinaryTreeDisplay = props => {\n  var levelComponents = [];\n  var nextQueue = [props.tree.root];\n  var currQueue = [];\n\n  while (true) {\n    //break loop if entire level is null\n    var allNull = true;\n\n    for (let i = 0; i < nextQueue.length; i++) {\n      if (nextQueue[i] !== null) {\n        allNull = false;\n      }\n    }\n\n    if (allNull) {\n      break;\n    } //continue breadth-first traversal creating BinaryTreeLevel component every iteration\n\n\n    currQueue = nextQueue;\n    nextQueue = [];\n\n    for (let i = 0; i < currQueue.length; i++) {\n      //use null as placeholder empty nodes in a level\n      if (currQueue[i] === null) {\n        nextQueue.push(null);\n        nextQueue.push(null);\n      } else {\n        nextQueue.push(currQueue[i].left);\n        nextQueue.push(currQueue[i].right);\n      }\n    }\n\n    levelComponents.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-level\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeLevel, {\n        list: currQueue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, levelComponents.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this));\n  }\n\n  return levelComponents;\n};\n\n_c3 = BinaryTreeDisplay;\nvar exampleTree = new BinaryTreeClass(new BinaryTreeNode(10));\nexampleTree.root.left = new BinaryTreeNode(7);\nexampleTree.root.right = new BinaryTreeNode(-3);\nexampleTree.root.left.left = new BinaryTreeNode(13);\nexampleTree.root.left.right = new BinaryTreeNode(27);\nexampleTree.root.right.left = new BinaryTreeNode(-42);\nexampleTree.root.right.right = new BinaryTreeNode(0);\nexampleTree.root.right.left.right = new BinaryTreeNode(18);\nexampleTree.root.left.right.right = new BinaryTreeNode(-36);\nexampleTree.root.left.right.left = new BinaryTreeNode(2);\nexampleTree.root.left.left.left = new BinaryTreeNode(-5);\nexampleTree.root.right.right.right = new BinaryTreeNode(-17); //main react component for binary tree\n\nconst BinaryTree = () => {\n  _s();\n\n  const [tree] = useState(exampleTree);\n  const [, forceRender] = useState(0); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: [/*#__PURE__*/_jsxDEV(BinaryTreeLinesLevel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryTree, \"6XbDkbeKh0c2OWDtmq3WkG+cc58=\");\n\n_c4 = BinaryTree;\nexport default BinaryTree;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"BinaryTreeLevel\");\n$RefreshReg$(_c2, \"BinaryTreeLinesLevel\");\n$RefreshReg$(_c3, \"BinaryTreeDisplay\");\n$RefreshReg$(_c4, \"BinaryTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/BinaryTree/BinaryTree.js"],"names":["React","useState","Element","BinaryTreeNode","constructor","value","left","right","BinaryTreeClass","root","BinaryTreeLevel","props","list","map","node","index","BinaryTreeLinesLevel","BinaryTreeDisplay","levelComponents","nextQueue","tree","currQueue","allNull","i","length","push","exampleTree","BinaryTree","forceRender","forceUpdate","renders"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './BinaryTree.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nclass BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//react component for a single level in a binary tree\r\nconst BinaryTreeLevel = (props) => {\r\n    return props.list.map((node, index) => {\r\n        if (node === null)\r\n            return <Element key={index} value={\"\"} color={\"none\"} />;\r\n        else\r\n            return <Element key={index} value={node.value} />;\r\n    });\r\n}\r\n\r\n//react component for lines between binary tree nodes\r\nconst BinaryTreeLinesLevel = (props) => {\r\n    return (\r\n        <div className=\"binary-tree-line-level\">\r\n            <div className=\"binary-tree-line-container\"><div className=\"binary-tree-line-left\"></div></div>\r\n            <div className=\"binary-tree-line-container\"><div className=\"binary-tree-line-right\"></div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\n//react component to display the tree\r\nconst BinaryTreeDisplay = (props) => {\r\n    var levelComponents = [];\r\n    var nextQueue = [props.tree.root];\r\n    var currQueue = [];\r\n    while (true) {\r\n        //break loop if entire level is null\r\n        var allNull = true;\r\n        for (let i = 0; i < nextQueue.length; i++) {\r\n            if (nextQueue[i] !== null) {\r\n                allNull = false;\r\n            }\r\n        }\r\n        if (allNull) {\r\n            break;\r\n        }\r\n        //continue breadth-first traversal creating BinaryTreeLevel component every iteration\r\n        currQueue = nextQueue;\r\n        nextQueue = [];\r\n        for (let i = 0; i < currQueue.length; i++) {\r\n            //use null as placeholder empty nodes in a level\r\n            if (currQueue[i] === null) {\r\n                nextQueue.push(null);\r\n                nextQueue.push(null);\r\n            } else {\r\n                nextQueue.push(currQueue[i].left);\r\n                nextQueue.push(currQueue[i].right);\r\n            }\r\n        }\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-level\">\r\n                <BinaryTreeLevel list={currQueue} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return levelComponents;\r\n}\r\n\r\nvar exampleTree = new BinaryTreeClass(new BinaryTreeNode(10));\r\nexampleTree.root.left = new BinaryTreeNode(7);\r\nexampleTree.root.right = new BinaryTreeNode(-3);\r\nexampleTree.root.left.left = new BinaryTreeNode(13);\r\nexampleTree.root.left.right = new BinaryTreeNode(27);\r\nexampleTree.root.right.left = new BinaryTreeNode(-42);\r\nexampleTree.root.right.right = new BinaryTreeNode(0);\r\nexampleTree.root.right.left.right = new BinaryTreeNode(18);\r\nexampleTree.root.left.right.right = new BinaryTreeNode(-36);\r\nexampleTree.root.left.right.left = new BinaryTreeNode(2);\r\nexampleTree.root.left.left.left = new BinaryTreeNode(-5);\r\nexampleTree.root.right.right.right = new BinaryTreeNode(-17);\r\n\r\n//main react component for binary tree\r\nconst BinaryTree = () => {\r\n\r\n    const [tree, ] = useState(exampleTree);\r\n    const [, forceRender] = useState(0);\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-tree\">\r\n            <div className=\"controls\">\r\n                <button></button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeLinesLevel />\r\n                <BinaryTreeDisplay tree={tree} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}