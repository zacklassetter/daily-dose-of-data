{"ast":null,"code":"import _slicedToArray from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,useEffect,useCallback}from'react';import'./MergeSort.scss';import Element from'../Element/Element';//react component to display merge sort arrays\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MergeSortDisplay=function MergeSortDisplay(props){var componentList=[];for(var i=0;i<props.mergedArrays.length;i++){var array1=props.arrays[2*i];var array2=[];if(2*i+1<props.arrays.length)array2=props.arrays[2*i+1];componentList.push(/*#__PURE__*/_jsx(MergeSortDisplayRow,{array1:array1,array2:array2,mergedArray:props.mergedArrays[i]},componentList.length));componentList.push(/*#__PURE__*/_jsx(\"hr\",{},componentList.length));}componentList.pop();return componentList;};//react component to display a merge sort row consisting of 2 arrays, and the array it is merging into\nvar MergeSortDisplayRow=function MergeSortDisplayRow(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"merge-sort-display-row\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(MergeSortDisplayRowHelper1,{array1:props.array1,array2:props.array2})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(MergeSortDisplayRowHelper2,{array:props.mergedArray})})]});};var MergeSortDisplayRowHelper1=function MergeSortDisplayRowHelper1(props){var componentList=[];for(var i=0;i<props.array1.length;i++){if(i===props.array1.length-1)componentList.push(/*#__PURE__*/_jsx(Element,{value:props.array1[i],border:\"bordered\"},componentList.length));else componentList.push(/*#__PURE__*/_jsx(Element,{value:props.array1[i]},componentList.length));}if(props.array1.length===0)componentList.push(/*#__PURE__*/_jsx(Element,{color:\"none\"},componentList.length));componentList.push(/*#__PURE__*/_jsx(\"br\",{},componentList.length));for(var _i=0;_i<props.array2.length;_i++){if(_i===props.array2.length-1)componentList.push(/*#__PURE__*/_jsx(Element,{value:props.array2[_i],border:\"bordered\"},componentList.length));else componentList.push(/*#__PURE__*/_jsx(Element,{value:props.array2[_i]},componentList.length));}if(props.array2.length===0)componentList.push(/*#__PURE__*/_jsx(Element,{color:\"none\"},componentList.length));return componentList;};var MergeSortDisplayRowHelper2=function MergeSortDisplayRowHelper2(props){var componentList=[];componentList.push(/*#__PURE__*/_jsx(\"p\",{className:\"arrow\",children:\"\\u2192\"},0));for(var i=0;i<props.array.length;i++){if(props.array[i]!==null)componentList.push(/*#__PURE__*/_jsx(Element,{color:\"green\",value:props.array[i]},componentList.length));}return componentList;};//react component for merge sort\nvar MergeSort=function MergeSort(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var arrays=useRef([[]]);var mergedArrays=useRef([[]]);var mergedArraysCurrs=useRef([]);var mergeRowIndex=useRef(0);var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),sorted=_useState4[0],setSorted=_useState4[1];var sorting=useRef(false);var interval=useRef(null);var arraySizeInput=useRef();var toggleSortingButton=useRef();var speedSlider=useRef();//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//sets state array to a random array for sorting\nvar generateArrays=function generateArrays(){if(sorting.current){toggleSorting();}var size=parseInt(arraySizeInput.current.value);if(isNaN(size))size=randInt(5,20);if(size>0){arrays.current=randomArrays(size);initializeMergedArrays();forceUpdate();setSorted(false);}arraySizeInput.current.value=null;};//generates a random array within reasonable bounds\nvar randomArrays=useCallback(function(size){var newArrays=new Array(size);for(var i=0;i<size;i++){newArrays[i]=[randInt(-999,1000)];}return newArrays;},[]);var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//initialize the arrays randomly\nuseEffect(function(){arrays.current=randomArrays(randInt(5,20));initializeMergedArrays();forceUpdate();},[randomArrays]);//function to initialize list of empty arrays to be merged into\nvar initializeMergedArrays=function initializeMergedArrays(){mergedArrays.current=[];mergedArraysCurrs.current=[];mergeRowIndex.current=0;var length=Math.ceil(arrays.current.length/2);for(var i=0;i<length;i++){mergedArrays.current.push([]);if(2*i+1<arrays.current.length){for(var j=0;j<arrays.current[2*i].length+arrays.current[2*i+1].length;j++){mergedArrays.current[i].push(null);}mergedArraysCurrs.current.push(arrays.current[2*i].length+arrays.current[2*i+1].length-1);}else{for(var _j=0;_j<arrays.current[2*i].length;_j++){mergedArrays.current[i].push(null);}mergedArraysCurrs.current.push(arrays.current[2*i].length-1);}}};//function to do a single step of merge sorting\nvar sortingStep=function sortingStep(){//get the two arrays we are currently merging\nvar array1=arrays.current[2*mergeRowIndex.current];var array2=[];if(2*mergeRowIndex.current+1<arrays.current.length)array2=arrays.current[2*mergeRowIndex.current+1];//if both arrays are empty increase the current mergeRowIndex\nif(array1.length===0&&array2.length===0)mergeRowIndex.current++;//if done with merging all rows then move mergedArrays into main arrays\nif(mergeRowIndex.current>mergedArrays.current.length-1){if(mergedArrays.current.length===1){setSorted(true);clearInterval(interval.current);sorting.current=false;toggleSortingButton.current.innerHTML=\"Sort\";toggleSortingButton.current.classList.remove(\"pinkButton\");toggleSortingButton.current.classList.add(\"greenButton\");return;}arrays.current=mergedArrays.current;initializeMergedArrays();return;}//get the two arrays we are currently merging\narray1=arrays.current[2*mergeRowIndex.current];array2=[];if(2*mergeRowIndex.current+1<arrays.current.length)array2=arrays.current[2*mergeRowIndex.current+1];//if either array is empty concatenate the other to the merged array\nif(array1.length===0){for(var i=array2.length-1;i>=0;i--){mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]]=array2[i];mergedArraysCurrs.current[mergeRowIndex.current]--;}arrays.current[2*mergeRowIndex.current+1]=[];}else if(array2.length===0){for(var _i2=array1.length-1;_i2>=0;_i2--){mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]]=array1[_i2];mergedArraysCurrs.current[mergeRowIndex.current]--;}arrays.current[2*mergeRowIndex.current]=[];//add the max of the last elements to the merged array\n}else{if(array1[array1.length-1]>=array2[array2.length-1]){mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]]=array1[array1.length-1];mergedArraysCurrs.current[mergeRowIndex.current]--;arrays.current[2*mergeRowIndex.current].pop();}else{mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]]=array2[array2.length-1];mergedArraysCurrs.current[mergeRowIndex.current]--;arrays.current[2*mergeRowIndex.current+1].pop();}}};//function to turn sorting on and off by button click\nvar toggleSorting=function toggleSorting(){if(sorting.current){clearInterval(interval.current);sorting.current=false;toggleSortingButton.current.innerHTML=\"Sort\";toggleSortingButton.current.classList.remove(\"pinkButton\");toggleSortingButton.current.classList.add(\"greenButton\");}else if(!sorted){interval.current=setInterval(function(){sortingStep();forceUpdate();},1000-speedSlider.current.value);sorting.current=true;toggleSortingButton.current.innerHTML=\"Stop\";toggleSortingButton.current.classList.remove(\"greenButton\");toggleSortingButton.current.classList.add(\"pinkButton\");}};//changes the animation speed of sorting when the slider changes\nvar updateSpeed=function updateSpeed(){if(sorting.current){clearInterval(interval.current);interval.current=setInterval(function(){sortingStep();forceUpdate();},1000-speedSlider.current.value);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"merge-sort\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:generateArrays,children:\"Random\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledInput\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Array Size\"}),/*#__PURE__*/_jsx(\"input\",{id:\"arraySizeInput\",ref:arraySizeInput,type:\"text\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{ref:toggleSortingButton,className:\"greenButton\",onClick:toggleSorting,children:\"Sort\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledSlider\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Animation Speed\"}),/*#__PURE__*/_jsx(\"input\",{className:\"slider\",ref:speedSlider,onChange:updateSpeed,min:\"0\",max:\"990\",type:\"range\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization\",children:/*#__PURE__*/_jsx(MergeSortDisplay,{arrays:arrays.current,mergedArrays:mergedArrays.current})})]});};export default MergeSort;","map":{"version":3,"sources":["C:/Users/quint/Documents/Daily_Dose_of_Data/client/src/MergeSort/MergeSort.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","MergeSortDisplay","props","componentList","i","mergedArrays","length","array1","arrays","array2","push","pop","MergeSortDisplayRow","mergedArray","MergeSortDisplayRowHelper1","MergeSortDisplayRowHelper2","array","MergeSort","forceRender","mergedArraysCurrs","mergeRowIndex","sorted","setSorted","sorting","interval","arraySizeInput","toggleSortingButton","speedSlider","forceUpdate","renders","generateArrays","current","toggleSorting","size","parseInt","value","isNaN","randInt","randomArrays","initializeMergedArrays","newArrays","Array","min","max","Math","floor","random","ceil","j","sortingStep","clearInterval","innerHTML","classList","remove","add","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './MergeSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display merge sort arrays\r\nconst MergeSortDisplay = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.mergedArrays.length; i++) {\r\n        var array1 = props.arrays[2*i];\r\n        var array2 = [];\r\n        if (2*i+1 < props.arrays.length)\r\n            array2 = props.arrays[2*i+1];\r\n        componentList.push(<MergeSortDisplayRow key={componentList.length} array1={array1} array2={array2} mergedArray={props.mergedArrays[i]} />);\r\n        componentList.push(<hr key={componentList.length} />);\r\n    }\r\n    componentList.pop();\r\n    return componentList;\r\n}\r\n\r\n//react component to display a merge sort row consisting of 2 arrays, and the array it is merging into\r\nconst MergeSortDisplayRow = (props) => {\r\n    return (\r\n        <div className=\"merge-sort-display-row\">\r\n            <div>\r\n                <MergeSortDisplayRowHelper1 array1={props.array1} array2={props.array2} />\r\n            </div>\r\n            <div>\r\n                <MergeSortDisplayRowHelper2 array={props.mergedArray} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst MergeSortDisplayRowHelper1 = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.array1.length; i++) {\r\n        if (i === props.array1.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array1[i]} />);\r\n    }\r\n    if (props.array1.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    componentList.push(<br key={componentList.length} />);\r\n    for (let i = 0; i < props.array2.length; i++) {\r\n        if (i === props.array2.length-1)\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} border=\"bordered\" />);\r\n        else\r\n            componentList.push(<Element key={componentList.length} value={props.array2[i]} />);\r\n    }\r\n    if (props.array2.length === 0)\r\n        componentList.push(<Element key={componentList.length} color=\"none\" />);\r\n    return componentList;\r\n}\r\nconst MergeSortDisplayRowHelper2 = (props) => {\r\n    var componentList = [];\r\n    componentList.push(<p className=\"arrow\" key={0}>&#x2192;</p>);\r\n    for (let i = 0; i < props.array.length; i++)\r\n        if (props.array[i] !== null)\r\n            componentList.push(<Element key={componentList.length} color=\"green\" value={props.array[i]} />);\r\n    return componentList;\r\n}\r\n\r\n//react component for merge sort\r\nconst MergeSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const arrays = useRef([[]]);\r\n    const mergedArrays = useRef([[]]);\r\n    const mergedArraysCurrs = useRef([]);\r\n    const mergeRowIndex = useRef(0);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const arraySizeInput = useRef();\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArrays = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,20);\r\n        if (size > 0) {\r\n            arrays.current = randomArrays(size);\r\n            initializeMergedArrays();\r\n            forceUpdate();\r\n            setSorted(false);\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArrays = useCallback((size) => {\r\n        var newArrays = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArrays[i] = [randInt(-999, 1000)];\r\n            }\r\n        return newArrays;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the arrays randomly\r\n    useEffect(() => {\r\n        arrays.current = randomArrays(randInt(5,20));\r\n        initializeMergedArrays();\r\n        forceUpdate();\r\n    }, [randomArrays]);\r\n\r\n    //function to initialize list of empty arrays to be merged into\r\n    const initializeMergedArrays = () => {\r\n        mergedArrays.current = [];\r\n        mergedArraysCurrs.current = [];\r\n        mergeRowIndex.current = 0;\r\n        const length = Math.ceil(arrays.current.length/2);\r\n        for (let i = 0; i < length; i++) {\r\n            mergedArrays.current.push([]);\r\n            if (2*i+1 < arrays.current.length) {\r\n                for (let j = 0; j < arrays.current[2*i].length+arrays.current[2*i+1].length; j++)\r\n                    mergedArrays.current[i].push(null);\r\n                mergedArraysCurrs.current.push(arrays.current[2*i].length+arrays.current[2*i+1].length-1);\r\n            } else {\r\n                for (let j = 0; j < arrays.current[2*i].length; j++)\r\n                    mergedArrays.current[i].push(null);\r\n                mergedArraysCurrs.current.push(arrays.current[2*i].length-1);\r\n            }\r\n        }\r\n    }\r\n\r\n    //function to do a single step of merge sorting\r\n    const sortingStep = () => {\r\n        //get the two arrays we are currently merging\r\n        var array1 = arrays.current[2 * mergeRowIndex.current];\r\n        var array2 = [];\r\n        if (2 * mergeRowIndex.current + 1 < arrays.current.length)\r\n            array2 = arrays.current[2 * mergeRowIndex.current + 1];\r\n        //if both arrays are empty increase the current mergeRowIndex\r\n        if (array1.length === 0 && array2.length === 0)\r\n            mergeRowIndex.current++;\r\n            //if done with merging all rows then move mergedArrays into main arrays\r\n            if (mergeRowIndex.current > mergedArrays.current.length-1) {\r\n                if (mergedArrays.current.length === 1) {\r\n                    setSorted(true);\r\n                    clearInterval(interval.current);\r\n                    sorting.current = false;\r\n                    toggleSortingButton.current.innerHTML = \"Sort\";\r\n                    toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n                    toggleSortingButton.current.classList.add(\"greenButton\");\r\n                    return;\r\n                }\r\n                arrays.current = mergedArrays.current;\r\n                initializeMergedArrays();\r\n                return;\r\n            }\r\n            //get the two arrays we are currently merging\r\n            array1 = arrays.current[2 * mergeRowIndex.current];\r\n            array2 = [];\r\n            if (2 * mergeRowIndex.current + 1 < arrays.current.length)\r\n                array2 = arrays.current[2 * mergeRowIndex.current + 1];\r\n            //if either array is empty concatenate the other to the merged array\r\n            if (array1.length === 0) {\r\n                for (let i = array2.length-1; i >= 0; i--) {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array2[i];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                }\r\n                arrays.current[2*mergeRowIndex.current+1] = [];\r\n            } else if (array2.length === 0) {\r\n                for (let i = array1.length-1; i >= 0; i--) {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array1[i];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                }\r\n                arrays.current[2*mergeRowIndex.current] = [];\r\n            //add the max of the last elements to the merged array\r\n            } else {\r\n                if (array1[array1.length-1] >= array2[array2.length-1]) {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array1[array1.length-1];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                    arrays.current[2*mergeRowIndex.current].pop();\r\n                } else {\r\n                    mergedArrays.current[mergeRowIndex.current][mergedArraysCurrs.current[mergeRowIndex.current]] = array2[array2.length-1];\r\n                    mergedArraysCurrs.current[mergeRowIndex.current]--;\r\n                    arrays.current[2*mergeRowIndex.current+1].pop();\r\n                }\r\n            }\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"merge-sort\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={generateArrays}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Array Size</label>\r\n                    <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button ref={toggleSortingButton} className=\"greenButton\" onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <MergeSortDisplay arrays={arrays.current} mergedArrays={mergedArrays.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}