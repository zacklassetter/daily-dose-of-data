{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinaryHeap\\\\BinaryHeap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './BinaryHeap.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary tree data structure\n\n\nclass BinaryTreeClass {\n  constructor(root) {\n    this.root = root;\n  }\n\n} //class for binary heap data structure\n\n\nclass BinaryHeapClass {\n  constructor() {\n    this.heap = [];\n  }\n\n  insert(value) {\n    this.heap.push(value);\n    var current = this.heap.length - 1;\n    var parent = Math.floor((current - 1) / 2);\n\n    while (parent >= 0) {\n      if (this.heap[current] < this.heap[parent]) {\n        let temp = this.heap[parent];\n        this.heap[parent] = this.heap[current];\n        this.heap[current] = temp;\n        current = parent;\n        parent = Math.floor((current - 1) / 2);\n      } else break;\n    }\n  }\n\n  remove() {\n    if (this.heap.length !== 0) {\n      if (this.heap.length === 1) this.heap = [];else {\n        this.heap[0] = this.heap.pop();\n        var current = 0;\n\n        while (current < this.heap.length) {\n          if (2 * current + 2 < this.heap.length) {\n            if (this.heap[current] <= this.heap[2 * current + 1] && this.heap[current] <= this.heap[2 * current + 2]) {\n              break;\n            } else if (this.heap[2 * current + 1] < this.heap[2 * current + 2]) {\n              let temp = this.heap[current];\n              this.heap[current] = this.heap[2 * current + 1];\n              this.heap[2 * current + 1] = temp;\n              current = 2 * current + 1;\n            } else {\n              let temp = this.heap[current];\n              this.heap[current] = this.heap[2 * current + 2];\n              this.heap[2 * current + 2] = temp;\n              current = 2 * current + 2;\n            }\n          } else if (2 * current + 1 < this.heap.length) {\n            if (this.heap[current] > this.heap[2 * current + 1]) {\n              let temp = this.heap[current];\n              this.heap[current] = this.heap[2 * current + 1];\n              this.heap[2 * current + 1] = temp;\n              current = 2 * current + 1;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  getTree() {\n    var tree = new BinaryTreeClass(null);\n\n    if (this.heap.length !== 0) {\n      tree.root = new BinaryTreeNode(this.heap[0]);\n      var nodes = [tree.root];\n      var newNodes = [];\n      var indices = [0];\n      var newIndices = [];\n\n      while (nodes.length !== 0) {\n        for (let i = 0; i < nodes.length; i++) {\n          if (2 * indices[i] + 1 < this.heap.length) {\n            nodes[i].left = new BinaryTreeNode(this.heap[2 * indices[i] + 1]);\n            newNodes.push(nodes[i].left);\n            newIndices.push(2 * indices[i] + 1);\n          }\n\n          if (2 * indices[i] + 2 < this.heap.length) {\n            nodes[i].right = new BinaryTreeNode(this.heap[2 * indices[i] + 2]);\n            newNodes.push(nodes[i].right);\n            newIndices.push(2 * indices[i] + 2);\n          }\n        }\n\n        nodes = newNodes;\n        newNodes = [];\n        indices = newIndices;\n        newIndices = [];\n      }\n    }\n\n    return tree;\n  }\n\n} //main react component for binary heap visualization\n\n\nconst BinaryHeap = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [heap, setHeap] = useState(new BinaryHeapClass());\n  const insertInput = useRef();\n  const speedSlider = useRef();\n  const interval = useRef();\n  const animating = useRef();\n  const animationFunction = useRef();\n  const animationValue = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random heap\n\n\n  const randomHeap = () => {\n    if (animating.current) toggleAnimation();\n    const elements = randInt(2, 32);\n    var newHeap = new BinaryHeapClass();\n\n    for (let i = 0; i < elements; i++) newHeap.insert(randInt(-999, 1000));\n\n    setHeap(newHeap);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to pause or continue animation\n\n\n  const toggleAnimation = useCallback(() => {\n    if (animating.current) {\n      clearInterval(interval.current);\n      animating.current = false;\n      animationFunction.current = null;\n      animationValue.current = null;\n    } else {\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      animating.current = true;\n    }\n  }, []); //initialize the tree to a random binary heap\n\n  useEffect(randomHeap, []); //function to insert a value into the heap\n\n  const insert = () => {\n    if (animating.current) toggleAnimation();\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    insertInput.current.value = null;\n    heap.heap.push(data);\n    forceUpdate();\n    animationFunction.current = insertStep;\n    animationValue.current = data;\n    toggleAnimation();\n  }; //function to do a single step of insertion animation\n\n\n  const insertStep = () => {}; //function to remove a value from the heap\n\n\n  const remove = () => {\n    heap.remove();\n    forceUpdate();\n  }; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    clearInterval(interval.current);\n    interval.current = setInterval(() => {\n      animationFunction.current();\n      forceUpdate();\n    }, 1000 - speedSlider.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-heap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomHeap,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: heap.getTree()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryHeap, \"Fcn+40MK+WzXjdDRoPZj5HyIWko=\");\n\n_c = BinaryHeap;\nexport default BinaryHeap;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryHeap\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinaryHeap/BinaryHeap.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","BinaryTreeNode","constructor","value","left","right","BinaryTreeClass","root","BinaryHeapClass","heap","insert","push","current","length","parent","Math","floor","temp","remove","pop","getTree","tree","nodes","newNodes","indices","newIndices","i","BinaryHeap","forceRender","setHeap","insertInput","speedSlider","interval","animating","animationFunction","animationValue","forceUpdate","renders","randomHeap","toggleAnimation","elements","randInt","newHeap","min","max","random","clearInterval","setInterval","data","parseInt","isNaN","insertStep","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinaryHeap.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nclass BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//class for binary heap data structure\r\nclass BinaryHeapClass {\r\n    constructor() {\r\n        this.heap = [];\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        var current = this.heap.length-1;\r\n        var parent = Math.floor((current-1)/2);\r\n        while(parent >= 0) {\r\n            if (this.heap[current] < this.heap[parent]) {\r\n                let temp = this.heap[parent];\r\n                this.heap[parent] = this.heap[current];\r\n                this.heap[current] = temp;\r\n                current = parent;\r\n                parent = Math.floor((current-1)/2);\r\n            } else\r\n                break;\r\n        }\r\n    }\r\n\r\n    remove() {\r\n        if (this.heap.length !== 0) {\r\n            if (this.heap.length === 1)\r\n                this.heap = [];\r\n            else {\r\n                this.heap[0] = this.heap.pop();\r\n                var current = 0;\r\n                while (current < this.heap.length) {\r\n                    if (2 * current + 2 < this.heap.length) {\r\n                        if (this.heap[current] <= this.heap[2 * current + 1] && this.heap[current] <= this.heap[2 * current + 2]) {\r\n                            break;\r\n                        } else if (this.heap[2 * current + 1] < this.heap[2 * current + 2]) {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 1];\r\n                            this.heap[2 * current + 1] = temp;\r\n                            current = 2 * current + 1;\r\n                        } else {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 2];\r\n                            this.heap[2 * current + 2] = temp;\r\n                            current = 2 * current + 2;\r\n                        }\r\n                    } else if (2 * current + 1 < this.heap.length) {\r\n                        if (this.heap[current] > this.heap[2 * current + 1]) {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 1];\r\n                            this.heap[2 * current + 1] = temp;\r\n                            current = 2 * current + 1;\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getTree() {\r\n        var tree = new BinaryTreeClass(null);\r\n        if (this.heap.length !== 0) {\r\n            tree.root = new BinaryTreeNode(this.heap[0]);\r\n            var nodes = [tree.root];\r\n            var newNodes = [];\r\n            var indices = [0];\r\n            var newIndices = [];\r\n            while (nodes.length !== 0) {\r\n                for (let i = 0; i < nodes.length; i++) {\r\n                    if (2*indices[i]+1 < this.heap.length) {\r\n                        nodes[i].left = new BinaryTreeNode(this.heap[2*indices[i]+1]);\r\n                        newNodes.push(nodes[i].left);\r\n                        newIndices.push(2*indices[i]+1);\r\n                    }\r\n                    if (2*indices[i]+2 < this.heap.length) {\r\n                        nodes[i].right = new BinaryTreeNode(this.heap[2*indices[i]+2]);\r\n                        newNodes.push(nodes[i].right);\r\n                        newIndices.push(2*indices[i]+2);\r\n                    }\r\n                }\r\n                nodes = newNodes;\r\n                newNodes = [];\r\n                indices = newIndices;\r\n                newIndices = [];\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n}\r\n\r\n//main react component for binary heap visualization\r\nconst BinaryHeap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const insertInput = useRef();\r\n    const speedSlider = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random heap\r\n    const randomHeap = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const elements = randInt(2,32);\r\n        var newHeap = new BinaryHeapClass();\r\n        for (let i = 0; i < elements; i++)\r\n            newHeap.insert(randInt(-999,1000));\r\n        setHeap(newHeap);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random binary heap\r\n    useEffect(randomHeap, []);\r\n\r\n    //function to insert a value into the heap\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        heap.heap.push(data);\r\n        forceUpdate();\r\n        animationFunction.current = insertStep;\r\n        animationValue.current = data;\r\n        toggleAnimation();\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n\r\n    }\r\n\r\n    //function to remove a value from the heap\r\n    const remove = () => {\r\n        heap.remove();\r\n        forceUpdate();\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        clearInterval(interval.current);\r\n        interval.current = setInterval(() => {\r\n            animationFunction.current();\r\n            forceUpdate();\r\n        }, 1000 - speedSlider.current.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-heap\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHeap}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={heap.getTree()} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryHeap;"]},"metadata":{},"sourceType":"module"}