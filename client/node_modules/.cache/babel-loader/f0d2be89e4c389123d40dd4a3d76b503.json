{"ast":null,"code":"import _slicedToArray from\"C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createClass from\"C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import React,{useState,useRef,useEffect,useCallback}from'react';import'./AvlTree.scss';import BinaryTreeDisplay from'../BinaryTree/BinaryTreeDisplay.js';import Element from'../Element/Element.js';//class for node in binary tree\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BinaryTreeNode=function BinaryTreeNode(value){_classCallCheck(this,BinaryTreeNode);this.value=value;this.left=null;this.right=null;};function getParent(node,tree){var parent=null;var cur=tree.root;if(node!=null){while(cur!==node){if(node.value>cur.value){parent=cur;cur=parent.right;}else{parent=cur;cur=parent.left;}}return parent;}else console.log(\"node is null, no parent\");}function getHeight(node){if(typeof node===\"object\"&&node!=null){if(getHeight(node.left)>getHeight(node.right)){return 1+getHeight(node.left);}else return 1+getHeight(node.right);}else return 0;}function getBalance(node){if(node!==null&&typeof node!=\"undefined\"){return getHeight(node.right)-getHeight(node.left);}}function rotateRight(node,tree){var newRoot=node.left;if(node===tree.root)tree.root=newRoot;var T2=newRoot.right;newRoot.right=node;node.left=T2;}function rotateLeft(node,tree){var newRoot=node.right;if(node===tree.root)tree.root=newRoot;var T2=newRoot.left;newRoot.left=node;node.right=T2;}function getLeftmost(node){var leftmost=node;if(leftmost!=null){while(leftmost.left!=null){leftmost=leftmost.left;}}return leftmost;}function getRightMost(node){var rightmost=node;if(rightmost!=null){while(rightmost.right!=null){rightmost=rightmost.right;}}return rightmost;}//class for binary search tree\nvar AvlTreeClass=/*#__PURE__*/function(){function AvlTreeClass(){_classCallCheck(this,AvlTreeClass);this.root=null;this.height=0;this.list=[];}_createClass(AvlTreeClass,[{key:\"inOrder\",value:function inOrder(node){if(node==null){return;}this.inOrder(node.left);this.list.push(node.value);this.inOrder(node.right);}},{key:\"insertWithRot\",value:function insertWithRot(value){var current=this.root;var parent=null;var height=1;while(current!=null){if(value<current.value){parent=current;current=current.left;height++;}else if(value>current.value){parent=current;current=current.right;height++;}else return;}if(parent===null)this.root=new BinaryTreeNode(value);else if(value<parent.value)parent.left=new BinaryTreeNode(value);else parent.right=new BinaryTreeNode(value);if(height>this.height)this.height=height;//do rotations\n}},{key:\"insert\",value:function insert(value){var current=this.root;var parent=null;var height=1;while(current!=null){if(value<current.value){parent=current;current=current.left;height++;}else if(value>current.value){parent=current;current=current.right;height++;}else return;}if(parent===null)this.root=new BinaryTreeNode(value);else if(value<parent.value)parent.left=new BinaryTreeNode(value);else parent.right=new BinaryTreeNode(value);if(height>this.height)this.height=height;}},{key:\"remove\",value:function remove(value){var current=this.root;var parent=null;//find a node equal to value else exit function\nwhile(true){if(current===null)return;if(value<current.value){parent=current;current=current.left;}else if(value>current.value){parent=current;current=current.right;}else break;}//if node has no children set parent child to null\nif(current.left===null&&current.right===null){if(parent===null)this.root=null;else if(value<parent.value)parent.left=null;else parent.right=null;}//if node has 1 child set parent child to current child\nelse if(current.right===null){if(parent===null)this.root=current.left;else if(value<parent.value)parent.left=current.left;else parent.right=current.left;}else if(current.left===null){if(parent===null)this.root=current.right;else if(value<parent.value)parent.left=current.right;else parent.right=current.right;}//if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\nelse{//find the leftmost child of right subtree of current, set current to that value\nvar leftmostChild=current.right;parent=current;while(leftmostChild.left!==null){parent=leftmostChild;leftmostChild=leftmostChild.left;}current.value=leftmostChild.value;//delete the leftmost child of right subtree\ncurrent=leftmostChild;if(current.left===null&&current.right===null){if(current.value<parent.value)parent.left=null;else parent.right=null;}else if(current.right===null){if(current.value<parent.value)parent.left=current.left;else parent.right=current.left;}else{if(current.value<parent.value)parent.left=current.right;else parent.right=current.right;}}}},{key:\"treeHeight\",value:function treeHeight(){return getHeight(this.root);}}]);return AvlTreeClass;}();//converts sorted array to AVL Tree\nfunction sortedArrayToAVL(arr,start,end){if(start>end){return null;}var mid=parseInt((start+end)/2);var node=new BinaryTreeNode(arr[mid]);node.left=sortedArrayToAVL(arr,start,mid-1);node.right=sortedArrayToAVL(arr,mid+1,end);return node;}//react component for binary search tree\nvar AvlTree=function AvlTree(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState(new AvlTreeClass()),_useState4=_slicedToArray(_useState3,2),tree=_useState4[0],setTree=_useState4[1];var secondRot=useRef(false);var familyLine=useRef([]);var insertInput=useRef();var removeInput=useRef();var findInput=useRef();var speedSlider=useRef();var focus=useRef();var green=useRef();var pink=useRef();var yellow=useRef();var interval=useRef();var animating=useRef();var animationFunction=useRef();var animationValue=useRef();var status=useRef(\"Tree is balanced\");//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//function to generate a random BST\nvar randomTree=function randomTree(){if(animating.current)toggleAnimation();var height=randInt(2,6);var newTree=new AvlTreeClass();var insertValue=null;while(newTree.height<=height){insertValue=randInt(-999,1000);newTree.insert(insertValue);}newTree.remove(insertValue);newTree.inOrder(newTree.root);var treeList=newTree.list;var n=newTree.list.length;newTree.root=sortedArrayToAVL(treeList,0,n-1);setTree(newTree);};var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//function to pause or continue animation\nvar toggleAnimation=useCallback(function(){if(animating.current){clearInterval(interval.current);animating.current=false;focus.current=null;animationFunction.current=null;animationValue.current=null;}else{interval.current=setInterval(function(){animationFunction.current();forceUpdate();},1000-speedSlider.current.value);green.current=null;yellow.current=null;animating.current=true;}},[]);//initialize the tree to a random BST\nuseEffect(randomTree,[toggleAnimation]);//function to insert into the binary search tree on button click\nvar insert=function insert(){if(animating.current)toggleAnimation();var data=parseInt(insertInput.current.value);if(isNaN(data))data=randInt(-999,1000);insertInput.current.value=null;if(tree.root===null){tree.insert(data);green.current=tree.root;forceUpdate();}else{focus.current=tree.root;forceUpdate();animationFunction.current=insertStep;animationValue.current=data;toggleAnimation();}familyLine.current=[];};//function to do a single step of insertion animation\nvar insertStep=function insertStep(){status.current=\"Inserting node\";forceUpdate();if(animationValue.current<focus.current.value){familyLine.current.push(focus.current);if(focus.current.left===null){tree.insert(animationValue.current);//familyLine.current.push(focus.current);\ngreen.current=focus.current.left;//toggleAnimation();\n//animationFunction.current = rotateStep();\nfocus.current=focus.current.left;}else focus.current=focus.current.left;}else if(animationValue.current>focus.current.value){familyLine.current.push(focus.current);if(focus.current.right===null){tree.insert(animationValue.current);//familyLine.current.push(focus.current);\ngreen.current=focus.current.right;focus.current=focus.current.right;//toggleAnimation();\n//animationFunction.current = rotateStep();\n}else focus.current=focus.current.right;}else{animationFunction.current=rotateStep;}};//function to remove from binary search tree on button click\nvar remove=function remove(){if(animating.current)toggleAnimation();if(tree.root!==null){var data=parseInt(removeInput.current.value);if(isNaN(data))data=tree.root.value;focus.current=tree.root;if(focus.current.value===data)pink.current=focus.current;forceUpdate();animationFunction.current=removeStep;animationValue.current=data;toggleAnimation();}removeInput.current.value=null;familyLine.current=[];};//function to do a single step of remove animation\nvar removeStep=function removeStep(){status.current=\"Removing node\";if(animationValue.current<focus.current.value){familyLine.current.push(focus.current);if(focus.current.left===null)toggleAnimation();else{focus.current=focus.current.left;if(focus.current.value===animationValue.current)pink.current=focus.current;}}else if(animationValue.current>focus.current.value){familyLine.current.push(focus.current);if(focus.current.right===null)toggleAnimation();else{focus.current=focus.current.right;if(focus.current.value===animationValue.current)pink.current=focus.current;}}else{if(familyLine.current.length===0){var rightTree=tree.root.right;if(rightTree!=null){if(getParent(getLeftmost(rightTree),tree)===tree.root){tree.remove(animationValue.current);familyLine.current.push(tree.root);pink.current=null;animationFunction.current=rotateStepDelete;return;}else familyLine.current.push(getParent(getLeftmost(rightTree),tree));}else{if(getParent(getRightMost(tree.root.left),tree)===tree.root){tree.remove(animationValue.current);familyLine.current.push(tree.root);pink.current=null;animationFunction.current=rotateStepDelete;return;}else familyLine.current.push(getParent(getRightMost(tree.root.left),tree));}}tree.remove(animationValue.current);pink.current=null;animationFunction.current=rotateStepDelete;}};//function to start find animation\nvar find=function find(){if(animating.current){familyLine.current=[];toggleAnimation();}if(tree.root!==null){var data=parseInt(findInput.current.value);if(isNaN(data))data=tree.root.value;focus.current=tree.root;animationFunction.current=findStep;animationValue.current=data;toggleAnimation();if(focus.current.value===data)yellow.current=focus.current;forceUpdate();}findInput.current.value=null;};//function to to a single step of find animation\nvar findStep=function findStep(){if(animationValue.current<focus.current.value){if(focus.current.left===null)toggleAnimation();else{focus.current=focus.current.left;if(focus.current.value===animationValue.current)yellow.current=focus.current;}}else if(animationValue.current>focus.current.value){if(focus.current.right===null)toggleAnimation();else{focus.current=focus.current.right;if(focus.current.value===animationValue.current)yellow.current=focus.current;}}else{toggleAnimation();}};var rotateStepDelete=function rotateStepDelete(){var family=[];for(var i=0;i<familyLine.current.length;i++){family.push(familyLine.current[i]);}if(family.length===0)toggleAnimation();else{//z is first unbalanced node\nvar z=family.pop();while(family.length>0&&Math.abs(getBalance(z))<2){z=family.pop();}if(Math.abs(getBalance(z))<2){status.current=\"Tree is balanced\";toggleAnimation();}familyLine.current=[];familyLine.current.push(z);//determine largest height child\nif(z==null||typeof z==\"undefined\"){status.current=\"Tree is empty\";toggleAnimation();}else if(z.left!=null||z.right!=null){var y=null;//largest height child\nif(getHeight(z.left)>=getHeight(z.right)){y=z.left;}else y=z.right;var x=null;if(y!=null){if(y.value<z.value){if(getHeight(y.left)>=getHeight(y.right))x=y.left;else x=y.right;}else{if(getHeight(y.left)>getHeight(y.right))x=y.left;else x=y.right;}}}////left left\nif(getBalance(z)<-1&&x.value<y.value){rotateRight(z,tree);status.current=\"Rotating Node: \"+z.value+\" right\";var parent=getParent(y,tree);if(parent!=null){if(parent.value<z.value){parent.right=y;}else parent.left=y;}//familyLine.current.shift();\n}////left right\nif(getBalance(z)<-1&&x.value>y.value){rotateLeft(y,tree);status.current=\"Rotating Node: \"+y.value+\" left\";z.left=x;}////right left\nif(getBalance(z)>1&&x.value<y.value){rotateRight(y,tree);status.current=\"Rotating Node: \"+y.value+\" right\";z.right=x;}//right right\nif(getBalance(z)>1&&x.value>y.value){var _parent=getParent(z,tree);rotateLeft(z,tree);status.current=\"Rotating Node: \"+z.value+\" left\";if(_parent!=null){if(_parent.value<z.value){_parent.right=y;}else _parent.left=y;}else tree.root=y;}forceUpdate();}};var rotateStep=function rotateStep(){//create new array copy of family line\nvar family=[];for(var i=0;i<familyLine.current.length;i++){family.push(familyLine.current[i]);}//var inserted = green.current;\nif(family.length===0)toggleAnimation();else{var firstUnbalanced=family.pop();//var child;\nwhile(Math.abs(getBalance(firstUnbalanced))<2&&family.length>0){firstUnbalanced=family.pop();}if(Math.abs(getBalance(firstUnbalanced))<2){//tree is balanced \nstatus.current=\"Tree is balanced\";toggleAnimation();}//Left Left case\nif(getBalance(firstUnbalanced)===-2&&getBalance(firstUnbalanced.left)===-1){var l=firstUnbalanced.left;rotateRight(firstUnbalanced,tree);status.current=\"Rotating Node: \"+firstUnbalanced.value+\" right\";//insert on correct side\nvar grandP=family.pop();if(grandP){if(grandP.value<firstUnbalanced.value){grandP.right=l;}else grandP.left=l;}else tree.root=l;secondRot.current=true;familyLine.current.splice(familyLine.current.indexOf(l.right),1);}//Left Right case\nif(getBalance(firstUnbalanced)===-2&&getBalance(firstUnbalanced.left)===1){var r=firstUnbalanced.left.right;rotateLeft(firstUnbalanced.left,tree);status.current=\"Rotating Node: \"+firstUnbalanced.left.value+\" left\";firstUnbalanced.left=r;}//Right Right case\nif(getBalance(firstUnbalanced)===2&&getBalance(firstUnbalanced.right)===1){var _r=firstUnbalanced.right;rotateLeft(firstUnbalanced,tree);status.current=\"Rotating Node: \"+firstUnbalanced.value+\" left\";//insert on correct side\nvar _grandP=family.pop();if(_grandP){if(_grandP.value<firstUnbalanced.value){_grandP.right=_r;}else _grandP.left=_r;}else tree.root=_r;familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced),1);}//Right Left Case\nif(getBalance(firstUnbalanced)===2&&getBalance(firstUnbalanced.right)===-1){var _l=firstUnbalanced.right.left;rotateRight(firstUnbalanced.right,tree);status.current=\"Rotating Node: \"+firstUnbalanced.right+\" right\";familyLine.current.pop();firstUnbalanced.right=_l;}}forceUpdate();};//changes the animation speed when the slider changes\nvar updateSpeed=function updateSpeed(){if(animationFunction.current!=null){clearInterval(interval.current);interval.current=setInterval(function(){animationFunction.current();forceUpdate();},1000-speedSlider.current.value);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"binary-search-tree\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:randomTree,children:\"Random\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"insertButton\",onClick:insert,children:\"Insert\"}),/*#__PURE__*/_jsx(\"input\",{ref:insertInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"removeButton\",onClick:remove,children:\"Remove\"}),/*#__PURE__*/_jsx(\"input\",{ref:removeInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"findButton\",onClick:find,children:\"Find\"}),/*#__PURE__*/_jsx(\"input\",{ref:findInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledSlider\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Animation Speed\"}),/*#__PURE__*/_jsx(\"input\",{className:\"slider\",ref:speedSlider,onChange:updateSpeed,min:\"0\",max:\"990\",type:\"range\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"visualization\",children:[/*#__PURE__*/_jsx(BinaryTreeDisplay,{tree:tree,border:focus.current,green:green.current,pink:pink.current,yellow:yellow.current}),/*#__PURE__*/_jsx(\"p\",{children:status.current})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"legend\",children:[/*#__PURE__*/_jsx(Element,{border:\"bordered\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Current Focus\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"green\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Last Inserted Element\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"pink\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Element to Delete\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"yellow\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Last Found Element\"})]})]});};export default AvlTree;","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/src/AvlTree/AvlTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","Element","BinaryTreeNode","value","left","right","getParent","node","tree","parent","cur","root","console","log","getHeight","getBalance","rotateRight","newRoot","T2","rotateLeft","getLeftmost","leftmost","getRightMost","rightmost","AvlTreeClass","height","list","inOrder","push","current","leftmostChild","sortedArrayToAVL","arr","start","end","mid","parseInt","AvlTree","forceRender","setTree","secondRot","familyLine","insertInput","removeInput","findInput","speedSlider","focus","green","pink","yellow","interval","animating","animationFunction","animationValue","status","forceUpdate","renders","randomTree","toggleAnimation","randInt","newTree","insertValue","insert","remove","treeList","n","length","min","max","Math","floor","random","clearInterval","setInterval","data","isNaN","insertStep","rotateStep","removeStep","rightTree","rotateStepDelete","find","findStep","family","i","z","pop","abs","y","x","firstUnbalanced","l","grandP","splice","indexOf","r","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n}\r\n\r\nfunction getParent(node, tree) {\r\n    var parent = null;\r\n    var cur = tree.root;\r\n    if (node != null) {\r\n\r\n        while (cur !== node) {\r\n            if (node.value > cur.value) {\r\n                parent = cur;\r\n                cur = parent.right;\r\n            }\r\n            else {\r\n                parent = cur;\r\n                cur = parent.left;\r\n            }\r\n        }\r\n        return parent;\r\n    }\r\n    else console.log(\"node is null, no parent\")\r\n}\r\n\r\nfunction getHeight(node) {\r\n\r\n    if (typeof node === \"object\" && node != null) {\r\n\r\n        if (getHeight(node.left) > getHeight(node.right)) {\r\n            return 1 + getHeight(node.left);\r\n        }\r\n        else return 1 + getHeight(node.right);\r\n    }\r\n    else return 0;\r\n}\r\n\r\n\r\nfunction getBalance(node) {\r\n    if (node !== null && typeof node != \"undefined\") {\r\n        return getHeight(node.right) - getHeight(node.left);\r\n    }\r\n}\r\n\r\nfunction rotateRight(node, tree) {\r\n    var newRoot = node.left;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.right;\r\n\r\n    newRoot.right = node;\r\n    node.left = T2;\r\n\r\n}\r\n\r\nfunction rotateLeft(node, tree) {\r\n    var newRoot = node.right;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.left;\r\n    newRoot.left = node;\r\n    node.right = T2;\r\n}\r\n\r\nfunction getLeftmost(node) {\r\n    var leftmost = node;\r\n    if (leftmost != null) {\r\n        while (leftmost.left != null) {\r\n            leftmost = leftmost.left;\r\n        }\r\n    }\r\n    return leftmost;\r\n}\r\n\r\nfunction getRightMost(node) {\r\n    var rightmost = node;\r\n    if (rightmost != null) {\r\n        while (rightmost.right != null) {\r\n            rightmost = rightmost.right;\r\n        }\r\n    }\r\n    return rightmost;\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n        this.list = [];\r\n    }\r\n\r\n\r\n\r\n\r\n    inOrder(node) {\r\n        if (node == null) {\r\n            return\r\n        }\r\n        this.inOrder(node.left);\r\n        this.list.push(node.value);\r\n        this.inOrder(node.right);\r\n    }\r\n\r\n    insertWithRot(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n\r\n        //do rotations\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    treeHeight() {\r\n        return getHeight(this.root);\r\n    }\r\n\r\n}\r\n\r\n//converts sorted array to AVL Tree\r\nfunction sortedArrayToAVL(arr, start, end) {\r\n    if (start > end) {\r\n        return null;\r\n    }\r\n\r\n    var mid = parseInt((start + end) / 2);\r\n    var node = new BinaryTreeNode(arr[mid]);\r\n\r\n    node.left = sortedArrayToAVL(arr, start, mid - 1);\r\n\r\n    node.right = sortedArrayToAVL(arr, mid + 1, end);\r\n    return node;\r\n}\r\n\r\n//react component for binary search tree\r\nconst AvlTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n    const secondRot = useRef(false);\r\n    const familyLine = useRef([]);\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n    const status = useRef(\"Tree is balanced\");\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n\r\n        newTree.remove(insertValue);\r\n        newTree.inOrder(newTree.root)\r\n\r\n\r\n        var treeList = newTree.list;\r\n        var n = newTree.list.length;\r\n        newTree.root = sortedArrayToAVL(treeList, 0, n - 1);\r\n\r\n        setTree(newTree);\r\n    }\r\n\r\n\r\n\r\n\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        status.current = \"Inserting node\";\r\n        forceUpdate();\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.left;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n                focus.current = focus.current.left;\r\n            } else\r\n                focus.current = focus.current.left;\r\n\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.right;\r\n                focus.current = focus.current.right;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.right;\r\n\r\n        } else {\r\n            animationFunction.current = rotateStep;\r\n        }\r\n\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        status.current = \"Removing node\";\r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            if (familyLine.current.length === 0) {\r\n                var rightTree = tree.root.right;\r\n                if (rightTree != null) {\r\n                    if (getParent(getLeftmost(rightTree), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getLeftmost(rightTree), tree));\r\n\r\n                }\r\n                else {\r\n\r\n                    if (getParent(getRightMost(tree.root.left), tree) === tree.root) {\r\n                        tree.remove(animationValue.current);\r\n                        familyLine.current.push(tree.root);\r\n                        pink.current = null;\r\n                        animationFunction.current = rotateStepDelete;\r\n                        return;\r\n                    }\r\n                    else familyLine.current.push(getParent(getRightMost(tree.root.left), tree));\r\n\r\n                }\r\n            }\r\n            tree.remove(animationValue.current);\r\n\r\n            pink.current = null;\r\n            animationFunction.current = rotateStepDelete;\r\n        }\r\n    }\r\n\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current) {\r\n            familyLine.current = [];\r\n            toggleAnimation();\r\n        }\r\n        if (tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    const rotateStepDelete = () => {\r\n\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n\r\n            //z is first unbalanced node\r\n\r\n            var z = family.pop();\r\n\r\n\r\n\r\n            while (family.length > 0 && Math.abs(getBalance(z)) < 2) {\r\n                z = family.pop();\r\n\r\n            }\r\n            if (Math.abs(getBalance(z)) < 2) {\r\n                status.current = \"Tree is balanced\";\r\n\r\n                toggleAnimation();\r\n            }\r\n\r\n            familyLine.current = [];\r\n            familyLine.current.push(z);\r\n            //determine largest height child\r\n\r\n            if (z == null || typeof z == \"undefined\") {\r\n                status.current = \"Tree is empty\"\r\n                toggleAnimation();\r\n            }\r\n            else if (z.left != null || z.right != null) {\r\n                var y = null; //largest height child\r\n                if (getHeight(z.left) >= getHeight(z.right)) {\r\n                    y = z.left\r\n\r\n                }\r\n                else y = z.right;\r\n                var x = null;\r\n                if (y != null) {\r\n                    if (y.value < z.value) {\r\n                        if (getHeight(y.left) >= getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n                    else {\r\n                        if (getHeight(y.left) > getHeight(y.right)) x = y.left;\r\n                        else x = y.right;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            ////left left\r\n            if (getBalance(z) < -1 && x.value < y.value) {\r\n                rotateRight(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" right\"\r\n                let parent = getParent(y, tree);\r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                //familyLine.current.shift();\r\n            }\r\n\r\n            ////left right\r\n            if (getBalance(z) < -1 && x.value > y.value) {\r\n\r\n                rotateLeft(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" left\"\r\n                z.left = x;\r\n\r\n\r\n            }\r\n\r\n            ////right left\r\n            if (getBalance(z) > 1 && x.value < y.value) {\r\n\r\n                rotateRight(y, tree);\r\n                status.current = \"Rotating Node: \" + y.value + \" right\"\r\n                z.right = x;\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            //right right\r\n            if (getBalance(z) > 1 && x.value > y.value) {\r\n                let parent = getParent(z, tree);\r\n                rotateLeft(z, tree);\r\n                status.current = \"Rotating Node: \" + z.value + \" left\"\r\n\r\n                if (parent != null) {\r\n                    if (parent.value < z.value) {\r\n                        parent.right = y;\r\n                    }\r\n                    else parent.left = y;\r\n                }\r\n                else tree.root = y;\r\n\r\n            }\r\n\r\n            forceUpdate();\r\n\r\n\r\n        }\r\n    }\r\n\r\n    const rotateStep = () => {\r\n\r\n        //create new array copy of family line\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n\r\n\r\n        //var inserted = green.current;\r\n\r\n        if (family.length === 0) toggleAnimation();\r\n        else {\r\n            var firstUnbalanced = family.pop();\r\n\r\n            //var child;\r\n\r\n            while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\r\n                firstUnbalanced = family.pop();\r\n\r\n            }\r\n\r\n\r\n            if (Math.abs(getBalance(firstUnbalanced)) < 2) {\r\n                //tree is balanced \r\n                status.current = \"Tree is balanced\"\r\n                toggleAnimation();\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            //Left Left case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\r\n\r\n\r\n                let l = firstUnbalanced.left;\r\n                rotateRight(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" right\"\r\n\r\n                //insert on correct side\r\n                let grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = l;\r\n                    }\r\n                    else grandP.left = l;\r\n                } else tree.root = l;\r\n                secondRot.current = true;\r\n                familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\r\n\r\n\r\n            }\r\n\r\n\r\n            //Left Right case\r\n            if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n                let r = firstUnbalanced.left.right;\r\n                rotateLeft(firstUnbalanced.left, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.left.value + \" left\";\r\n\r\n                firstUnbalanced.left = r;\r\n            }\r\n\r\n            //Right Right case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\r\n                let r = firstUnbalanced.right;\r\n                rotateLeft(firstUnbalanced, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.value + \" left\";\r\n                //insert on correct side\r\n                let grandP = family.pop();\r\n                if (grandP) {\r\n                    if (grandP.value < firstUnbalanced.value) {\r\n                        grandP.right = r;\r\n                    }\r\n                    else grandP.left = r;\r\n                } else tree.root = r;\r\n                familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\r\n\r\n            }\r\n\r\n            //Right Left Case\r\n            if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\r\n                let l = firstUnbalanced.right.left;\r\n                rotateRight(firstUnbalanced.right, tree);\r\n                status.current = \"Rotating Node: \" + firstUnbalanced.right + \" right\";\r\n                familyLine.current.pop();\r\n                firstUnbalanced.right = l;\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n        forceUpdate();\r\n\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n\r\n                    <p>{status.current}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AvlTree;"]},"metadata":{},"sourceType":"module"}