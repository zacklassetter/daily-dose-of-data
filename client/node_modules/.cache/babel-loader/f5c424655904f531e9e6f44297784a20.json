{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\Stack\\\\Stack.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Stack.scss';\nimport Element from '../Element/Element'; //returns a list of react element components from the stack component array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StackDisplay = props => {\n  return props.stack.map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 10\n    }, this);\n  });\n}; //main react component for stack\n\n\n_c = StackDisplay;\n\nconst Stack = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [stack, setStack] = useState([]);\n  const stackInput = useRef();\n  const stackOutput = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets list to a randomly generated list\n\n\n  const randomStack = () => {\n    const size = randInt(10, 60);\n    var newStack = [];\n\n    for (let i = 0; i < size; i++) newStack.push(randInt(-999, 1000));\n\n    setStack(newStack);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize stack to random stack\n\n\n  useEffect(randomStack, []);\n\n  const push = () => {\n    const data = parseInt(stackInput.current.value);\n\n    if (!isNaN(data)) {\n      stack.push(data);\n      forceUpdate();\n    }\n\n    stackInput.current.value = null;\n  };\n\n  const pop = () => {\n    const data = stack.pop();\n    forceUpdate();\n    if (data === undefined) stackOutput.current.value = \"None\";else stackOutput.current.value = data;\n  };\n\n  const peek = () => {\n    const data = stack[stack.length - 1];\n    if (data === undefined) stackOutput.current.value = \"None\";else stackOutput.current.value = data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stack\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomStack,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"pushButton\",\n        onClick: push,\n        children: \"Push\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stackInput\",\n        ref: stackInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"popButton\",\n        onClick: pop,\n        children: \"Pop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stackOutput\",\n        ref: stackOutput,\n        type: \"text\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"peekButton\",\n        onClick: peek,\n        children: \"Peek\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: [/*#__PURE__*/_jsxDEV(StackDisplay, {\n        stack: stack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stackTop\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2190 Push\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2192 Pop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Stack, \"+/PchtWDFYBUZMkPRE3MFKRzOKc=\");\n\n_c2 = Stack;\nexport default Stack;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StackDisplay\");\n$RefreshReg$(_c2, \"Stack\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/Stack/Stack.js"],"names":["React","useState","useRef","useEffect","Element","StackDisplay","props","stack","map","value","index","Stack","forceRender","setStack","stackInput","stackOutput","forceUpdate","renders","randomStack","size","randInt","newStack","i","push","min","max","Math","floor","random","data","parseInt","current","isNaN","pop","undefined","peek","length"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Stack.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//returns a list of react element components from the stack component array\r\nconst StackDisplay = (props) => {\r\n\treturn props.stack.map((value, index) => {\r\n\t\treturn <Element key={index} value={value} />\r\n\t});\r\n}\r\n\r\n//main react component for stack\r\nconst Stack = () => {\r\n\t\r\n\tconst [, forceRender] = useState(0);\r\n\tconst [stack, setStack] = useState([]);\r\n\tconst stackInput = useRef();\r\n\tconst stackOutput = useRef();\r\n\t\r\n\t//We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n\t//sets list to a randomly generated list\r\n    const randomStack = () => {\r\n        const size = randInt(10, 60);\r\n        var newStack = [];\r\n        for (let i = 0; i < size; i++)\r\n            newStack.push(randInt(-999,1000));\r\n        setStack(newStack);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize stack to random stack\r\n    useEffect(randomStack, []);\r\n\t\r\n\tconst push = () => {\r\n\t\tconst data = parseInt(stackInput.current.value);\r\n\t\tif (!isNaN(data)) {\r\n\t\t\tstack.push(data);\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t\tstackInput.current.value = null;\r\n\t}\r\n\t\r\n\tconst pop = () => {\r\n\t\tconst data = stack.pop();\r\n\t\tforceUpdate();\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\tconst peek = () => {\r\n\t\tconst data = stack[stack.length-1];\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"stack\">\r\n\t\t\t<div className=\"controls\">\r\n\t\t\t\t<button id=\"randomButton\" onClick={randomStack}>Random</button>\r\n                <br />\r\n\t\t\t\t<button id=\"pushButton\" onClick={push}>Push</button>\r\n\t\t\t\t<input id=\"stackInput\" ref={stackInput} type=\"text\" />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"popButton\" onClick={pop}>Pop</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input id=\"stackOutput\" ref={stackOutput} type=\"text\" readOnly />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"peekButton\" onClick={peek}>Peek</button>\r\n\t\t\t\t<br />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"visualization\">\r\n\t\t\t\t<StackDisplay stack={stack} />\r\n\t\t\t\t<div id=\"stackTop\">\r\n\t\t\t\t\t<p>&#x2190; Push</p>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<p>&#x2192; Pop</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Stack;"]},"metadata":{},"sourceType":"module"}