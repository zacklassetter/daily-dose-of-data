{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\Client\\\\src\\\\Set\\\\Set.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Set.scss';\nimport Element from '../Element/Element'; //react component to display a set\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SetDisplay = props => {\n  var componentList = [];\n  componentList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"curly-brace\",\n    children: \"{\"\n  }, -1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 24\n  }, this));\n  componentList = componentList.concat([...props.set].map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }));\n  componentList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"curly-brace\",\n    children: \"}\"\n  }, componentList.length, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 24\n  }, this));\n  return componentList;\n}; //react component for set visualization\n\n\n_c = SetDisplay;\n\nconst MySet = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [set, setSet] = useState(new Set());\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const findInput = useRef();\n  const findOutput = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random set\n\n\n  const randomSet = () => {\n    const size = randInt(20, 100);\n    const newSet = new Set();\n\n    for (let i = 0; i < size; i++) newSet.add(randInt(-999, 1000));\n\n    setSet(newSet);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to create an empty set\n\n\n  const emptySet = () => {\n    setSet(new Set());\n  }; //initialize to a random set\n\n\n  useEffect(randomSet, []); //function to insert into set\n\n  const insert = () => {\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    set.add(data);\n    forceUpdate();\n    insertInput.current.value = null;\n  }; //function to remove from set\n\n\n  const remove = () => {\n    var data = parseInt(removeInput.current.value);\n    if (!isNaN(data)) set.delete(data);\n    forceUpdate();\n    removeInput.current.value = null;\n  }; //function to find a value in the set\n\n\n  const find = () => {\n    var data = parseInt(findInput.current.value);\n\n    if (!isNaN(data)) {\n      if (set.has(data)) findOutput.current.value = data + \" is in set\";else findOutput.current.value = data + \" not in set\";\n    }\n\n    forceUpdate();\n    findInput.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"set\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomSet,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"emptyButton\",\n        onClick: emptySet,\n        children: \"Empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"insertInput\",\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"removeInput\",\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"findButton\",\n        onClick: find,\n        children: \"Find\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"findInput\",\n        ref: findInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"findOutput\",\n        ref: findOutput,\n        type: \"text\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(SetDisplay, {\n        set: set\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MySet, \"BAecYuAvN9bAKbjN9H8TI4NRLeU=\");\n\n_c2 = MySet;\nexport default MySet;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SetDisplay\");\n$RefreshReg$(_c2, \"MySet\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/Client/src/Set/Set.js"],"names":["React","useState","useRef","useEffect","Element","SetDisplay","props","componentList","push","concat","set","map","value","index","length","MySet","forceRender","setSet","Set","insertInput","removeInput","findInput","findOutput","forceUpdate","renders","randomSet","size","randInt","newSet","i","add","min","max","Math","floor","random","emptySet","insert","data","parseInt","current","isNaN","remove","delete","find","has"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Set.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a set\r\nconst SetDisplay = (props) => {\r\n    var componentList = [];\r\n    componentList.push(<p className=\"curly-brace\" key={-1}>&#123;</p>);\r\n    componentList = componentList.concat([...props.set].map((value, index) => {\r\n        return <Element key={index} value={value}></Element>;\r\n    }));\r\n    componentList.push(<p className=\"curly-brace\" key={componentList.length}>&#125;</p>);\r\n    return componentList;\r\n}\r\n\r\n//react component for set visualization\r\nconst MySet = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [set, setSet] = useState(new Set());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const findOutput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random set\r\n    const randomSet = () => {\r\n        const size = randInt(20, 100);\r\n        const newSet = new Set();\r\n        for (let i = 0; i < size; i++)\r\n            newSet.add(randInt(-999,1000));\r\n        setSet(newSet);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to create an empty set\r\n    const emptySet = () => {\r\n        setSet(new Set());\r\n    }\r\n\r\n    //initialize to a random set\r\n    useEffect(randomSet, []);\r\n\r\n    //function to insert into set\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999,1000);\r\n        set.add(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from set\r\n    const remove = () => {\r\n        var data = parseInt(removeInput.current.value);\r\n        if (!isNaN(data))\r\n            set.delete(data);\r\n        forceUpdate();\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to find a value in the set\r\n    const find = () => {\r\n        var data = parseInt(findInput.current.value);\r\n        if (!isNaN(data)) {\r\n            if (set.has(data))\r\n                findOutput.current.value = data + \" is in set\"\r\n            else\r\n                findOutput.current.value = data + \" not in set\"\r\n        }\r\n        forceUpdate();\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"set\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomSet}>Random</button>\r\n                <br />\r\n                <button id=\"emptyButton\" onClick={emptySet}>Empty</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"findButton\" onClick={find}>Find</button>\r\n                <input id=\"findInput\" ref={findInput} type=\"text\"></input>\r\n                <br />\r\n                <input id=\"findOutput\" ref={findOutput} type=\"text\" readOnly></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <SetDisplay set={set} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MySet;"]},"metadata":{},"sourceType":"module"}