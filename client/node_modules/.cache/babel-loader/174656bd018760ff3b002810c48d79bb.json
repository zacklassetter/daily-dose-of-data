{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinaryHeap\\\\BinaryHeap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './BinaryHeap.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\nimport BinaryTreeClass from '../BinaryTree/BinaryTree.js';\nimport BinaryTreeNode from '../BinaryTree/BinaryTree.js'; //class for binary heap data structure\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryHeapClass {\n  constructor() {\n    this.heap = [];\n  }\n\n  getTree() {\n    return new BinaryTreeClass(new BinaryTreeNode(7));\n  }\n\n} //main react component for binary heap visualization\n\n\nconst BinaryHeap = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [heap, setHeap] = useState(new BinaryHeapClass());\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const speedSlider = useRef();\n  const interval = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random heap\n\n\n  const randomHeap = () => {}; //initialize the tree to a random binary heap\n\n\n  useEffect(randomHeap, []); //function to insert a value into the heap\n\n  const insert = () => {}; //function to remove a value from the heap\n\n\n  const remove = () => {}; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    clearInterval(interval.current);\n    interval.current = setInterval(() => {\n      forceUpdate();\n    }, 1000 - speedSlider.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-heap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomHeap,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: heap.getTree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryHeap, \"twiVDI5jJ+/qsUcSVlQAxDjIbyQ=\");\n\n_c = BinaryHeap;\nexport default BinaryHeap;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryHeap\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinaryHeap/BinaryHeap.js"],"names":["React","useState","useRef","useEffect","BinaryTreeDisplay","BinaryTreeClass","BinaryTreeNode","BinaryHeapClass","constructor","heap","getTree","BinaryHeap","forceRender","setHeap","insertInput","removeInput","speedSlider","interval","forceUpdate","renders","randomHeap","insert","remove","updateSpeed","clearInterval","current","setInterval","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './BinaryHeap.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport BinaryTreeClass from '../BinaryTree/BinaryTree.js';\r\nimport BinaryTreeNode from '../BinaryTree/BinaryTree.js';\r\n\r\n//class for binary heap data structure\r\nclass BinaryHeapClass {\r\n    constructor() {\r\n        this.heap = [];\r\n    }\r\n\r\n    getTree() {\r\n        return new BinaryTreeClass(new BinaryTreeNode(7));\r\n    }\r\n}\r\n\r\n//main react component for binary heap visualization\r\nconst BinaryHeap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const speedSlider = useRef();\r\n    const interval = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random heap\r\n    const randomHeap = () => {\r\n\r\n    }\r\n\r\n    //initialize the tree to a random binary heap\r\n    useEffect(randomHeap, []);\r\n\r\n    //function to insert a value into the heap\r\n    const insert = () => {\r\n\r\n    }\r\n\r\n    //function to remove a value from the heap\r\n    const remove = () => {\r\n\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        clearInterval(interval.current);\r\n        interval.current = setInterval(() => {\r\n            \r\n            forceUpdate();\r\n        }, 1000 - speedSlider.current.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-heap\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHeap}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={heap.getTree} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryHeap;"]},"metadata":{},"sourceType":"module"}