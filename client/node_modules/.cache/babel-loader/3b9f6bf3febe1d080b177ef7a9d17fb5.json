{"ast":null,"code":"import _slicedToArray from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import React,{useState,useEffect}from'react';import'./BinaryTree.scss';import BinaryTreeDisplay from'./BinaryTreeDisplay.js';//class for node in binary tree\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var BinaryTreeNode=function BinaryTreeNode(value){_classCallCheck(this,BinaryTreeNode);this.value=value;this.left=null;this.right=null;};//class for binary tree data structure\nexport var BinaryTreeClass=function BinaryTreeClass(root){_classCallCheck(this,BinaryTreeClass);this.root=root;};//main react component for binary tree\nvar BinaryTree=function BinaryTree(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),tree=_useState2[0],setTree=_useState2[1];//function to generate random tree\nvar randomTree=function randomTree(){var newNodeChance=0.9;var levels=randInt(1,5);var newTree=new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));var nodes=[newTree.root];var newNodes=[];for(var level=0;level<levels;level++){for(var i=0;i<nodes.length;i++){if(Math.random()<Math.pow(newNodeChance,level)){nodes[i].left=new BinaryTreeNode(randInt(-999,1000));newNodes.push(nodes[i].left);}if(Math.random()<Math.pow(newNodeChance,level)){nodes[i].right=new BinaryTreeNode(randInt(-999,1000));newNodes.push(nodes[i].right);}}nodes=newNodes;newNodes=[];}setTree(newTree);};var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//initialize tree to a random tree\nuseEffect(randomTree,[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"binary-tree\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"controls\",children:/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:randomTree,children:\"Random\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization\",children:/*#__PURE__*/_jsx(BinaryTreeDisplay,{tree:tree})})]});};export default BinaryTree;","map":{"version":3,"sources":["C:/Users/quint/Documents/Daily_Dose_of_Data/client/src/BinaryTree/BinaryTree.js"],"names":["React","useState","useEffect","BinaryTreeDisplay","BinaryTreeNode","value","left","right","BinaryTreeClass","root","BinaryTree","tree","setTree","randomTree","newNodeChance","levels","randInt","newTree","nodes","newNodes","level","i","length","Math","random","pow","push","min","max","floor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './BinaryTree.scss';\r\nimport BinaryTreeDisplay from './BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nexport class BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nexport class BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//main react component for binary tree\r\nconst BinaryTree = () => {\r\n\r\n    const [tree, setTree] = useState(null);\r\n    \r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    return (\r\n        <div className=\"binary-tree\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}