{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\LinkedList\\\\LinkedList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './LinkedList.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n\n}\n\nclass LinkedListClass {\n  constructor(head = null) {\n    this.head = head;\n    this.size = 0;\n  } //for insertion at tail -- currently unused\n\n\n  insert(data) {\n    if (this.head == null) {\n      this.head = new Node(data);\n    } else {\n      var current = this.head;\n\n      while (current.next != null) {\n        current = current.next;\n      }\n\n      current.next = new Node(data);\n    }\n\n    this.size++;\n  }\n\n  insertAt(data, index) {\n    var newNode = new Node(data);\n    var current = this.head;\n    var previous;\n\n    if (index <= this.size) {\n      if (index === 0) {\n        newNode.next = this.head;\n        this.head = newNode;\n      } else {\n        var i = 0;\n\n        while (i < index) {\n          i++;\n          previous = current;\n          current = current.next;\n        }\n\n        newNode.next = current;\n        previous.next = newNode;\n      }\n\n      this.size++;\n    }\n  }\n\n  get(index) {\n    var i = 0;\n    var current = this.head;\n\n    while (i !== index) {\n      current = current.next;\n      i++;\n    }\n\n    return current.value;\n  }\n\n  remove(index) {\n    var i = 0;\n    var curr, prev, next;\n\n    if (index < this.size && this.size > 0) {\n      if (index === 0) {\n        this.head = this.head.next;\n        this.size--;\n      } else {\n        i++;\n        prev = this.head;\n        curr = prev.next;\n        next = curr.next;\n\n        while (i !== index) {\n          i++;\n          prev = prev.next;\n          curr = curr.next;\n          next = next.next;\n        }\n\n        prev.next = next;\n        this.size--;\n      }\n    }\n  }\n\n}\n\nconst LinkedListDisplay = props => {\n  var current = props.list.head;\n  var index = 0;\n  var componentList = [];\n\n  while (current != null) {\n    componentList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labeledElement\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        value: current.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this));\n    current = current.next;\n    index++;\n    componentList.push();\n  }\n\n  componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    value: \"null\"\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 24\n  }, this));\n  return componentList;\n};\n\n_c = LinkedListDisplay;\n\nconst LinkedList = () => {\n  _s();\n\n  const [list] = useState(new LinkedListClass());\n  const [, forceRender] = useState(0);\n  const insertIndex = useRef();\n  const insertValue = useRef();\n  const removeIndex = useRef();\n  const listOutput = useRef();\n  const getIndex = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //insertion only occurs at head for now\n\n\n  function insert() {\n    const data = parseInt(insertValue.current.value);\n    const index = parseInt(insertIndex.current.value);\n\n    if (!isNaN(data)) {\n      list.insertAt(data, index);\n      forceUpdate();\n    }\n\n    insertValue.current.value = null;\n    insertIndex.current.value = null;\n  }\n\n  function get() {\n    const index = parseInt(getIndex.current.value);\n\n    if (index < list.size) {\n      listOutput.current.value = list.get(index);\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    getIndex.current.value = null;\n  }\n\n  function remove() {\n    const index = parseInt(removeIndex.current.value);\n\n    if (!isNaN(index)) {\n      list.remove(index);\n      forceUpdate();\n    }\n\n    removeIndex.current.value = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"linked-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertIndex\",\n          ref: insertIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertValue\",\n          ref: insertValue,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: remove,\n        id: \"removeButton\",\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"removeIndex\",\n          ref: removeIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"listOutput\",\n        type: \"text\",\n        ref: listOutput,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getButton\",\n        onClick: get,\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"getIndex\",\n          ref: getIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(LinkedListDisplay, {\n        list: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LinkedList, \"+sVxd/DjJS+GOQKU9R1S70l31e4=\");\n\n_c2 = LinkedList;\nexport default LinkedList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LinkedListDisplay\");\n$RefreshReg$(_c2, \"LinkedList\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/LinkedList/LinkedList.js"],"names":["React","useState","useRef","Element","Node","constructor","value","next","LinkedListClass","head","size","insert","data","current","insertAt","index","newNode","previous","i","get","remove","curr","prev","LinkedListDisplay","props","list","componentList","push","LinkedList","forceRender","insertIndex","insertValue","removeIndex","listOutput","getIndex","forceUpdate","renders","parseInt","isNaN"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,mBAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAGA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;AACH;;AAJM;;AAOX,MAAMC,eAAN,CAAsB;AAClBH,EAAAA,WAAW,CAACI,IAAI,GAAG,IAAR,EAAc;AACrB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAY,CAAZ;AACH,GAJiB,CAMlB;;;AACAC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,QAAI,KAAKH,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKA,IAAL,GAAY,IAAIL,IAAJ,CAASQ,IAAT,CAAZ;AACH,KAFD,MAGK;AACD,UAAIC,OAAO,GAAG,KAAKJ,IAAnB;;AACA,aAAOI,OAAO,CAACN,IAAR,IAAgB,IAAvB,EAA6B;AACzBM,QAAAA,OAAO,GAAGA,OAAO,CAACN,IAAlB;AACH;;AACDM,MAAAA,OAAO,CAACN,IAAR,GAAe,IAAIH,IAAJ,CAASQ,IAAT,CAAf;AACH;;AACD,SAAKF,IAAL;AACH;;AAEDI,EAAAA,QAAQ,CAACF,IAAD,EAAOG,KAAP,EAAc;AAClB,QAAIC,OAAO,GAAG,IAAIZ,IAAJ,CAASQ,IAAT,CAAd;AACA,QAAIC,OAAO,GAAG,KAAKJ,IAAnB;AACA,QAAIQ,QAAJ;;AAEA,QAAIF,KAAK,IAAI,KAAKL,IAAlB,EAAwB;AAEpB,UAAIK,KAAK,KAAK,CAAd,EAAiB;AACbC,QAAAA,OAAO,CAACT,IAAR,GAAe,KAAKE,IAApB;AACA,aAAKA,IAAL,GAAYO,OAAZ;AACH,OAHD,MAIK;AACD,YAAIE,CAAC,GAAG,CAAR;;AACA,eAAOA,CAAC,GAAGH,KAAX,EAAkB;AACdG,UAAAA,CAAC;AACDD,UAAAA,QAAQ,GAAGJ,OAAX;AACAA,UAAAA,OAAO,GAAGA,OAAO,CAACN,IAAlB;AACH;;AACDS,QAAAA,OAAO,CAACT,IAAR,GAAeM,OAAf;AACAI,QAAAA,QAAQ,CAACV,IAAT,GAAgBS,OAAhB;AACH;;AACD,WAAKN,IAAL;AACH;AACJ;;AAEDS,EAAAA,GAAG,CAACJ,KAAD,EAAQ;AACP,QAAIG,CAAC,GAAG,CAAR;AACA,QAAIL,OAAO,GAAG,KAAKJ,IAAnB;;AACA,WAAOS,CAAC,KAAKH,KAAb,EAAoB;AAChBF,MAAAA,OAAO,GAAGA,OAAO,CAACN,IAAlB;AACAW,MAAAA,CAAC;AACJ;;AACD,WAAOL,OAAO,CAACP,KAAf;AACH;;AAEDc,EAAAA,MAAM,CAACL,KAAD,EAAQ;AACV,QAAIG,CAAC,GAAG,CAAR;AACA,QAAIG,IAAJ,EAAUC,IAAV,EAAgBf,IAAhB;;AACA,QAAIQ,KAAK,GAAG,KAAKL,IAAb,IAAqB,KAAKA,IAAL,GAAY,CAArC,EAAwC;AACpC,UAAIK,KAAK,KAAK,CAAd,EAAiB;AACb,aAAKN,IAAL,GAAY,KAAKA,IAAL,CAAUF,IAAtB;AACA,aAAKG,IAAL;AACH,OAHD,MAIK;AACDQ,QAAAA,CAAC;AACDI,QAAAA,IAAI,GAAG,KAAKb,IAAZ;AACAY,QAAAA,IAAI,GAAGC,IAAI,CAACf,IAAZ;AACAA,QAAAA,IAAI,GAAGc,IAAI,CAACd,IAAZ;;AACA,eAAOW,CAAC,KAAKH,KAAb,EAAoB;AAChBG,UAAAA,CAAC;AACDI,UAAAA,IAAI,GAAGA,IAAI,CAACf,IAAZ;AACAc,UAAAA,IAAI,GAAGA,IAAI,CAACd,IAAZ;AACAA,UAAAA,IAAI,GAAGA,IAAI,CAACA,IAAZ;AACH;;AACDe,QAAAA,IAAI,CAACf,IAAL,GAAYA,IAAZ;AACA,aAAKG,IAAL;AACH;AACJ;AACJ;;AA/EiB;;AAkFtB,MAAMa,iBAAiB,GAAIC,KAAD,IAAW;AACjC,MAAIX,OAAO,GAAGW,KAAK,CAACC,IAAN,CAAWhB,IAAzB;AACA,MAAIM,KAAK,GAAG,CAAZ;AACA,MAAIW,aAAa,GAAG,EAApB;;AACA,SAAOb,OAAO,IAAI,IAAlB,EAAwB;AACpBa,IAAAA,aAAa,CAACC,IAAd,eACI;AAAiB,MAAA,SAAS,EAAC,gBAA3B;AAAA,8BACI;AAAA,kBAAQZ;AAAR;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,OAAD;AAAS,QAAA,KAAK,EAAEF,OAAO,CAACP;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,OAAUS,KAAV;AAAA;AAAA;AAAA;AAAA,YADJ;AAOAF,IAAAA,OAAO,GAAGA,OAAO,CAACN,IAAlB;AACAQ,IAAAA,KAAK;AACLW,IAAAA,aAAa,CAACC,IAAd;AAEH;;AACDD,EAAAA,aAAa,CAACC,IAAd,eAAmB,QAAC,OAAD;AAAqB,IAAA,KAAK,EAAC;AAA3B,KAAcZ,KAAd;AAAA;AAAA;AAAA;AAAA,UAAnB;AACA,SAAOW,aAAP;AAGH,CArBD;;KAAMH,iB;;AAuBN,MAAMK,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACH,IAAD,IAAUxB,QAAQ,CAAC,IAAIO,eAAJ,EAAD,CAAxB;AACA,QAAM,GAAGqB,WAAH,IAAkB5B,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM6B,WAAW,GAAG5B,MAAM,EAA1B;AACA,QAAM6B,WAAW,GAAG7B,MAAM,EAA1B;AACA,QAAM8B,WAAW,GAAG9B,MAAM,EAA1B;AACA,QAAM+B,UAAU,GAAG/B,MAAM,EAAzB;AACA,QAAMgC,QAAQ,GAAGhC,MAAM,EAAvB,CARqB,CAUrB;;AACA,QAAMiC,WAAW,GAAG,MAAM;AACtBN,IAAAA,WAAW,CAACO,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAX;AACH,GAFD,CAXqB,CAerB;;;AACA,WAASzB,MAAT,GAAkB;AACd,UAAMC,IAAI,GAAGyB,QAAQ,CAACN,WAAW,CAAClB,OAAZ,CAAoBP,KAArB,CAArB;AACA,UAAMS,KAAK,GAAGsB,QAAQ,CAACP,WAAW,CAACjB,OAAZ,CAAoBP,KAArB,CAAtB;;AACA,QAAI,CAACgC,KAAK,CAAC1B,IAAD,CAAV,EAAkB;AACda,MAAAA,IAAI,CAACX,QAAL,CAAcF,IAAd,EAAoBG,KAApB;AACAoB,MAAAA,WAAW;AACd;;AACDJ,IAAAA,WAAW,CAAClB,OAAZ,CAAoBP,KAApB,GAA4B,IAA5B;AACAwB,IAAAA,WAAW,CAACjB,OAAZ,CAAoBP,KAApB,GAA4B,IAA5B;AAEH;;AAED,WAASa,GAAT,GAAe;AACX,UAAMJ,KAAK,GAAGsB,QAAQ,CAACH,QAAQ,CAACrB,OAAT,CAAiBP,KAAlB,CAAtB;;AACA,QAAIS,KAAK,GAAGU,IAAI,CAACf,IAAjB,EAAuB;AACnBuB,MAAAA,UAAU,CAACpB,OAAX,CAAmBP,KAAnB,GAA2BmB,IAAI,CAACN,GAAL,CAASJ,KAAT,CAA3B;AACH,KAFD,MAGK;AACDkB,MAAAA,UAAU,CAACpB,OAAX,CAAmBP,KAAnB,GAA2B,SAA3B;AACH;;AACD4B,IAAAA,QAAQ,CAACrB,OAAT,CAAiBP,KAAjB,GAAyB,IAAzB;AACH;;AAED,WAASc,MAAT,GAAkB;AACd,UAAML,KAAK,GAAGsB,QAAQ,CAACL,WAAW,CAACnB,OAAZ,CAAoBP,KAArB,CAAtB;;AACA,QAAI,CAACgC,KAAK,CAACvB,KAAD,CAAV,EAAmB;AACfU,MAAAA,IAAI,CAACL,MAAL,CAAYL,KAAZ;AACAoB,MAAAA,WAAW;AACd;;AACDH,IAAAA,WAAW,CAACnB,OAAZ,CAAoBP,KAApB,GAA4B,IAA5B;AACH;;AAGD,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,OAAO,EAAEK,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,aAAV;AAAwB,UAAA,GAAG,EAAEmB,WAA7B;AAA0C,UAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,aAAV;AAAwB,UAAA,GAAG,EAAEC,WAA7B;AAA0C,UAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAUI;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAQ,QAAA,OAAO,EAAGX,MAAlB;AAA0B,QAAA,EAAE,EAAC,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,aAAV;AAAwB,UAAA,GAAG,EAAEY,WAA7B;AAA0C,UAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ,eAgBI;AAAA;AAAA;AAAA;AAAA,cAhBJ,eAiBI;AAAO,QAAA,EAAE,EAAC,YAAV;AAAuB,QAAA,IAAI,EAAC,MAA5B;AAAmC,QAAA,GAAG,EAAEC,UAAxC;AAAoD,QAAA,QAAQ;AAA5D;AAAA;AAAA;AAAA;AAAA,cAjBJ,eAkBI;AAAA;AAAA;AAAA;AAAA,cAlBJ,eAmBI;AAAQ,QAAA,EAAE,EAAC,WAAX;AAAuB,QAAA,OAAO,EAAEd,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,eAoBI;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,EAAE,EAAC,UAAV;AAAqB,UAAA,GAAG,EAAEe,QAA1B;AAAoC,UAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eA4BI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACI,QAAC,iBAAD;AAAmB,QAAA,IAAI,EAAET;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CApFD;;GAAMG,U;;MAAAA,U;AAsFN,eAAeA,UAAf","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './LinkedList.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\nclass Node {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\nclass LinkedListClass {\r\n    constructor(head = null) {\r\n        this.head = head;\r\n        this.size = 0;\r\n    }\r\n\r\n    //for insertion at tail -- currently unused\r\n    insert(data) {\r\n        if (this.head == null) {\r\n            this.head = new Node(data);\r\n        }\r\n        else {\r\n            var current = this.head;\r\n            while (current.next != null) {\r\n                current = current.next;\r\n            }\r\n            current.next = new Node(data);\r\n        }\r\n        this.size++;\r\n    }\r\n\r\n    insertAt(data, index) {\r\n        var newNode = new Node(data);\r\n        var current = this.head;\r\n        var previous;\r\n\r\n        if (index <= this.size) {\r\n\r\n            if (index === 0) {\r\n                newNode.next = this.head;\r\n                this.head = newNode;\r\n            }\r\n            else {\r\n                var i = 0;\r\n                while (i < index) {\r\n                    i++;\r\n                    previous = current;\r\n                    current = current.next;\r\n                }\r\n                newNode.next = current;\r\n                previous.next = newNode;\r\n            }\r\n            this.size++;\r\n        }\r\n    }\r\n\r\n    get(index) {\r\n        var i = 0;\r\n        var current = this.head;\r\n        while (i !== index) {\r\n            current = current.next;\r\n            i++;\r\n        }\r\n        return current.value;\r\n    }\r\n\r\n    remove(index) {\r\n        var i = 0;\r\n        var curr, prev, next;\r\n        if (index < this.size && this.size > 0) {\r\n            if (index === 0) {\r\n                this.head = this.head.next;\r\n                this.size--;\r\n            }\r\n            else {\r\n                i++;\r\n                prev = this.head;\r\n                curr = prev.next;\r\n                next = curr.next;\r\n                while (i !== index) {\r\n                    i++;\r\n                    prev = prev.next;\r\n                    curr = curr.next;\r\n                    next = next.next;\r\n                }\r\n                prev.next = next;\r\n                this.size--;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst LinkedListDisplay = (props) => {\r\n    var current = props.list.head;\r\n    var index = 0;\r\n    var componentList = [];\r\n    while (current != null) {\r\n        componentList.push(\r\n            <div key={index} className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element value={current.value}></Element>\r\n                <p>&#x2192;</p>\r\n            </div>\r\n        );\r\n        current = current.next;\r\n        index++;\r\n        componentList.push();\r\n        \r\n    }\r\n    componentList.push(<Element key={index} value=\"null\" />);\r\n    return componentList;\r\n\r\n    \r\n}\r\n\r\nconst LinkedList = () => {\r\n\r\n    const [list,] = useState(new LinkedListClass());\r\n    const [, forceRender] = useState(0);\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const listOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //insertion only occurs at head for now\r\n    function insert() {\r\n        const data = parseInt(insertValue.current.value);\r\n        const index = parseInt(insertIndex.current.value);\r\n        if (!isNaN(data)) {\r\n            list.insertAt(data, index);\r\n            forceUpdate();\r\n        }\r\n        insertValue.current.value = null;\r\n        insertIndex.current.value = null;\r\n        \r\n    }\r\n\r\n    function get() {\r\n        const index = parseInt(getIndex.current.value);\r\n        if (index < list.size) {\r\n            listOutput.current.value = list.get(index);\r\n        }\r\n        else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n    function remove() {\r\n        const index = parseInt(removeIndex.current.value);\r\n        if (!isNaN(index)) {\r\n            list.remove(index);\r\n            forceUpdate();\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"linked-list\">\r\n\r\n            <div className=\"controls\">\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"insertIndex\" ref={insertIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button onClick={ remove }id=\"removeButton\" >Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"removeIndex\" ref={removeIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"listOutput\" type=\"text\" ref={listOutput} readOnly></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get} >Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"getIndex\" ref={getIndex} type=\"text\"></input>\r\n                </span>\r\n            </div>\r\n\r\n            <div className=\"visualization\">\r\n                <LinkedListDisplay list={list} />\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n}\r\n\r\nexport default LinkedList"]},"metadata":{},"sourceType":"module"}