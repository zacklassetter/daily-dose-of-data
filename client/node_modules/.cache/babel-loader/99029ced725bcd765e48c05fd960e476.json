{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\Testing\\\\quintenreacttesting\\\\src\\\\Stack\\\\Stack.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './Stack.css';\nimport Element from './Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Stack = () => {\n  _s();\n\n  const [stack, setStack] = useState([]);\n  const stackInput = useRef();\n  const stackOutput = useRef(); //We call setStack without changing anything to force a re-render\n\n  const forceUpdate = () => {\n    setStack(prevStack => prevStack);\n  };\n\n  const push = () => {\n    const data = parseInt(stackInput.current.value);\n\n    if (!isNaN(data)) {\n      stack.push(data);\n      forceUpdate();\n    }\n\n    stackInput.current.value = null;\n  };\n\n  const pop = () => {\n    const data = stack.pop();\n    forceUpdate();\n    if (data === undefined) stackOutput.current.value = \"None\";else stackOutput.current.value = data;\n  };\n\n  const peek = () => {\n    const data = stack[stack.length - 1];\n    if (data === undefined) stackOutput.current.value = \"None\";else stackOutput.current.value = data;\n  };\n\n  return stack.map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index + 1, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this);\n  });\n};\n\n_s(Stack, \"0Uq/kzg5rQNqHYemoUYBdMObhII=\");\n\n_c = Stack;\nexport default Stack;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stack\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/Testing/quintenreacttesting/src/Stack/Stack.js"],"names":["React","useState","useRef","Element","Stack","stack","setStack","stackInput","stackOutput","forceUpdate","prevStack","push","data","parseInt","current","value","isNaN","pop","undefined","peek","length","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMM,UAAU,GAAGL,MAAM,EAAzB;AACA,QAAMM,WAAW,GAAGN,MAAM,EAA1B,CAJmB,CAMnB;;AACA,QAAMO,WAAW,GAAG,MAAM;AACzBH,IAAAA,QAAQ,CAACI,SAAS,IAAKA,SAAf,CAAR;AACA,GAFD;;AAIA,QAAMC,IAAI,GAAG,MAAM;AAClB,UAAMC,IAAI,GAAGC,QAAQ,CAACN,UAAU,CAACO,OAAX,CAAmBC,KAApB,CAArB;;AACA,QAAI,CAACC,KAAK,CAACJ,IAAD,CAAV,EAAkB;AACjBP,MAAAA,KAAK,CAACM,IAAN,CAAWC,IAAX;AACAH,MAAAA,WAAW;AACX;;AACDF,IAAAA,UAAU,CAACO,OAAX,CAAmBC,KAAnB,GAA2B,IAA3B;AACA,GAPD;;AASA,QAAME,GAAG,GAAG,MAAM;AACjB,UAAML,IAAI,GAAGP,KAAK,CAACY,GAAN,EAAb;AACAR,IAAAA,WAAW;AACX,QAAIG,IAAI,KAAKM,SAAb,EACCV,WAAW,CAACM,OAAZ,CAAoBC,KAApB,GAA4B,MAA5B,CADD,KAGCP,WAAW,CAACM,OAAZ,CAAoBC,KAApB,GAA4BH,IAA5B;AACD,GAPD;;AASA,QAAMO,IAAI,GAAG,MAAM;AAClB,UAAMP,IAAI,GAAGP,KAAK,CAACA,KAAK,CAACe,MAAN,GAAa,CAAd,CAAlB;AACA,QAAIR,IAAI,KAAKM,SAAb,EACCV,WAAW,CAACM,OAAZ,CAAoBC,KAApB,GAA4B,MAA5B,CADD,KAGCP,WAAW,CAACM,OAAZ,CAAoBC,KAApB,GAA4BH,IAA5B;AACD,GAND;;AAQA,SACCP,KAAK,CAACgB,GAAN,CAAU,CAACN,KAAD,EAAQO,KAAR,KAAkB;AAC3B,wBAAO,QAAC,OAAD;AAAuB,MAAA,KAAK,EAAEP;AAA9B,OAAcO,KAAK,GAAC,CAApB;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,GAFD,CADD;AAKA,CA1CD;;GAAMlB,K;;KAAAA,K;AA4CN,eAAeA,KAAf","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './Stack.css';\r\nimport Element from './Element';\r\n\r\nconst Stack = () => {\r\n\t\r\n\tconst [stack, setStack] = useState([]);\r\n\tconst stackInput = useRef();\r\n\tconst stackOutput = useRef();\r\n\t\r\n\t//We call setStack without changing anything to force a re-render\r\n\tconst forceUpdate = () => {\r\n\t\tsetStack(prevStack => (prevStack));\r\n\t}\r\n\t\r\n\tconst push = () => {\r\n\t\tconst data = parseInt(stackInput.current.value);\r\n\t\tif (!isNaN(data)) {\r\n\t\t\tstack.push(data);\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t\tstackInput.current.value = null;\r\n\t}\r\n\t\r\n\tconst pop = () => {\r\n\t\tconst data = stack.pop();\r\n\t\tforceUpdate();\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\tconst peek = () => {\r\n\t\tconst data = stack[stack.length-1];\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\tstack.map((value, index) => {\r\n\t\t\treturn <Element key={index+1} value={value} />\r\n\t\t})\r\n\t);\r\n}\r\n\r\nexport default Stack;"]},"metadata":{},"sourceType":"module"}