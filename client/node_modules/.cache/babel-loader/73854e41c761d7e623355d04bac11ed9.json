{"ast":null,"code":"import _slicedToArray from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useState,useRef,useEffect}from'react';import'./Set.scss';import Element from'../Element/Element';//react component to display a set\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SetDisplay=function SetDisplay(props){var componentList=[];componentList.push(/*#__PURE__*/_jsx(\"p\",{className:\"curly-brace\",children:\"{\"},-1));componentList=componentList.concat(_toConsumableArray(props.set).map(function(value,index){return/*#__PURE__*/_jsx(Element,{value:value},index);}));componentList.push(/*#__PURE__*/_jsx(\"p\",{className:\"curly-brace\",children:\"}\"},componentList.length));return componentList;};//react component for set visualization\nvar MySet=function MySet(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState(new Set()),_useState4=_slicedToArray(_useState3,2),set=_useState4[0],setSet=_useState4[1];var insertInput=useRef();var removeInput=useRef();var findInput=useRef();var findOutput=useRef();//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//function to create a random set\nvar randomSet=function randomSet(){var size=randInt(20,100);var newSet=new Set();for(var i=0;i<size;i++){newSet.add(randInt(-999,1000));}setSet(newSet);};var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//function to create an empty set\nvar emptySet=function emptySet(){setSet(new Set());};//initialize to a random set\nuseEffect(randomSet,[]);//function to insert into set\nvar insert=function insert(){var data=parseInt(insertInput.current.value);if(isNaN(data))data=randInt(-999,1000);set.add(data);forceUpdate();insertInput.current.value=null;};//function to remove from set\nvar remove=function remove(){var data=parseInt(removeInput.current.value);if(!isNaN(data))set.delete(data);forceUpdate();removeInput.current.value=null;};//function to find a value in the set\nvar find=function find(){var data=parseInt(findInput.current.value);if(!isNaN(data)){if(set.has(data))findOutput.current.value=data+\" is in set\";else findOutput.current.value=data+\" not in set\";}forceUpdate();findInput.current.value=null;};return/*#__PURE__*/_jsxs(\"div\",{className:\"set\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:randomSet,children:\"Random\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"emptyButton\",onClick:emptySet,children:\"Empty\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"insertButton\",onClick:insert,children:\"Insert\"}),/*#__PURE__*/_jsx(\"input\",{id:\"insertInput\",ref:insertInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"removeButton\",onClick:remove,children:\"Remove\"}),/*#__PURE__*/_jsx(\"input\",{id:\"removeInput\",ref:removeInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"findButton\",onClick:find,children:\"Find\"}),/*#__PURE__*/_jsx(\"input\",{id:\"findInput\",ref:findInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{id:\"findOutput\",ref:findOutput,type:\"text\",readOnly:true})]}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization\",children:/*#__PURE__*/_jsx(SetDisplay,{set:set})})]});};export default MySet;","map":{"version":3,"sources":["C:/Users/quint/Documents/Daily_Dose_of_Data/client/src/Set/Set.js"],"names":["React","useState","useRef","useEffect","Element","SetDisplay","props","componentList","push","concat","set","map","value","index","length","MySet","forceRender","Set","setSet","insertInput","removeInput","findInput","findOutput","forceUpdate","renders","randomSet","size","randInt","newSet","i","add","min","max","Math","floor","random","emptySet","insert","data","parseInt","current","isNaN","remove","delete","find","has"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Set.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a set\r\nconst SetDisplay = (props) => {\r\n    var componentList = [];\r\n    componentList.push(<p className=\"curly-brace\" key={-1}>&#123;</p>);\r\n    componentList = componentList.concat([...props.set].map((value, index) => {\r\n        return <Element key={index} value={value}></Element>;\r\n    }));\r\n    componentList.push(<p className=\"curly-brace\" key={componentList.length}>&#125;</p>);\r\n    return componentList;\r\n}\r\n\r\n//react component for set visualization\r\nconst MySet = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [set, setSet] = useState(new Set());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const findOutput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random set\r\n    const randomSet = () => {\r\n        const size = randInt(20, 100);\r\n        const newSet = new Set();\r\n        for (let i = 0; i < size; i++)\r\n            newSet.add(randInt(-999,1000));\r\n        setSet(newSet);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to create an empty set\r\n    const emptySet = () => {\r\n        setSet(new Set());\r\n    }\r\n\r\n    //initialize to a random set\r\n    useEffect(randomSet, []);\r\n\r\n    //function to insert into set\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999,1000);\r\n        set.add(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from set\r\n    const remove = () => {\r\n        var data = parseInt(removeInput.current.value);\r\n        if (!isNaN(data))\r\n            set.delete(data);\r\n        forceUpdate();\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to find a value in the set\r\n    const find = () => {\r\n        var data = parseInt(findInput.current.value);\r\n        if (!isNaN(data)) {\r\n            if (set.has(data))\r\n                findOutput.current.value = data + \" is in set\"\r\n            else\r\n                findOutput.current.value = data + \" not in set\"\r\n        }\r\n        forceUpdate();\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"set\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomSet}>Random</button>\r\n                <br />\r\n                <button id=\"emptyButton\" onClick={emptySet}>Empty</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"findButton\" onClick={find}>Find</button>\r\n                <input id=\"findInput\" ref={findInput} type=\"text\"></input>\r\n                <br />\r\n                <input id=\"findOutput\" ref={findOutput} type=\"text\" readOnly></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <SetDisplay set={set} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MySet;"]},"metadata":{},"sourceType":"module"}