{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\HashTable\\\\HashTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './HashTable.scss';\nimport Element from '../Element/Element'; //class for a hash table with linear probing\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HashTableClass {\n  constructor(size, loadFactor) {\n    this.array = [];\n\n    for (let i = 0; i < size; i++) this.array.push(null);\n\n    this.elements = 0;\n    this.size = size;\n    this.LOADFACTOR = loadFactor;\n  }\n\n  hash(value) {\n    return value % this.size;\n  }\n\n  resize() {\n    let oldArray = this.array;\n    this.array = [];\n\n    for (let i = 0; i < 2 * this.size; i++) this.array.push(null);\n\n    this.size = 2 * this.size;\n\n    for (let i = 0; i < oldArray.length; i++) if (oldArray[i] !== undefined) this.insert(oldArray[i]);\n  }\n\n  insert(value) {\n    let hashCode = this.hash(value);\n\n    if (this.array[hashCode] === undefined) {\n      this.array[hashCode] = value;\n      return hashCode;\n    } else {}\n\n    this.elements++;\n    if (this.elements / this.size > this.LOADFACTOR) this.resize();\n  }\n\n  remove(value) {}\n\n  contains(value) {}\n\n} //react component to display a hashtable\n\n\nconst HashTableDisplay = props => {\n  return props.hashTable.array.map((index, value) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labeledElement\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  });\n}; //react component for hash table visualization\n\n\n_c = HashTableDisplay;\n\nconst HashTable = () => {\n  _s();\n\n  const [hashTable, setHashTable] = useState(new HashTableClass(10, 0.5));\n  const randomSize = useRef();\n  const randomLF = useRef();\n  const buildSize = useRef();\n  const buildLF = useRef();\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const containsInput = useRef(); //function to create a random hashTable\n\n  const randomHashTable = () => {}; //function to build an empty hash table\n\n\n  const build = () => {}; //function to insert into hash table\n\n\n  const insert = () => {}; //function to remove from hash table\n\n\n  const remove = () => {}; //function to check if hash table contains value\n\n\n  const contains = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hash-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomHashTable,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomSizeInput\",\n          ref: randomSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Load Factor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomLFInput\",\n          ref: randomLF,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"buildButton\",\n        onClick: build,\n        children: \"Build\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"buildSizeInput\",\n          ref: buildSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Load Factor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"buildLFInput\",\n          ref: buildLF,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"insertInput\",\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"removeInput\",\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"containsButton\",\n        onClick: contains,\n        children: \"Contains\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"containsInput\",\n        ref: containsInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(HashTableDisplay, {\n        hashTable: hashTable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HashTable, \"PhAXPtwuYALNXPvZKCmS97fT8SE=\");\n\n_c2 = HashTable;\nexport default HashTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HashTableDisplay\");\n$RefreshReg$(_c2, \"HashTable\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/HashTable/HashTable.js"],"names":["React","useState","useRef","useEffect","Element","HashTableClass","constructor","size","loadFactor","array","i","push","elements","LOADFACTOR","hash","value","resize","oldArray","length","undefined","insert","hashCode","remove","contains","HashTableDisplay","props","hashTable","map","index","HashTable","setHashTable","randomSize","randomLF","buildSize","buildLF","insertInput","removeInput","containsInput","randomHashTable","build"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './HashTable.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//class for a hash table with linear probing\r\nclass HashTableClass {\r\n    constructor (size, loadFactor) {\r\n        this.array = [];\r\n        for (let i = 0; i < size; i++)\r\n            this.array.push(null);\r\n        this.elements = 0;\r\n        this.size = size;\r\n        this.LOADFACTOR = loadFactor;\r\n    }\r\n\r\n    hash (value) {\r\n        return value % this.size;\r\n    }\r\n\r\n    resize () {\r\n        let oldArray = this.array;\r\n        this.array = [];\r\n        for (let i = 0; i < 2*this.size; i++)\r\n            this.array.push(null);\r\n        this.size = 2*this.size;\r\n        for (let i = 0; i < oldArray.length; i++)\r\n            if (oldArray[i] !== undefined)\r\n                this.insert(oldArray[i]);\r\n    }\r\n\r\n    insert (value) {\r\n        let hashCode = this.hash(value);\r\n        if (this.array[hashCode] === undefined) {\r\n            this.array[hashCode] = value;\r\n            return hashCode;\r\n        } else {\r\n\r\n        }\r\n        this.elements++;\r\n        if (this.elements/this.size > this.LOADFACTOR)\r\n            this.resize();\r\n    }\r\n\r\n    remove (value) {\r\n\r\n    }\r\n\r\n    contains (value) {\r\n\r\n    }\r\n}\r\n\r\n//react component to display a hashtable\r\nconst HashTableDisplay = (props) => {\r\n    return props.hashTable.array.map((index, value) => {\r\n        return (\r\n            <div key={index} className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element value={value}></Element>\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\n//react component for hash table visualization\r\nconst HashTable = () => {\r\n\r\n    const [hashTable, setHashTable] = useState(new HashTableClass(10, 0.5));\r\n    const randomSize = useRef();\r\n    const randomLF = useRef();\r\n    const buildSize = useRef();\r\n    const buildLF = useRef();\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const containsInput = useRef();\r\n\r\n    //function to create a random hashTable\r\n    const randomHashTable = () => {\r\n\r\n    }\r\n\r\n    //function to build an empty hash table\r\n    const build = () => {\r\n\r\n    }\r\n\r\n    //function to insert into hash table\r\n    const insert = () => {\r\n\r\n    }\r\n\r\n    //function to remove from hash table\r\n    const remove = () => {\r\n\r\n    }\r\n\r\n    //function to check if hash table contains value\r\n    const contains = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"hash-table\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHashTable}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Load Factor</label>\r\n                    <input id=\"randomLFInput\" ref={randomLF} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"buildButton\" onClick={build}>Build</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"buildSizeInput\" ref={buildSize} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Load Factor</label>\r\n                    <input id=\"buildLFInput\" ref={buildLF} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"containsButton\" onClick={contains}>Contains</button>\r\n                <input id=\"containsInput\" ref={containsInput} type=\"text\"></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <HashTableDisplay hashTable={hashTable} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HashTable;"]},"metadata":{},"sourceType":"module"}