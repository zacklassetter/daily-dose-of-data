{"ast":null,"code":"import _slicedToArray from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import React,{useState,useRef,useEffect,useCallback}from'react';import'./BinaryHeap.scss';import BinaryTreeDisplay from'../BinaryTree/BinaryTreeDisplay.js';import{BinaryTreeNode,BinaryTreeClass}from'../BinaryTree/BinaryTree.js';//class for binary heap data structure\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var BinaryHeapClass=/*#__PURE__*/function(){function BinaryHeapClass(){_classCallCheck(this,BinaryHeapClass);this.heap=[];this.focus=null;this.focusNode=null;this.green=null;this.greenNode=null;this.pink=null;this.pinkNode=null;}_createClass(BinaryHeapClass,[{key:\"insert\",value:function insert(value){this.heap.push(value);var current=this.heap.length-1;var parent=Math.floor((current-1)/2);while(parent>=0){if(this.heap[current]<this.heap[parent]){var temp=this.heap[parent];this.heap[parent]=this.heap[current];this.heap[current]=temp;current=parent;parent=Math.floor((current-1)/2);}else break;}}},{key:\"remove\",value:function remove(){if(this.heap.length!==0){var returnValue=this.heap[0];if(this.heap.length===1)this.heap=[];else{this.heap[0]=this.heap.pop();var current=0;while(current<this.heap.length){if(2*current+2<this.heap.length){if(this.heap[current]<=this.heap[2*current+1]&&this.heap[current]<=this.heap[2*current+2]){break;}else if(this.heap[2*current+1]<this.heap[2*current+2]){var temp=this.heap[current];this.heap[current]=this.heap[2*current+1];this.heap[2*current+1]=temp;current=2*current+1;}else{var _temp=this.heap[current];this.heap[current]=this.heap[2*current+2];this.heap[2*current+2]=_temp;current=2*current+2;}}else if(2*current+1<this.heap.length){if(this.heap[current]>this.heap[2*current+1]){var _temp2=this.heap[current];this.heap[current]=this.heap[2*current+1];this.heap[2*current+1]=_temp2;current=2*current+1;}else{break;}}else{break;}}}return returnValue;}}},{key:\"getTree\",value:function getTree(){var tree=new BinaryTreeClass(null);this.focusNode=null;this.greenNode=null;this.pinkNode=null;if(this.heap.length!==0){tree.root=new BinaryTreeNode(this.heap[0]);if(this.focus===0)this.focusNode=tree.root;if(this.green===0)this.greenNode=tree.root;if(this.pink===0)this.pinkNode=tree.root;var nodes=[tree.root];var newNodes=[];var indices=[0];var newIndices=[];while(nodes.length!==0){for(var i=0;i<nodes.length;i++){if(2*indices[i]+1<this.heap.length){nodes[i].left=new BinaryTreeNode(this.heap[2*indices[i]+1]);if(2*indices[i]+1===this.focus)this.focusNode=nodes[i].left;if(2*indices[i]+1===this.green)this.greenNode=nodes[i].left;if(2*indices[i]+1===this.pink)this.pinkNode=nodes[i].left;newNodes.push(nodes[i].left);newIndices.push(2*indices[i]+1);}if(2*indices[i]+2<this.heap.length){nodes[i].right=new BinaryTreeNode(this.heap[2*indices[i]+2]);if(2*indices[i]+2===this.focus)this.focusNode=nodes[i].right;if(2*indices[i]+2===this.green)this.greenNode=nodes[i].right;if(2*indices[i]+2===this.pink)this.pinkNode=nodes[i].right;newNodes.push(nodes[i].right);newIndices.push(2*indices[i]+2);}}nodes=newNodes;newNodes=[];indices=newIndices;newIndices=[];}}return tree;}}]);return BinaryHeapClass;}();//main react component for binary heap visualization\nvar BinaryHeap=function BinaryHeap(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState(new BinaryHeapClass()),_useState4=_slicedToArray(_useState3,2),heap=_useState4[0],setHeap=_useState4[1];var insertInput=useRef();var speedSlider=useRef();var interval=useRef();var animating=useRef();var animationFunction=useRef();var animationCurrent=useRef();//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//function to create a random heap\nvar randomHeap=function randomHeap(){if(animating.current)toggleAnimation();var elements=randInt(2,32);var newHeap=new BinaryHeapClass();for(var i=0;i<elements;i++){newHeap.insert(randInt(-999,1000));}setHeap(newHeap);};var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//function to pause or continue animation\nvar toggleAnimation=useCallback(function(){if(animating.current){clearInterval(interval.current);animating.current=false;animationFunction.current=null;animationCurrent.current=null;}else{interval.current=setInterval(function(){animationFunction.current();forceUpdate();},1000-speedSlider.current.value);animating.current=true;}},[]);//initialize the tree to a random binary heap\nuseEffect(randomHeap,[toggleAnimation]);//function to insert a value into the heap\nvar insert=function insert(){if(!animating.current){var data=parseInt(insertInput.current.value);if(isNaN(data))data=randInt(-999,1000);insertInput.current.value=null;heap.heap.push(data);heap.pink=null;heap.green=heap.heap.length-1;forceUpdate();animationFunction.current=insertStep;animationCurrent.current=heap.heap.length-1;toggleAnimation();}};//function to do a single step of insertion animation\nvar insertStep=function insertStep(){var parent=Math.floor((animationCurrent.current-1)/2);if(parent<0)toggleAnimation();else{if(heap.heap[parent]>heap.heap[animationCurrent.current]){var temp=heap.heap[parent];heap.heap[parent]=heap.heap[animationCurrent.current];heap.heap[animationCurrent.current]=temp;animationCurrent.current=parent;heap.green=animationCurrent.current;}else toggleAnimation();}};//function to remove a value from the heap\nvar remove=function remove(){if(!animating.current&&heap.heap.length>0){if(heap.heap.length===1){heap.remove();forceUpdate();}else{heap.green=null;heap.pink=0;heap.focus=heap.heap.length-1;forceUpdate();animationFunction.current=removeStep;animationCurrent.current=0;toggleAnimation();}}};//function to one step of remove animation\nvar removeStep=function removeStep(){if(heap.focus!==null){heap.heap[0]=heap.heap.pop();heap.focus=null;}else{if(2*animationCurrent.current+2<heap.heap.length){if(heap.heap[animationCurrent.current]<=heap.heap[2*animationCurrent.current+1]&&heap.heap[animationCurrent.current]<=heap.heap[2*animationCurrent.current+2]){toggleAnimation();}else if(heap.heap[2*animationCurrent.current+1]<heap.heap[2*animationCurrent.current+2]){var temp=heap.heap[animationCurrent.current];heap.heap[animationCurrent.current]=heap.heap[2*animationCurrent.current+1];heap.heap[2*animationCurrent.current+1]=temp;animationCurrent.current=2*animationCurrent.current+1;heap.pink=animationCurrent.current;}else{var _temp3=heap.heap[animationCurrent.current];heap.heap[animationCurrent.current]=heap.heap[2*animationCurrent.current+2];heap.heap[2*animationCurrent.current+2]=_temp3;animationCurrent.current=2*animationCurrent.current+2;heap.pink=animationCurrent.current;}}else if(2*animationCurrent.current+1<heap.heap.length){if(heap.heap[animationCurrent.current]>heap.heap[2*animationCurrent.current+1]){var _temp4=heap.heap[animationCurrent.current];heap.heap[animationCurrent.current]=heap.heap[2*animationCurrent.current+1];heap.heap[2*animationCurrent.current+1]=_temp4;animationCurrent.current=2*animationCurrent.current+1;heap.pink=animationCurrent.current;}else{toggleAnimation();}}else{toggleAnimation();}}};//changes the animation speed when the slider changes\nvar updateSpeed=function updateSpeed(){if(animationFunction.current!=null){clearInterval(interval.current);interval.current=setInterval(function(){animationFunction.current();forceUpdate();},1000-speedSlider.current.value);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"binary-heap\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:randomHeap,children:\"Random\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"insertButton\",onClick:insert,children:\"Insert\"}),/*#__PURE__*/_jsx(\"input\",{ref:insertInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"removeButton\",onClick:remove,children:\"Remove\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledSlider\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Animation Speed\"}),/*#__PURE__*/_jsx(\"input\",{className:\"slider\",ref:speedSlider,onChange:updateSpeed,min:\"0\",max:\"990\",type:\"range\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization\",children:/*#__PURE__*/_jsx(BinaryTreeDisplay,{tree:heap.getTree(),border:heap.focusNode,green:heap.greenNode,pink:heap.pinkNode})})]});};export default BinaryHeap;","map":{"version":3,"sources":["C:/Users/quint/Documents/Daily_Dose_of_Data/client/src/BinaryHeap/BinaryHeap.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","BinaryTreeNode","BinaryTreeClass","BinaryHeapClass","heap","focus","focusNode","green","greenNode","pink","pinkNode","value","push","current","length","parent","Math","floor","temp","returnValue","pop","tree","root","nodes","newNodes","indices","newIndices","i","left","right","BinaryHeap","forceRender","setHeap","insertInput","speedSlider","interval","animating","animationFunction","animationCurrent","forceUpdate","renders","randomHeap","toggleAnimation","elements","randInt","newHeap","insert","min","max","random","clearInterval","setInterval","data","parseInt","isNaN","insertStep","remove","removeStep","updateSpeed","getTree"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinaryHeap.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\n\r\n//class for binary heap data structure\r\nexport class BinaryHeapClass {\r\n    constructor() {\r\n        this.heap = [];\r\n        this.focus = null;\r\n        this.focusNode = null;\r\n        this.green = null;\r\n        this.greenNode = null;\r\n        this.pink = null;\r\n        this.pinkNode = null;\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        var current = this.heap.length-1;\r\n        var parent = Math.floor((current-1)/2);\r\n        while(parent >= 0) {\r\n            if (this.heap[current] < this.heap[parent]) {\r\n                let temp = this.heap[parent];\r\n                this.heap[parent] = this.heap[current];\r\n                this.heap[current] = temp;\r\n                current = parent;\r\n                parent = Math.floor((current-1)/2);\r\n            } else\r\n                break;\r\n        }\r\n    }\r\n\r\n    remove() {\r\n        if (this.heap.length !== 0) {\r\n            var returnValue = this.heap[0];\r\n            if (this.heap.length === 1)\r\n                this.heap = [];\r\n            else {\r\n                this.heap[0] = this.heap.pop();\r\n                var current = 0;\r\n                while (current < this.heap.length) {\r\n                    if (2 * current + 2 < this.heap.length) {\r\n                        if (this.heap[current] <= this.heap[2 * current + 1] && this.heap[current] <= this.heap[2 * current + 2]) {\r\n                            break;\r\n                        } else if (this.heap[2 * current + 1] < this.heap[2 * current + 2]) {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 1];\r\n                            this.heap[2 * current + 1] = temp;\r\n                            current = 2 * current + 1;\r\n                        } else {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 2];\r\n                            this.heap[2 * current + 2] = temp;\r\n                            current = 2 * current + 2;\r\n                        }\r\n                    } else if (2 * current + 1 < this.heap.length) {\r\n                        if (this.heap[current] > this.heap[2 * current + 1]) {\r\n                            let temp = this.heap[current];\r\n                            this.heap[current] = this.heap[2 * current + 1];\r\n                            this.heap[2 * current + 1] = temp;\r\n                            current = 2 * current + 1;\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return returnValue;\r\n        }\r\n    }\r\n\r\n    getTree() {\r\n        var tree = new BinaryTreeClass(null);\r\n        this.focusNode = null;\r\n        this.greenNode = null;\r\n        this.pinkNode = null;\r\n        if (this.heap.length !== 0) {\r\n            tree.root = new BinaryTreeNode(this.heap[0]);\r\n            if (this.focus === 0)\r\n                this.focusNode = tree.root;\r\n            if (this.green === 0)\r\n                this.greenNode = tree.root;\r\n            if (this.pink === 0)\r\n                this.pinkNode = tree.root;\r\n            var nodes = [tree.root];\r\n            var newNodes = [];\r\n            var indices = [0];\r\n            var newIndices = [];\r\n            while (nodes.length !== 0) {\r\n                for (let i = 0; i < nodes.length; i++) {\r\n                    if (2*indices[i]+1 < this.heap.length) {\r\n                        nodes[i].left = new BinaryTreeNode(this.heap[2*indices[i]+1]);\r\n                        if (2*indices[i]+1 === this.focus)\r\n                            this.focusNode = nodes[i].left;\r\n                        if (2*indices[i]+1 === this.green)\r\n                            this.greenNode = nodes[i].left;\r\n                        if (2*indices[i]+1 === this.pink)\r\n                            this.pinkNode = nodes[i].left;\r\n                        newNodes.push(nodes[i].left);\r\n                        newIndices.push(2*indices[i]+1);\r\n                    }\r\n                    if (2*indices[i]+2 < this.heap.length) {\r\n                        nodes[i].right = new BinaryTreeNode(this.heap[2*indices[i]+2]);\r\n                        if (2*indices[i]+2 === this.focus)\r\n                            this.focusNode = nodes[i].right;\r\n                        if (2*indices[i]+2 === this.green)\r\n                            this.greenNode = nodes[i].right;\r\n                        if (2*indices[i]+2 === this.pink)\r\n                            this.pinkNode = nodes[i].right;\r\n                        newNodes.push(nodes[i].right);\r\n                        newIndices.push(2*indices[i]+2);\r\n                    }\r\n                }\r\n                nodes = newNodes;\r\n                newNodes = [];\r\n                indices = newIndices;\r\n                newIndices = [];\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n}\r\n\r\n//main react component for binary heap visualization\r\nconst BinaryHeap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const insertInput = useRef();\r\n    const speedSlider = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationCurrent = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random heap\r\n    const randomHeap = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const elements = randInt(2,32);\r\n        var newHeap = new BinaryHeapClass();\r\n        for (let i = 0; i < elements; i++)\r\n            newHeap.insert(randInt(-999,1000));\r\n        setHeap(newHeap);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            animationFunction.current = null;\r\n            animationCurrent.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random binary heap\r\n    useEffect(randomHeap, [toggleAnimation]);\r\n\r\n    //function to insert a value into the heap\r\n    const insert = () => {\r\n        if (!animating.current) {\r\n            var data = parseInt(insertInput.current.value);\r\n            if (isNaN(data))\r\n                data = randInt(-999, 1000);\r\n            insertInput.current.value = null;\r\n            heap.heap.push(data);\r\n            heap.pink = null;\r\n            heap.green = heap.heap.length - 1;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationCurrent.current = heap.heap.length - 1;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        var parent = Math.floor((animationCurrent.current-1)/2);\r\n        if (parent < 0)\r\n            toggleAnimation();\r\n        else {\r\n            if (heap.heap[parent] > heap.heap[animationCurrent.current]) {\r\n                let temp = heap.heap[parent];\r\n                heap.heap[parent] = heap.heap[animationCurrent.current];\r\n                heap.heap[animationCurrent.current] = temp;\r\n                animationCurrent.current = parent;\r\n                heap.green = animationCurrent.current;\r\n            } else\r\n                toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to remove a value from the heap\r\n    const remove = () => {\r\n        if (!animating.current && heap.heap.length > 0) {\r\n            if (heap.heap.length === 1) {\r\n                heap.remove();\r\n                forceUpdate();\r\n            } else {\r\n                heap.green = null;\r\n                heap.pink = 0;\r\n                heap.focus = heap.heap.length-1;\r\n                forceUpdate();\r\n                animationFunction.current = removeStep;\r\n                animationCurrent.current = 0;\r\n                toggleAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    //function to one step of remove animation\r\n    const removeStep = () => {\r\n        if (heap.focus !== null) {\r\n            heap.heap[0] = heap.heap.pop();\r\n            heap.focus = null;\r\n        } else {\r\n            if (2 * animationCurrent.current + 2 < heap.heap.length) {\r\n                if (heap.heap[animationCurrent.current] <= heap.heap[2 * animationCurrent.current + 1] && heap.heap[animationCurrent.current] <= heap.heap[2 * animationCurrent.current + 2]) {\r\n                    toggleAnimation();\r\n                } else if (heap.heap[2 * animationCurrent.current + 1] < heap.heap[2 * animationCurrent.current + 2]) {\r\n                    let temp = heap.heap[animationCurrent.current];\r\n                    heap.heap[animationCurrent.current] = heap.heap[2 * animationCurrent.current + 1];\r\n                    heap.heap[2 * animationCurrent.current + 1] = temp;\r\n                    animationCurrent.current = 2 * animationCurrent.current + 1;\r\n                    heap.pink = animationCurrent.current;\r\n                } else {\r\n                    let temp = heap.heap[animationCurrent.current];\r\n                    heap.heap[animationCurrent.current] = heap.heap[2 * animationCurrent.current + 2];\r\n                    heap.heap[2 * animationCurrent.current + 2] = temp;\r\n                    animationCurrent.current = 2 * animationCurrent.current + 2;\r\n                    heap.pink = animationCurrent.current;\r\n                }\r\n            } else if (2 * animationCurrent.current + 1 < heap.heap.length) {\r\n                if (heap.heap[animationCurrent.current] > heap.heap[2 * animationCurrent.current + 1]) {\r\n                    let temp = heap.heap[animationCurrent.current];\r\n                    heap.heap[animationCurrent.current] = heap.heap[2 * animationCurrent.current + 1];\r\n                    heap.heap[2 * animationCurrent.current + 1] = temp;\r\n                    animationCurrent.current = 2 * animationCurrent.current + 1;\r\n                    heap.pink = animationCurrent.current;\r\n                } else {\r\n                    toggleAnimation();\r\n                }\r\n            } else {\r\n                toggleAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-heap\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHeap}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={heap.getTree()} border={heap.focusNode} green={heap.greenNode} pink={heap.pinkNode} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryHeap;"]},"metadata":{},"sourceType":"module"}