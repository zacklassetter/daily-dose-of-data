{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\BinarySearchTree\\\\BinarySearchTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './BinarySearchTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary search tree\n\n\nclass BinarySearchTreeClass {\n  constructor() {\n    this.root = null;\n    this.height = 0;\n  }\n\n  insert(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height;\n  }\n\n  remove(value) {\n    var current = this.root;\n    var parent = null; //find a node equal to value else exit function\n\n    while (true) {\n      if (current === null) return;\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else break;\n    } //if node has no children set parent child to null\n\n\n    if (current.left === null && current.right === null) {\n      if (parent === null) this.root = null;else if (value < parent.value) parent.left = null;else parent.right = null;\n    } //if node has 1 child set parent child to current child\n    else if (current.right === null) {\n        if (parent === null) this.root = current.left;else if (value < parent.value) parent.left = current.left;else parent.right = current.left;\n      } else if (current.left === null) {\n        if (parent === null) this.root = current.right;else if (value < parent.value) parent.left = current.right;else parent.right = current.right;\n      } //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\n      else {\n          //find the leftmost child of right subtree of current, set current to that value\n          var leftmostChild = current.right;\n          parent = current;\n\n          while (leftmostChild.left !== null) {\n            parent = leftmostChild;\n            leftmostChild = leftmostChild.left;\n          }\n\n          current.value = leftmostChild.value; //delete the leftmost child of right subtree\n\n          current = leftmostChild;\n\n          if (current.left === null && current.right === null) {\n            if (current.value < parent.value) parent.left = null;else parent.right = null;\n          } else if (current.right === null) {\n            if (current.value < parent.value) parent.left = current.left;else parent.right = current.left;\n          } else {\n            if (current.value < parent.value) parent.left = current.right;else parent.right = current.right;\n          }\n        }\n  }\n\n  find(value) {}\n\n} //react component for binary search tree\n\n\nconst BinarySearchTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new BinarySearchTreeClass());\n  const insertInput = useRef();\n  const removeInput = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {\n    const height = randInt(2, 6);\n    var newTree = new BinarySearchTreeClass();\n\n    while (newTree.height <= height) {\n      const insertValue = randInt(-999, 1000);\n      newTree.insert(insertValue);\n    }\n\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the tree to a random BST\n\n\n  useEffect(randomTree, []); //function to insert into the binary search tree on button click\n\n  const insert = () => {\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    tree.insert(data);\n    forceUpdate();\n    insertInput.current.value = null;\n  }; //function to remove from binary search tree on button click\n\n\n  const remove = () => {\n    if (tree.root !== null) {\n      var data = parseInt(removeInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      tree.remove(data);\n      forceUpdate();\n    }\n\n    removeInput.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomTree,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinarySearchTree, \"q2TC6q7H2VYIxb8tngUyGh/lbtY=\");\n\n_c = BinarySearchTree;\nexport default BinarySearchTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinarySearchTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/BinarySearchTree/BinarySearchTree.js"],"names":["React","useState","useRef","useEffect","BinaryTreeDisplay","BinaryTreeNode","constructor","value","left","right","BinarySearchTreeClass","root","height","insert","current","parent","remove","leftmostChild","find","BinarySearchTree","forceRender","tree","setTree","insertInput","removeInput","forceUpdate","renders","randomTree","randInt","newTree","insertValue","min","max","Math","floor","random","data","parseInt","isNaN"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './BinarySearchTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary search tree\r\nclass BinarySearchTreeClass {\r\n    constructor(){\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    find (value) {\r\n\r\n    }\r\n}\r\n\r\n//react component for binary search tree\r\nconst BinarySearchTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinarySearchTreeClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        const height = randInt(2,6);\r\n        var newTree = new BinarySearchTreeClass();\r\n        while(newTree.height <= height) {\r\n            const insertValue = randInt(-999,1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, []);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if(isNaN(data))\r\n            data = randInt(-999,1000);\r\n        tree.insert(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if(tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if(isNaN(data))\r\n                data = tree.root.value;\r\n            tree.remove(data);\r\n            forceUpdate();\r\n        }\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input ref={removeInput} type=\"text\"></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinarySearchTree;"]},"metadata":{},"sourceType":"module"}