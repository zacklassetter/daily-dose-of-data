{"ast":null,"code":"import _slicedToArray from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createClass from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import React,{useState,useRef,useEffect,useCallback}from'react';import'./BinarySearchTree.scss';import BinaryTreeDisplay from'../BinaryTree/BinaryTreeDisplay.js';import Element from'../Element/Element.js';//class for node in binary tree\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BinaryTreeNode=function BinaryTreeNode(value){_classCallCheck(this,BinaryTreeNode);this.value=value;this.left=null;this.right=null;};//class for binary search tree\nvar BinarySearchTreeClass=/*#__PURE__*/function(){function BinarySearchTreeClass(){_classCallCheck(this,BinarySearchTreeClass);this.root=null;this.height=0;}_createClass(BinarySearchTreeClass,[{key:\"insert\",value:function insert(value){var current=this.root;var parent=null;var height=1;while(current!=null){if(value<current.value){parent=current;current=current.left;height++;}else if(value>current.value){parent=current;current=current.right;height++;}else return;}if(parent===null)this.root=new BinaryTreeNode(value);else if(value<parent.value)parent.left=new BinaryTreeNode(value);else parent.right=new BinaryTreeNode(value);if(height>this.height)this.height=height;}},{key:\"remove\",value:function remove(value){var current=this.root;var parent=null;//find a node equal to value else exit function\nwhile(true){if(current===null)return;if(value<current.value){parent=current;current=current.left;}else if(value>current.value){parent=current;current=current.right;}else break;}//if node has no children set parent child to null\nif(current.left===null&&current.right===null){if(parent===null)this.root=null;else if(value<parent.value)parent.left=null;else parent.right=null;}//if node has 1 child set parent child to current child\nelse if(current.right===null){if(parent===null)this.root=current.left;else if(value<parent.value)parent.left=current.left;else parent.right=current.left;}else if(current.left===null){if(parent===null)this.root=current.right;else if(value<parent.value)parent.left=current.right;else parent.right=current.right;}//if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\nelse{//find the leftmost child of right subtree of current, set current to that value\nvar leftmostChild=current.right;parent=current;while(leftmostChild.left!==null){parent=leftmostChild;leftmostChild=leftmostChild.left;}current.value=leftmostChild.value;//delete the leftmost child of right subtree\ncurrent=leftmostChild;if(current.left===null&&current.right===null){if(current.value<parent.value)parent.left=null;else parent.right=null;}else if(current.right===null){if(current.value<parent.value)parent.left=current.left;else parent.right=current.left;}else{if(current.value<parent.value)parent.left=current.right;else parent.right=current.right;}}}}]);return BinarySearchTreeClass;}();//react component for binary search tree\nvar BinarySearchTree=function BinarySearchTree(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState(new BinarySearchTreeClass()),_useState4=_slicedToArray(_useState3,2),tree=_useState4[0],setTree=_useState4[1];var insertInput=useRef();var removeInput=useRef();var findInput=useRef();var speedSlider=useRef();var focus=useRef();var green=useRef();var pink=useRef();var yellow=useRef();var interval=useRef();var animating=useRef();var animationFunction=useRef();var animationValue=useRef();//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//function to generate a random BST\nvar randomTree=function randomTree(){if(animating.current)toggleAnimation();var height=randInt(2,6);var newTree=new BinarySearchTreeClass();var insertValue=null;while(newTree.height<=height){insertValue=randInt(-999,1000);newTree.insert(insertValue);}newTree.remove(insertValue);setTree(newTree);};var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//function to pause or continue animation\nvar toggleAnimation=useCallback(function(){if(animating.current){clearInterval(interval.current);animating.current=false;focus.current=null;animationFunction.current=null;animationValue.current=null;}else{interval.current=setInterval(function(){animationFunction.current();forceUpdate();},1000-speedSlider.current.value);green.current=null;yellow.current=null;animating.current=true;}},[]);//initialize the tree to a random BST\nuseEffect(randomTree,[toggleAnimation]);//function to insert into the binary search tree on button click\nvar insert=function insert(){if(animating.current)toggleAnimation();var data=parseInt(insertInput.current.value);if(isNaN(data))data=randInt(-999,1000);insertInput.current.value=null;if(tree.root===null){tree.insert(data);green.current=tree.root;forceUpdate();}else{focus.current=tree.root;forceUpdate();animationFunction.current=insertStep;animationValue.current=data;toggleAnimation();}};//function to do a single step of insertion animation\nvar insertStep=function insertStep(){if(animationValue.current<focus.current.value){if(focus.current.left===null){tree.insert(animationValue.current);green.current=focus.current.left;toggleAnimation();}else focus.current=focus.current.left;}else if(animationValue.current>focus.current.value){if(focus.current.right===null){tree.insert(animationValue.current);green.current=focus.current.right;toggleAnimation();}else focus.current=focus.current.right;}else{toggleAnimation();}};//function to remove from binary search tree on button click\nvar remove=function remove(){if(animating.current)toggleAnimation();if(tree.root!==null){var data=parseInt(removeInput.current.value);if(isNaN(data))data=tree.root.value;focus.current=tree.root;if(focus.current.value===data)pink.current=focus.current;forceUpdate();animationFunction.current=removeStep;animationValue.current=data;toggleAnimation();}removeInput.current.value=null;};//function to do a single step of remove animation\nvar removeStep=function removeStep(){if(animationValue.current<focus.current.value){if(focus.current.left===null)toggleAnimation();else{focus.current=focus.current.left;if(focus.current.value===animationValue.current)pink.current=focus.current;}}else if(animationValue.current>focus.current.value){if(focus.current.right===null)toggleAnimation();else{focus.current=focus.current.right;if(focus.current.value===animationValue.current)pink.current=focus.current;}}else{tree.remove(animationValue.current);pink.current=null;toggleAnimation();}};//function to start find animation\nvar find=function find(){if(animating.current)toggleAnimation();if(tree.root!==null){var data=parseInt(findInput.current.value);if(isNaN(data))data=tree.root.value;focus.current=tree.root;animationFunction.current=findStep;animationValue.current=data;toggleAnimation();if(focus.current.value===data)yellow.current=focus.current;forceUpdate();}findInput.current.value=null;};//function to to a single step of find animation\nvar findStep=function findStep(){if(animationValue.current<focus.current.value){if(focus.current.left===null)toggleAnimation();else{focus.current=focus.current.left;if(focus.current.value===animationValue.current)yellow.current=focus.current;}}else if(animationValue.current>focus.current.value){if(focus.current.right===null)toggleAnimation();else{focus.current=focus.current.right;if(focus.current.value===animationValue.current)yellow.current=focus.current;}}else{toggleAnimation();}};//changes the animation speed when the slider changes\nvar updateSpeed=function updateSpeed(){if(animationFunction.current!=null){clearInterval(interval.current);interval.current=setInterval(function(){animationFunction.current();forceUpdate();},1000-speedSlider.current.value);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"binary-search-tree\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:randomTree,children:\"Random\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"insertButton\",onClick:insert,children:\"Insert\"}),/*#__PURE__*/_jsx(\"input\",{ref:insertInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"removeButton\",onClick:remove,children:\"Remove\"}),/*#__PURE__*/_jsx(\"input\",{ref:removeInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"findButton\",onClick:find,children:\"Find\"}),/*#__PURE__*/_jsx(\"input\",{ref:findInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledSlider\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Animation Speed\"}),/*#__PURE__*/_jsx(\"input\",{className:\"slider\",ref:speedSlider,onChange:updateSpeed,min:\"0\",max:\"990\",type:\"range\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization\",children:/*#__PURE__*/_jsx(BinaryTreeDisplay,{tree:tree,border:focus.current,green:green.current,pink:pink.current,yellow:yellow.current})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"legend\",children:[/*#__PURE__*/_jsx(Element,{border:\"bordered\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Current Focus\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"green\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Last Inserted Element\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"pink\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Element to Delete\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"yellow\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Last Found Element\"})]})]});};export default BinarySearchTree;","map":{"version":3,"sources":["C:/Users/quint/Documents/Daily_Dose_of_Data/client/src/BinarySearchTree/BinarySearchTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","Element","BinaryTreeNode","value","left","right","BinarySearchTreeClass","root","height","current","parent","leftmostChild","BinarySearchTree","forceRender","tree","setTree","insertInput","removeInput","findInput","speedSlider","focus","green","pink","yellow","interval","animating","animationFunction","animationValue","forceUpdate","renders","randomTree","toggleAnimation","randInt","newTree","insertValue","insert","remove","min","max","Math","floor","random","clearInterval","setInterval","data","parseInt","isNaN","insertStep","removeStep","find","findStep","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinarySearchTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary search tree\r\nclass BinarySearchTreeClass {\r\n    constructor(){\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//react component for binary search tree\r\nconst BinarySearchTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinarySearchTreeClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2,6);\r\n        var newTree = new BinarySearchTreeClass();\r\n        var insertValue = null;\r\n        while(newTree.height <= height) {\r\n            insertValue = randInt(-999,1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        newTree.remove(insertValue);\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n    \r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.left;\r\n                toggleAnimation();\r\n            } else\r\n                focus.current = focus.current.left;\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.right;\r\n                toggleAnimation();\r\n            } else\r\n                focus.current = focus.current.right;\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if(tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            tree.remove(animationValue.current);\r\n            pink.current = null;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if(tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinarySearchTree;"]},"metadata":{},"sourceType":"module"}