{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\LinearSearch\\\\LinearSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './LinearSearch.scss';\nimport Element from '../Element/Element'; //react component to display a linear search array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ArrayDisplay = props => {}; //react component for linear search\n\n\n_c = ArrayDisplay;\n\nconst LinearSearch = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [array, setArray] = useState([]);\n  const searchInput = useRef();\n  const speedSlider = useRef();\n  const searching = useRef();\n  const searchValue = useRef(null);\n  const focus = useRef(null);\n  const interval = useRef();\n  const green = useRef();\n  const pink = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets array to a randomly generated array\n\n\n  const randomArray = () => {\n    var size = randomSize.current.value;\n\n    if (size === \"\") {\n      size = randInt(10, 60);\n    }\n\n    if (!isNaN(parseInt(size)) && size > 0) {\n      var newArray = [];\n\n      for (let i = 0; i < size; i++) newArray.push(randInt(-999, 1000));\n\n      setArray(newArray);\n    }\n\n    randomSize.current.value = null;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize array to random array\n\n\n  useEffect(randomArray, []); //function to start searching animation\n\n  const search = () => {\n    if (searching.current) toggleAnimation();\n    var data = parseInt(searchInput.current.value);\n    if (isNaN(data)) data = 0;\n    searchInput.current.value = null;\n    focus.current = 0;\n    searchValue.current = data;\n    toggleAnimation();\n    forceUpdate();\n  }; //function to 1 step of searching animation\n\n\n  const searchingStep = () => {}; //function to turn searching on and off by button click\n\n\n  const toggleAnimation = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      searching.current = false;\n    } else {\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      searching.current = true;\n      green.current = null;\n      pink.current = null;\n    }\n  }; //changes the animation speed of searching when the slider changes\n\n\n  const updateSpeed = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"linear-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: randomArray,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"searchButton\",\n          onClick: search,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"searchInput\",\n          ref: searchInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: /*#__PURE__*/_jsxDEV(ArrayDisplay, {\n          array: array\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element Not Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LinearSearch, \"av1L3UC+NeZnX23B3kGycVCTYl0=\");\n\n_c2 = LinearSearch;\nexport default LinearSearch;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ArrayDisplay\");\n$RefreshReg$(_c2, \"LinearSearch\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/LinearSearch/LinearSearch.js"],"names":["React","useState","useRef","useEffect","Element","ArrayDisplay","props","LinearSearch","forceRender","array","setArray","searchInput","speedSlider","searching","searchValue","focus","interval","green","pink","forceUpdate","renders","randomArray","size","randomSize","current","value","randInt","isNaN","parseInt","newArray","i","push","min","max","Math","floor","random","search","toggleAnimation","data","searchingStep","clearInterval","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './LinearSearch.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a linear search array\r\nconst ArrayDisplay = (props) => {\r\n\r\n}\r\n\r\n//react component for linear search\r\nconst LinearSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const focus = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //sets array to a randomly generated array\r\n    const randomArray = () => {\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(10, 60);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newArray = [];\r\n            for (let i = 0; i < size; i++)\r\n                newArray.push(randInt(-999,1000));\r\n            setArray(newArray);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize array to random array\r\n    useEffect(randomArray, []);\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        focus.current = 0;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        \r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"linear-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomArray}>Random</button>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <ArrayDisplay array={array} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element Not Found</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LinearSearch;"]},"metadata":{},"sourceType":"module"}