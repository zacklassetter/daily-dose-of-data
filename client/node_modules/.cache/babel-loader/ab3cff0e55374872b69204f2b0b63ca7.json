{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\AvlTree\\\\AvlTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './AvlTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\nimport Element from '../Element/Element.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nfunction getHeight(node) {\n  if (node !== null) {\n    if (getHeight(node.left) > getHeight(node.right)) {\n      return 1 + getHeight(node.left);\n    } else return 1 + getHeight(node.right);\n  } else return 0;\n}\n\nfunction getBalance(node) {\n  if (node !== null) {\n    return getHeight(node.right) - getHeight(node.left);\n  }\n}\n\nfunction rotateRight(node, tree) {\n  var newRoot = node.left;\n  if (node === tree.root) tree.root = newRoot;\n  var T2 = newRoot.right;\n  newRoot.right = node;\n  node.left = T2; //tree.root = newRoot;\n}\n\nfunction rotateLeft(node, tree) {\n  var newRoot = node.right;\n  if (node === tree.root) tree.root = newRoot;\n  var T2 = newRoot.left;\n  newRoot.left = node;\n  node.right = T2;\n} //class for binary search tree\n\n\nclass AvlTreeClass {\n  constructor() {\n    this.root = null;\n    this.height = 0;\n  }\n\n  insert(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height;\n  }\n\n  remove(value) {\n    var current = this.root;\n    var parent = null; //find a node equal to value else exit function\n\n    while (true) {\n      if (current === null) return;\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else break;\n    } //if node has no children set parent child to null\n\n\n    if (current.left === null && current.right === null) {\n      if (parent === null) this.root = null;else if (value < parent.value) parent.left = null;else parent.right = null;\n    } //if node has 1 child set parent child to current child\n    else if (current.right === null) {\n        if (parent === null) this.root = current.left;else if (value < parent.value) parent.left = current.left;else parent.right = current.left;\n      } else if (current.left === null) {\n        if (parent === null) this.root = current.right;else if (value < parent.value) parent.left = current.right;else parent.right = current.right;\n      } //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\n      else {\n          //find the leftmost child of right subtree of current, set current to that value\n          var leftmostChild = current.right;\n          parent = current;\n\n          while (leftmostChild.left !== null) {\n            parent = leftmostChild;\n            leftmostChild = leftmostChild.left;\n          }\n\n          current.value = leftmostChild.value; //delete the leftmost child of right subtree\n\n          current = leftmostChild;\n\n          if (current.left === null && current.right === null) {\n            if (current.value < parent.value) parent.left = null;else parent.right = null;\n          } else if (current.right === null) {\n            if (current.value < parent.value) parent.left = current.left;else parent.right = current.left;\n          } else {\n            if (current.value < parent.value) parent.left = current.right;else parent.right = current.right;\n          }\n        }\n  }\n\n  treeHeight() {\n    return getHeight(this.root);\n  }\n\n} //react component for binary search tree\n\n\nconst AvlTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new AvlTreeClass());\n  const secondRot = useRef(false);\n  const familyLine = useRef([]);\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const findInput = useRef();\n  const speedSlider = useRef();\n  const focus = useRef();\n  const green = useRef();\n  const pink = useRef();\n  const yellow = useRef();\n  const interval = useRef();\n  const animating = useRef();\n  const animationFunction = useRef();\n  const animationValue = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {\n    if (animating.current) toggleAnimation();\n    const height = randInt(2, 6);\n    var newTree = new AvlTreeClass();\n    var insertValue = null;\n\n    while (newTree.height <= height) {\n      insertValue = randInt(-999, 1000);\n      newTree.insert(insertValue);\n    }\n\n    newTree.remove(insertValue);\n    setTree(newTree); //toggleAnimation();\n    //animationFunction.current = rotateStep;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to pause or continue animation\n\n\n  const toggleAnimation = useCallback(() => {\n    if (animating.current) {\n      clearInterval(interval.current);\n      animating.current = false;\n      focus.current = null;\n      animationFunction.current = null;\n      animationValue.current = null;\n    } else {\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      green.current = null;\n      yellow.current = null;\n      animating.current = true;\n    }\n  }, []); //initialize the tree to a random BST\n\n  useEffect(randomTree, [toggleAnimation]); //function to insert into the binary search tree on button click\n\n  const insert = () => {\n    if (animating.current) toggleAnimation();\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    insertInput.current.value = null;\n\n    if (tree.root === null) {\n      tree.insert(data);\n      green.current = tree.root;\n      forceUpdate();\n    } else {\n      focus.current = tree.root;\n      forceUpdate();\n      animationFunction.current = insertStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n\n    familyLine.current = [];\n  }; //function to do a single step of insertion animation\n\n\n  const insertStep = () => {\n    if (animationValue.current < focus.current.value) {\n      familyLine.current.push(focus.current);\n\n      if (focus.current.left === null) {\n        tree.insert(animationValue.current); //familyLine.current.push(focus.current);\n\n        green.current = focus.current.left; //toggleAnimation();\n        //animationFunction.current = rotateStep();\n\n        focus.current = focus.current.left;\n      } else focus.current = focus.current.left;\n    } else if (animationValue.current > focus.current.value) {\n      familyLine.current.push(focus.current);\n\n      if (focus.current.right === null) {\n        tree.insert(animationValue.current); //familyLine.current.push(focus.current);\n\n        green.current = focus.current.right;\n        focus.current = focus.current.right; //toggleAnimation();\n        //animationFunction.current = rotateStep();\n      } else focus.current = focus.current.right;\n    } else {\n      animationFunction.current = rotateStep;\n    } //console.log(familyLine.current);\n\n  }; //function to remove from binary search tree on button click\n\n\n  const remove = () => {\n    if (animating.current) toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(removeInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      if (focus.current.value === data) pink.current = focus.current;\n      forceUpdate();\n      animationFunction.current = removeStep;\n      animationValue.current = data;\n      toggleAnimation();\n    }\n\n    removeInput.current.value = null;\n    familyLine.current = [];\n  }; //function to do a single step of remove animation\n\n\n  const removeStep = () => {\n    if (animationValue.current < focus.current.value) {\n      familyLine.current.push(focus.current);\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      familyLine.current.push(focus.current);\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else {\n      tree.remove(animationValue.current);\n      pink.current = null;\n      animationFunction.current = rotateStep;\n    }\n  }; //function to start find animation\n\n\n  const find = () => {\n    if (animating.current) familyLine.current = [];\n    toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(findInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      animationFunction.current = findStep;\n      animationValue.current = data;\n      toggleAnimation();\n      if (focus.current.value === data) yellow.current = focus.current;\n      forceUpdate();\n    }\n\n    findInput.current.value = null;\n  }; //function to to a single step of find animation\n\n\n  const findStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) yellow.current = focus.current;\n      }\n    } else {\n      toggleAnimation();\n    }\n  };\n\n  const rotateStep = () => {\n    console.log(familyLine.current); //create new array copy of family line\n\n    var family = [];\n\n    for (var i = 0; i < familyLine.current.length; i++) {\n      family.push(familyLine.current[i]);\n    }\n\n    var inserted = green.current; //rotateRight(tree.root, tree);\n    //rotateLeft(tree.root, tree);\n    //var family = familyLine.current;\n\n    var firstUnbalanced = family.pop(); //console.log(getBalance(firstUnbalanced));\n    //var child;\n\n    while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\n      firstUnbalanced = family.pop();\n    }\n\n    if (Math.abs(getBalance(firstUnbalanced)) < 2) {\n      //tree is balanced \n      console.log(\"tree is balanced\");\n      toggleAnimation();\n    } //Left Left case\n\n\n    if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\n      var l = firstUnbalanced.left;\n      rotateRight(firstUnbalanced, tree); //insert on correct side\n\n      var grandP = family.pop();\n\n      if (grandP) {\n        if (grandP.value < firstUnbalanced.value) {\n          grandP.right = l;\n        } else grandP.left = l;\n      } else tree.root = l;\n\n      secondRot.current = true;\n      familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\n    } //Left Right case\n\n\n    if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\n      let r = firstUnbalanced.left.right;\n      rotateLeft(firstUnbalanced.left, tree);\n      firstUnbalanced.left = r;\n    } //Right Right case\n\n\n    if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\n      let r = firstUnbalanced.right;\n      rotateLeft(firstUnbalanced, tree); //insert on correct side\n\n      var grandP = family.pop();\n\n      if (grandP) {\n        if (grandP.value < firstUnbalanced.value) {\n          grandP.right = r;\n        } else grandP.left = r;\n      } else tree.root = r;\n\n      familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\n    } //Right Left Case\n\n\n    if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\n      var l = firstUnbalanced.right.left;\n      rotateRight(firstUnbalanced.right, tree);\n      familyLine.current.pop();\n      firstUnbalanced.right = l;\n    } ////Left Right case\n    //if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\n    //    var r = firstUnbalanced.left.right;\n    //    rotateLeft(firstUnbalanced.left, tree);\n    //    firstUnbalanced.left = r;\n    //}\n    //console.log(firstUnbalanced.left)\n    //rotateRight(firstUnbalanced, tree);\n    //}\n    //animationFunction.current = rotateStep();\n\n\n    forceUpdate();\n  }; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    if (animationFunction.current != null) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: randomTree,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"insertButton\",\n          onClick: insert,\n          children: \"Insert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: insertInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"removeButton\",\n          onClick: remove,\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: removeInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"findButton\",\n          onClick: find,\n          children: \"Find\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: findInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: [/*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n          tree: tree,\n          border: focus.current,\n          green: green.current,\n          pink: pink.current,\n          yellow: yellow.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance of Tree: \", getBalance(tree.root)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Inserted Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element to Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Last Found Element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 506,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvlTree, \"barU3c6wXNmoUHDNlC1e+XOpF2A=\");\n\n_c = AvlTree;\nexport default AvlTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvlTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/AvlTree/AvlTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","Element","BinaryTreeNode","constructor","value","left","right","getHeight","node","getBalance","rotateRight","tree","newRoot","root","T2","rotateLeft","AvlTreeClass","height","insert","current","parent","remove","leftmostChild","treeHeight","AvlTree","forceRender","setTree","secondRot","familyLine","insertInput","removeInput","findInput","speedSlider","focus","green","pink","yellow","interval","animating","animationFunction","animationValue","forceUpdate","renders","randomTree","toggleAnimation","randInt","newTree","insertValue","min","max","Math","floor","random","clearInterval","setInterval","data","parseInt","isNaN","insertStep","push","rotateStep","removeStep","find","findStep","console","log","family","i","length","inserted","firstUnbalanced","pop","abs","l","grandP","splice","indexOf","r","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './AvlTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\nimport Element from '../Element/Element.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n}\r\n\r\nfunction getHeight(node) {\r\n    if (node !== null) {\r\n        if (getHeight(node.left) > getHeight(node.right)) {\r\n            return 1 + getHeight(node.left);\r\n        }\r\n        else return 1 + getHeight(node.right);\r\n    }\r\n    else return 0;\r\n}\r\n\r\nfunction getBalance(node) {\r\n    if (node !== null) {\r\n        return getHeight(node.right) - getHeight(node.left);\r\n    }\r\n} \r\n\r\nfunction rotateRight(node, tree) {\r\n    var newRoot = node.left;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.right;\r\n\r\n    newRoot.right = node;\r\n    node.left = T2;\r\n    \r\n    \r\n    //tree.root = newRoot;\r\n}\r\n\r\nfunction rotateLeft(node, tree) {\r\n    var newRoot = node.right;\r\n    if (node === tree.root) tree.root = newRoot;\r\n    var T2 = newRoot.left;\r\n    newRoot.left = node;\r\n    node.right = T2;\r\n}\r\n\r\n//class for binary search tree\r\nclass AvlTreeClass {\r\n    constructor() {\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    treeHeight() {\r\n        return getHeight(this.root);\r\n    }\r\n\r\n}\r\n\r\n//react component for binary search tree\r\nconst AvlTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new AvlTreeClass());\r\n    const secondRot = useRef(false);\r\n    const familyLine = useRef([]);\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const yellow = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2, 6);\r\n        var newTree = new AvlTreeClass();\r\n        var insertValue = null;\r\n        while (newTree.height <= height) {\r\n            insertValue = randInt(-999, 1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        \r\n        newTree.remove(insertValue);\r\n        setTree(newTree);\r\n        //toggleAnimation();\r\n        //animationFunction.current = rotateStep;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        \r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            green.current = null;\r\n            yellow.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        if (tree.root === null) {\r\n            tree.insert(data);\r\n            green.current = tree.root;\r\n            forceUpdate();\r\n        } else {\r\n            focus.current = tree.root;\r\n            forceUpdate();\r\n            animationFunction.current = insertStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        \r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.left;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n                focus.current = focus.current.left;\r\n            } else\r\n                focus.current = focus.current.left;\r\n            \r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                //familyLine.current.push(focus.current);\r\n                green.current = focus.current.right;\r\n                focus.current = focus.current.right;\r\n                //toggleAnimation();\r\n                //animationFunction.current = rotateStep();\r\n            } else\r\n                focus.current = focus.current.right;\r\n            \r\n        } else {\r\n            animationFunction.current = rotateStep;\r\n        }\r\n        //console.log(familyLine.current);\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            if (focus.current.value === data)\r\n                pink.current = focus.current;\r\n            forceUpdate();\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n        familyLine.current = [];\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        \r\n        if (animationValue.current < focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            familyLine.current.push(focus.current);\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            tree.remove(animationValue.current);\r\n            pink.current = null;\r\n            animationFunction.current = rotateStep;\r\n        }\r\n    }\r\n\r\n    //function to start find animation\r\n    const find = () => {\r\n        if (animating.current)\r\n            familyLine.current = [];\r\n            toggleAnimation();\r\n        if (tree.root !== null) {\r\n            var data = parseInt(findInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = findStep;\r\n            animationValue.current = data;\r\n            toggleAnimation();\r\n            if (focus.current.value === data)\r\n                yellow.current = focus.current;\r\n            forceUpdate();\r\n        }\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    //function to to a single step of find animation\r\n    const findStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    yellow.current = focus.current;\r\n            }\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    const rotateStep = () => {\r\n        console.log(familyLine.current);\r\n        //create new array copy of family line\r\n        var family = [];\r\n        for (var i = 0; i < familyLine.current.length; i++) {\r\n            family.push(familyLine.current[i]);\r\n        }\r\n        \r\n\r\n        var inserted = green.current;\r\n        //rotateRight(tree.root, tree);\r\n        //rotateLeft(tree.root, tree);\r\n        //var family = familyLine.current;\r\n        \r\n        var firstUnbalanced = family.pop();\r\n        //console.log(getBalance(firstUnbalanced));\r\n        //var child;\r\n        \r\n        while (Math.abs(getBalance(firstUnbalanced)) < 2 && family.length > 0) {\r\n            firstUnbalanced = family.pop();\r\n            \r\n        }\r\n        \r\n\r\n        if (Math.abs(getBalance(firstUnbalanced)) < 2) {\r\n            //tree is balanced \r\n            console.log(\"tree is balanced\");\r\n            toggleAnimation();\r\n            \r\n        }\r\n        \r\n\r\n\r\n        \r\n            \r\n        //Left Left case\r\n        if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === -1) {\r\n\r\n\r\n            var l = firstUnbalanced.left;\r\n            rotateRight(firstUnbalanced, tree);\r\n\r\n            //insert on correct side\r\n            var grandP = family.pop();\r\n            if (grandP) {\r\n                if (grandP.value < firstUnbalanced.value) {\r\n                    grandP.right = l;\r\n                }\r\n                else grandP.left = l;\r\n            } else tree.root = l;\r\n            secondRot.current = true;\r\n            familyLine.current.splice(familyLine.current.indexOf(l.right), 1);\r\n            \r\n            \r\n        }\r\n\r\n\r\n        //Left Right case\r\n        if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n            let r = firstUnbalanced.left.right;\r\n            rotateLeft(firstUnbalanced.left, tree);\r\n            firstUnbalanced.left = r;\r\n        }\r\n\r\n        //Right Right case\r\n        if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === 1) {\r\n            let r = firstUnbalanced.right;\r\n            rotateLeft(firstUnbalanced, tree);\r\n            //insert on correct side\r\n            var grandP = family.pop();\r\n            if (grandP) {\r\n                if (grandP.value < firstUnbalanced.value) {\r\n                    grandP.right = r;\r\n                }\r\n                else grandP.left = r;\r\n            } else tree.root = r;\r\n            familyLine.current.splice(familyLine.current.indexOf(firstUnbalanced), 1);\r\n            \r\n        }\r\n\r\n        //Right Left Case\r\n        if (getBalance(firstUnbalanced) === 2 && getBalance(firstUnbalanced.right) === -1) {\r\n            var l = firstUnbalanced.right.left;\r\n            rotateRight(firstUnbalanced.right, tree);\r\n            familyLine.current.pop();\r\n            firstUnbalanced.right = l;\r\n            \r\n            \r\n\r\n        }\r\n\r\n        ////Left Right case\r\n        //if (getBalance(firstUnbalanced) === -2 && getBalance(firstUnbalanced.left) === 1) {\r\n\r\n        //    var r = firstUnbalanced.left.right;\r\n        //    rotateLeft(firstUnbalanced.left, tree);\r\n        //    firstUnbalanced.left = r;\r\n\r\n\r\n            \r\n        //}\r\n\r\n\r\n        //console.log(firstUnbalanced.left)\r\n        //rotateRight(firstUnbalanced, tree);\r\n\r\n        //}\r\n        \r\n        //animationFunction.current = rotateStep();\r\n        forceUpdate();\r\n        \r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input ref={findInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} yellow={yellow.current} />\r\n                    <p>Balance of Tree: {getBalance(tree.root)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n                <br />\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted Element</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element to Delete</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found Element</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AvlTree;"]},"metadata":{},"sourceType":"module"}