{"ast":null,"code":"import _slicedToArray from\"C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,useEffect,useCallback}from'react';import'./InsertionSort.scss';import Element from'../Element/Element';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InsertionSortDisplay=function InsertionSortDisplay(props){return props.array.map(function(value,index){if(index===props.currentCompare&&index===props.currentInserting)return/*#__PURE__*/_jsx(Element,{value:value,color:\"yellow\",border:\"bordered\"},index);if(index===props.currentCompare)return/*#__PURE__*/_jsx(Element,{value:value,color:\"green\",border:\"bordered\"},index);if(index===props.currentInserting)return/*#__PURE__*/_jsx(Element,{value:value,color:\"yellow\"},index);if(index<props.sortedEndIndex)return/*#__PURE__*/_jsx(Element,{value:value,color:\"green\"},index);return/*#__PURE__*/_jsx(Element,{value:value},index);});};var InsertionSort=function InsertionSort(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),array=_useState4[0],setArray=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),sorted=_useState6[0],setSorted=_useState6[1];var sorting=useRef(false);var interval=useRef(null);var sortedEndIndex=useRef(-1);var currentInserting=useRef(-1);var currentCompare=useRef(-1);var toggleSortingButton=useRef();var generateArrayButton=useRef();var arraySizeInput=useRef();var speedSlider=useRef();//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//sets state array to a random array for sorting\nvar generateArray=function generateArray(){if(sorting.current){toggleSorting();}var size=parseInt(arraySizeInput.current.value);if(isNaN(size))size=randInt(5,50);if(size>0){setArray(randomArray(size));setSorted(false);sortedEndIndex.current=-1;currentInserting.current=-1;currentCompare.current=-1;}arraySizeInput.current.value=null;};//generates a random array within reasonable bounds\nvar randomArray=useCallback(function(size){var newArray=new Array(size);for(var i=0;i<size;i++){newArray[i]=randInt(-999,1000);}return newArray;},[]);var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//initialize the array randomly at start\nuseEffect(function(){setArray(randomArray(randInt(5,50)));},[randomArray]);//completes one step of the sorting algorithm\nvar sortingStep=function sortingStep(){if(sortedEndIndex.current>=array.length){setSorted(true);toggleSorting();currentCompare.current=-1;currentInserting.current=-1;}//if found lower element, insert current after that, restart process\nelse if(array[currentCompare.current]<array[currentInserting.current]){var temp=array[currentInserting.current];for(var i=currentInserting.current-1;i>currentCompare.current;i--){array[i+1]=array[i];}array[currentCompare.current+1]=temp;currentInserting.current++;currentCompare.current=currentInserting.current;sortedEndIndex.current++;}//if at end of sorted and none lower found, insert at beginning, restart process\nelse if(currentCompare.current===0){var _temp=array[currentInserting.current];for(var _i=currentInserting.current-1;_i>=currentCompare.current;_i--){array[_i+1]=array[_i];}array[currentCompare.current]=_temp;currentInserting.current++;currentCompare.current=currentInserting.current;sortedEndIndex.current++;}else if(currentInserting.current===-1){currentInserting.current++;sortedEndIndex.current=1;currentCompare.current=currentInserting.current;}else{currentCompare.current--;}};//function to turn sorting on and off by button click\nvar toggleSorting=function toggleSorting(){if(sorting.current){clearInterval(interval.current);sorting.current=false;toggleSortingButton.current.innerHTML=\"Sort\";toggleSortingButton.current.classList.remove(\"pinkButton\");toggleSortingButton.current.classList.add(\"greenButton\");}else if(!sorted){interval.current=setInterval(function(){sortingStep();forceUpdate();},1000-speedSlider.current.value);sorting.current=true;toggleSortingButton.current.innerHTML=\"Stop\";toggleSortingButton.current.classList.remove(\"greenButton\");toggleSortingButton.current.classList.add(\"pinkButton\");}};//changes the animation speed of sorting when the slider changes\nvar updateSpeed=function updateSpeed(){if(sorting.current){clearInterval(interval.current);interval.current=setInterval(function(){sortingStep();forceUpdate();},1000-speedSlider.current.value);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"insertion-sort\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",ref:generateArrayButton,onClick:generateArray,children:\"Random\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledInput\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Array Size\"}),/*#__PURE__*/_jsx(\"input\",{id:\"arraySizeInput\",ref:arraySizeInput,type:\"text\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"toggleSortingButton\",className:\"greenButton\",ref:toggleSortingButton,onClick:toggleSorting,children:\"Sort\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledSlider\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Animation Speed\"}),/*#__PURE__*/_jsx(\"input\",{className:\"slider\",ref:speedSlider,onChange:updateSpeed,min:\"0\",max:\"990\",type:\"range\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization\",children:/*#__PURE__*/_jsx(InsertionSortDisplay,{array:array,sortedEndIndex:sortedEndIndex.current,currentInserting:currentInserting.current,currentCompare:currentCompare.current})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"legend\",children:[/*#__PURE__*/_jsx(Element,{color:\"green\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Sorted\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{}),/*#__PURE__*/_jsx(\"p\",{children:\"= Unsorted\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"yellow\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Current Element to be Inserted\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"green\",border:\"bordered\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Current Focus\"})]})]});};export default InsertionSort;","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/src/InsertionSort/InsertionSort.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","InsertionSortDisplay","props","array","map","value","index","currentCompare","currentInserting","sortedEndIndex","InsertionSort","forceRender","setArray","sorted","setSorted","sorting","interval","toggleSortingButton","generateArrayButton","arraySizeInput","speedSlider","forceUpdate","renders","generateArray","current","toggleSorting","size","parseInt","isNaN","randInt","randomArray","newArray","Array","i","min","max","Math","floor","random","sortingStep","length","temp","clearInterval","innerHTML","classList","remove","add","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './InsertionSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\nconst InsertionSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.currentCompare && index === props.currentInserting)\r\n            return <Element key={index} value={value} color=\"yellow\" border=\"bordered\" />\r\n\r\n        if (index === props.currentCompare)\r\n            return <Element key={index} value={value} color=\"green\" border=\"bordered\" />\r\n\r\n        if (index === props.currentInserting)\r\n            return <Element key={index} value={value} color=\"yellow\" />\r\n\r\n        if (index < props.sortedEndIndex)\r\n            return <Element key={index} value={value} color=\"green\" />\r\n\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\nconst InsertionSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const sortedEndIndex = useRef(-1);\r\n    const currentInserting = useRef(-1);\r\n    const currentCompare = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n    const generateArrayButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets state array to a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        var size = parseInt(arraySizeInput.current.value);\r\n        if(isNaN(size))\r\n            size = randInt(5,50);\r\n        if (size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n            sortedEndIndex.current = -1;\r\n            currentInserting.current = -1;\r\n            currentCompare.current = -1;\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    //generates a random array within reasonable bounds\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    //initialize the array randomly at start\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(5,50)));\r\n    }, [randomArray]);\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        \r\n        if (sortedEndIndex.current >= array.length) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n            currentCompare.current = -1;\r\n            currentInserting.current = -1;\r\n        }\r\n        //if found lower element, insert current after that, restart process\r\n        else if (array[currentCompare.current] < array[currentInserting.current]) {\r\n            let temp = array[currentInserting.current];\r\n            for (let i = currentInserting.current - 1; i > currentCompare.current; i--) {\r\n                array[i + 1] = array[i];\r\n            }\r\n            array[currentCompare.current + 1] = temp;\r\n            currentInserting.current++;\r\n            currentCompare.current = currentInserting.current;\r\n            sortedEndIndex.current++;\r\n        }\r\n        //if at end of sorted and none lower found, insert at beginning, restart process\r\n        else if (currentCompare.current === 0) {\r\n            let temp = array[currentInserting.current];\r\n            for (let i = currentInserting.current - 1; i >= currentCompare.current; i--) {\r\n                array[i + 1] = array[i];\r\n            }\r\n            array[currentCompare.current] = temp;\r\n            currentInserting.current++;\r\n            currentCompare.current = currentInserting.current;\r\n            sortedEndIndex.current++;\r\n        }\r\n        else if (currentInserting.current === -1) {\r\n            currentInserting.current++;\r\n            sortedEndIndex.current = 1;\r\n            currentCompare.current = currentInserting.current;\r\n        }\r\n        else {\r\n            currentCompare.current--;\r\n        }\r\n\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"insertion-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" ref={generateArrayButton} onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <InsertionSortDisplay array={array} sortedEndIndex={sortedEndIndex.current} currentInserting={currentInserting.current} currentCompare={currentCompare.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Current Element to be Inserted</p>\r\n                <br />\r\n                <Element color=\"green\" border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default InsertionSort;"]},"metadata":{},"sourceType":"module"}