{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\Set\\\\Set.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Set.scss';\nimport Element from '../Element/Element'; //react component to display a set\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SetDisplay = props => {\n  return [...props.set].map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 16\n    }, this);\n  });\n}; //react component for hash table visualization\n\n\n_c = SetDisplay;\n\nconst MySet = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [set, setSet] = useState(new Set());\n  const randomSize = useRef();\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const findInput = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random set\n\n\n  const randomSet = () => {\n    var size = parseInt(randomSize.current.value);\n    randomSize.current.value = null;\n    if (isNaN(size) || size < 1) size = randInt(20, 100);\n    const newSet = new Set();\n\n    for (let i = 0; i < size; i++) newSet.add(randInt(-999, 1000));\n\n    setSet(newSet);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize to a random set\n\n\n  useEffect(randomSet, []); //function to insert into set\n\n  const insert = () => {\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    set.add(data);\n    forceUpdate();\n    insertInput.current.value = null;\n  }; //function to remove from set\n\n\n  const remove = () => {\n    var data = parseInt(removeInput.current.value);\n    if (!isNaN(data)) set.delete(data);\n    forceUpdate();\n    removeInput.current.value = null;\n  }; //function to find a value in the set\n\n\n  const find = () => {\n    var data = parseInt(findInput.current.value);\n    if (!isNaN(data)) set.has(data);\n    forceUpdate();\n    findInput.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"set\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomSet,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomSizeInput\",\n          ref: randomSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"insertInput\",\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"removeInput\",\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"findButton\",\n        onClick: find,\n        children: \"Find\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"findInput\",\n        ref: findInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(SetDisplay, {\n        set: set\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MySet, \"ByJXK4ZipyiippayfMmJNxmSt10=\");\n\n_c2 = MySet;\nexport default MySet;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SetDisplay\");\n$RefreshReg$(_c2, \"MySet\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/Set/Set.js"],"names":["React","useState","useRef","useEffect","Element","SetDisplay","props","set","map","value","index","MySet","forceRender","setSet","Set","randomSize","insertInput","removeInput","findInput","forceUpdate","renders","randomSet","size","parseInt","current","isNaN","randInt","newSet","i","add","min","max","Math","floor","random","insert","data","remove","delete","find","has"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Set.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a set\r\nconst SetDisplay = (props) => {\r\n    return [...props.set].map((value, index) => {\r\n        return <Element value={value}></Element>;\r\n    });\r\n}\r\n\r\n//react component for hash table visualization\r\nconst MySet = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [set, setSet] = useState(new Set());\r\n    const randomSize = useRef();\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random set\r\n    const randomSet = () => {\r\n        var size = parseInt(randomSize.current.value);\r\n        randomSize.current.value = null;\r\n        if (isNaN(size) || size < 1)\r\n            size = randInt(20, 100);\r\n        const newSet = new Set();\r\n        for (let i = 0; i < size; i++)\r\n            newSet.add(randInt(-999,1000));\r\n        setSet(newSet);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize to a random set\r\n    useEffect(randomSet, []);\r\n\r\n    //function to insert into set\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999,1000);\r\n        set.add(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from set\r\n    const remove = () => {\r\n        var data = parseInt(removeInput.current.value);\r\n        if (!isNaN(data))\r\n            set.delete(data);\r\n        forceUpdate();\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to find a value in the set\r\n    const find = () => {\r\n        var data = parseInt(findInput.current.value);\r\n        if (!isNaN(data))\r\n            set.has(data);\r\n        forceUpdate();\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"set\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomSet}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"findButton\" onClick={find}>Find</button>\r\n                <input id=\"findInput\" ref={findInput} type=\"text\"></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <SetDisplay set={set} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MySet;"]},"metadata":{},"sourceType":"module"}