{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\MergeSort\\\\MergeSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './MergeSort.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exampleArray = [[3], [7], [-8], [1], [0], [-4], [2], [11], [-5]]; //react component to display merge sort arrays\n\nconst MergeSortDisplay = props => {\n  var componentList = [];\n\n  for (let i = 0; i < props.arrays.length; i++) {\n    for (let j = 0; j < props.arrays[i].length; j++) componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n      value: props.arrays[i][j]\n    }, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 32\n    }, this));\n\n    componentList.push( /*#__PURE__*/_jsxDEV(\"br\", {}, componentList.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 28\n    }, this));\n  }\n\n  componentList.pop();\n  return componentList;\n}; //react component for merge sort\n\n\n_c = MergeSortDisplay;\n\nconst MergeSort = () => {\n  _s();\n\n  const [arrays, setArrays] = useState(exampleArray);\n  const [nextArrays, setNextArrays] = useState([]);\n  const [sorted, setSorted] = useState(false);\n  const sorting = useRef(false);\n  const interval = useRef(null);\n  const toggleSortingButton = useRef();\n  const speedSlider = useRef(); //function to do a single step of merge sorting\n\n  const sortingStep = () => {}; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n      }, 1000 - speedSlider.current.value);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n      toggleSortingButton.current.classList.remove(\"greenButton\");\n      toggleSortingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //changes the animation speed of sorting when the slider changes\n\n\n  const updateSpeed = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        sortingStep();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"merge-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        ref: toggleSortingButton,\n        className: \"greenButton\",\n        onClick: toggleSorting,\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(MergeSortDisplay, {\n        arrays: arrays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MergeSort, \"HfE/vk+5TU+zGe8U8a+tlJvNj+o=\");\n\n_c2 = MergeSort;\nexport default MergeSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MergeSortDisplay\");\n$RefreshReg$(_c2, \"MergeSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/MergeSort/MergeSort.js"],"names":["React","useState","useRef","Element","exampleArray","MergeSortDisplay","props","componentList","i","arrays","length","j","push","pop","MergeSort","setArrays","nextArrays","setNextArrays","sorted","setSorted","sorting","interval","toggleSortingButton","speedSlider","sortingStep","toggleSorting","current","clearInterval","innerHTML","classList","remove","add","setInterval","value","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './MergeSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst exampleArray = [[3],[7],[-8],[1],[0],[-4],[2],[11],[-5]];\r\n\r\n//react component to display merge sort arrays\r\nconst MergeSortDisplay = (props) => {\r\n    var componentList = [];\r\n    for (let i = 0; i < props.arrays.length; i++) {\r\n        for (let j = 0; j < props.arrays[i].length; j++)\r\n            componentList.push(<Element key={componentList.length} value={props.arrays[i][j]} />);\r\n        componentList.push(<br key={componentList.length} />);\r\n    }\r\n    componentList.pop();\r\n    return componentList;\r\n}\r\n\r\n//react component for merge sort\r\nconst MergeSort = () => {\r\n\r\n    const [arrays, setArrays] = useState(exampleArray);\r\n    const [nextArrays, setNextArrays] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const toggleSortingButton = useRef();\r\n    const speedSlider = useRef();\r\n\r\n    //function to do a single step of merge sorting\r\n    const sortingStep = () => {\r\n\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n            }, 1000-speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"merge-sort\">\r\n            <div className=\"controls\">\r\n                <button ref={toggleSortingButton} className=\"greenButton\" onClick={toggleSorting}>Sort</button>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <MergeSortDisplay arrays={arrays} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MergeSort;"]},"metadata":{},"sourceType":"module"}