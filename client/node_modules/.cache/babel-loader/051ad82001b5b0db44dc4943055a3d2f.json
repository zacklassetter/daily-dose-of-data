{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BreadthFirstSearch\\\\BreadthFirstSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './BreadthFirstSearch.scss';\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BreadthFirstSearch = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new BinaryTreeClass(null));\n  const nodeQueue = useRef([]);\n  const index = useRef();\n  const searchInput = useRef();\n  const speedSlider = useRef();\n  const searching = useRef();\n  const searchValue = useRef(null);\n  const current = useRef(null);\n  const interval = useRef();\n  const green = useRef();\n  const pink = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate random tree\n\n\n  const randomTree = () => {\n    var newNodeChance = 0.9;\n    const levels = randInt(1, 5);\n    var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999, 1000)));\n    var nodes = [newTree.root];\n    var newNodes = [];\n\n    for (let level = 0; level < levels; level++) {\n      for (let i = 0; i < nodes.length; i++) {\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].left = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].left);\n        }\n\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].right = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].right);\n        }\n      }\n\n      nodes = newNodes;\n      newNodes = [];\n    }\n\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize tree to a random tree\n\n\n  useEffect(randomTree, []); //function to add nodes to queue in DFS order\n\n  const bfs = () => {}; //function to start searching animation\n\n\n  const search = () => {\n    if (searching.current) toggleAnimation();\n    var data = parseInt(searchInput.current.value);\n    if (isNaN(data)) data = 0;\n    searchInput.current.value = null;\n    nodeQueue.current = [];\n    bfs();\n    current.current = nodeQueue.current[0];\n    index.current = 0;\n    searchValue.current = data;\n    toggleAnimation();\n    forceUpdate();\n  }; //function to 1 step of searching animation\n\n\n  const searchingStep = () => {\n    console.log(index.current);\n    console.log(nodeQueue.current.length);\n\n    if (current.current.value === searchValue.current) {\n      green.current = current.current;\n      current.current = null;\n      toggleAnimation();\n    } else if (index.current === nodeQueue.current.length - 1) {\n      pink.current = current.current;\n      current.current = null;\n      toggleAnimation();\n    } else {\n      index.current++;\n      current.current = nodeQueue.current[index.current];\n    }\n  }; //function to turn searching on and off by button click\n\n\n  const toggleAnimation = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      searching.current = false;\n    } else {\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      searching.current = true;\n      green.current = null;\n      pink.current = null;\n    }\n  }; //changes the animation speed of searching when the slider changes\n\n\n  const updateSpeed = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"breadth-first-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"randomButton\",\n          onClick: randomTree,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"searchButton\",\n          onClick: search,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"searchInput\",\n          ref: searchInput,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n          tree: tree,\n          border: current.current,\n          green: green.current,\n          pink: pink.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"pink\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Element Not Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BreadthFirstSearch, \"1hUzl5Eby5iZC7bKNWp/YbfIAhs=\");\n\n_c = BreadthFirstSearch;\nexport default BreadthFirstSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreadthFirstSearch\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BreadthFirstSearch/BreadthFirstSearch.js"],"names":["React","useState","useRef","useEffect","BinaryTreeNode","BinaryTreeClass","BinaryTreeDisplay","Element","BreadthFirstSearch","forceRender","tree","setTree","nodeQueue","index","searchInput","speedSlider","searching","searchValue","current","interval","green","pink","forceUpdate","renders","randomTree","newNodeChance","levels","randInt","newTree","nodes","root","newNodes","level","i","length","Math","random","pow","left","push","right","min","max","floor","bfs","search","toggleAnimation","data","parseInt","value","isNaN","searchingStep","console","log","clearInterval","setInterval","updateSpeed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAO,2BAAP;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,6BAAhD;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAE7B,QAAM,GAAGC,WAAH,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,IAAII,eAAJ,CAAoB,IAApB,CAAD,CAAhC;AACA,QAAMO,SAAS,GAAGV,MAAM,CAAC,EAAD,CAAxB;AACA,QAAMW,KAAK,GAAGX,MAAM,EAApB;AACA,QAAMY,WAAW,GAAGZ,MAAM,EAA1B;AACA,QAAMa,WAAW,GAAGb,MAAM,EAA1B;AACA,QAAMc,SAAS,GAAGd,MAAM,EAAxB;AACA,QAAMe,WAAW,GAAGf,MAAM,CAAC,IAAD,CAA1B;AACA,QAAMgB,OAAO,GAAGhB,MAAM,CAAC,IAAD,CAAtB;AACA,QAAMiB,QAAQ,GAAGjB,MAAM,EAAvB;AACA,QAAMkB,KAAK,GAAGlB,MAAM,EAApB;AACA,QAAMmB,IAAI,GAAGnB,MAAM,EAAnB,CAb6B,CAe7B;;AACH,QAAMoB,WAAW,GAAG,MAAM;AACzBb,IAAAA,WAAW,CAACc,OAAO,IAAIA,OAAO,GAAC,CAApB,CAAX;AACA,GAFD,CAhBgC,CAoB7B;;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAIC,aAAa,GAAG,GAApB;AACA,UAAMC,MAAM,GAAGC,OAAO,CAAC,CAAD,EAAG,CAAH,CAAtB;AACA,QAAIC,OAAO,GAAG,IAAIvB,eAAJ,CAAoB,IAAID,cAAJ,CAAmBuB,OAAO,CAAC,CAAC,GAAF,EAAM,IAAN,CAA1B,CAApB,CAAd;AACA,QAAIE,KAAK,GAAG,CAACD,OAAO,CAACE,IAAT,CAAZ;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,MAA5B,EAAoCM,KAAK,EAAzC,EAA6C;AACzC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAIE,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACE,GAAL,CAASZ,aAAT,EAAwBO,KAAxB,CAApB,EAAoD;AAChDH,UAAAA,KAAK,CAACI,CAAD,CAAL,CAASK,IAAT,GAAgB,IAAIlC,cAAJ,CAAmBuB,OAAO,CAAC,CAAC,GAAF,EAAM,IAAN,CAA1B,CAAhB;AACAI,UAAAA,QAAQ,CAACQ,IAAT,CAAcV,KAAK,CAACI,CAAD,CAAL,CAASK,IAAvB;AACH;;AACD,YAAIH,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACE,GAAL,CAASZ,aAAT,EAAwBO,KAAxB,CAApB,EAAoD;AAChDH,UAAAA,KAAK,CAACI,CAAD,CAAL,CAASO,KAAT,GAAiB,IAAIpC,cAAJ,CAAmBuB,OAAO,CAAC,CAAC,GAAF,EAAM,IAAN,CAA1B,CAAjB;AACAI,UAAAA,QAAQ,CAACQ,IAAT,CAAcV,KAAK,CAACI,CAAD,CAAL,CAASO,KAAvB;AACH;AACJ;;AACDX,MAAAA,KAAK,GAAGE,QAAR;AACAA,MAAAA,QAAQ,GAAG,EAAX;AACH;;AACDpB,IAAAA,OAAO,CAACiB,OAAD,CAAP;AACH,GArBD;;AAsBA,QAAMD,OAAO,GAAG,CAACc,GAAD,EAAMC,GAAN,KAAc;AAC1B,WAAOP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,MAAiBM,GAAG,GAACD,GAArB,IAA4BA,GAAvC,CAAP;AACH,GAFD,CA3C6B,CA+C7B;;;AACAtC,EAAAA,SAAS,CAACqB,UAAD,EAAa,EAAb,CAAT,CAhD6B,CAkD7B;;AACA,QAAMoB,GAAG,GAAG,MAAM,CAEjB,CAFD,CAnD6B,CAuD7B;;;AACA,QAAMC,MAAM,GAAG,MAAM;AACjB,QAAI7B,SAAS,CAACE,OAAd,EACI4B,eAAe;AACnB,QAAIC,IAAI,GAAGC,QAAQ,CAAClC,WAAW,CAACI,OAAZ,CAAoB+B,KAArB,CAAnB;AACA,QAAIC,KAAK,CAACH,IAAD,CAAT,EACIA,IAAI,GAAG,CAAP;AACJjC,IAAAA,WAAW,CAACI,OAAZ,CAAoB+B,KAApB,GAA4B,IAA5B;AACArC,IAAAA,SAAS,CAACM,OAAV,GAAoB,EAApB;AACA0B,IAAAA,GAAG;AACH1B,IAAAA,OAAO,CAACA,OAAR,GAAkBN,SAAS,CAACM,OAAV,CAAkB,CAAlB,CAAlB;AACAL,IAAAA,KAAK,CAACK,OAAN,GAAgB,CAAhB;AACAD,IAAAA,WAAW,CAACC,OAAZ,GAAsB6B,IAAtB;AACAD,IAAAA,eAAe;AACfxB,IAAAA,WAAW;AACd,GAdD,CAxD6B,CAwE7B;;;AACA,QAAM6B,aAAa,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYxC,KAAK,CAACK,OAAlB;AACAkC,IAAAA,OAAO,CAACC,GAAR,CAAYzC,SAAS,CAACM,OAAV,CAAkBgB,MAA9B;;AACA,QAAIhB,OAAO,CAACA,OAAR,CAAgB+B,KAAhB,KAA0BhC,WAAW,CAACC,OAA1C,EAAmD;AAC/CE,MAAAA,KAAK,CAACF,OAAN,GAAgBA,OAAO,CAACA,OAAxB;AACAA,MAAAA,OAAO,CAACA,OAAR,GAAkB,IAAlB;AACA4B,MAAAA,eAAe;AAClB,KAJD,MAIO,IAAIjC,KAAK,CAACK,OAAN,KAAkBN,SAAS,CAACM,OAAV,CAAkBgB,MAAlB,GAAyB,CAA/C,EAAkD;AACrDb,MAAAA,IAAI,CAACH,OAAL,GAAeA,OAAO,CAACA,OAAvB;AACAA,MAAAA,OAAO,CAACA,OAAR,GAAkB,IAAlB;AACA4B,MAAAA,eAAe;AAClB,KAJM,MAIA;AACHjC,MAAAA,KAAK,CAACK,OAAN;AACAA,MAAAA,OAAO,CAACA,OAAR,GAAkBN,SAAS,CAACM,OAAV,CAAkBL,KAAK,CAACK,OAAxB,CAAlB;AACH;AACJ,GAfD,CAzE6B,CA0F7B;;;AACA,QAAM4B,eAAe,GAAG,MAAM;AAC1B,QAAI9B,SAAS,CAACE,OAAd,EAAuB;AACnBoC,MAAAA,aAAa,CAACnC,QAAQ,CAACD,OAAV,CAAb;AACAF,MAAAA,SAAS,CAACE,OAAV,GAAoB,KAApB;AACH,KAHD,MAGO;AACHC,MAAAA,QAAQ,CAACD,OAAT,GAAmBqC,WAAW,CAAC,MAAM;AACjCJ,QAAAA,aAAa;AACb7B,QAAAA,WAAW;AACd,OAH6B,EAG3B,OAAKP,WAAW,CAACG,OAAZ,CAAoB+B,KAHE,CAA9B;AAIAjC,MAAAA,SAAS,CAACE,OAAV,GAAoB,IAApB;AACAE,MAAAA,KAAK,CAACF,OAAN,GAAgB,IAAhB;AACAG,MAAAA,IAAI,CAACH,OAAL,GAAe,IAAf;AACH;AACJ,GAbD,CA3F6B,CA0G7B;;;AACA,QAAMsC,WAAW,GAAG,MAAM;AACtB,QAAIxC,SAAS,CAACE,OAAd,EAAuB;AACnBoC,MAAAA,aAAa,CAACnC,QAAQ,CAACD,OAAV,CAAb;AACAC,MAAAA,QAAQ,CAACD,OAAT,GAAmBqC,WAAW,CAAC,MAAM;AACjCJ,QAAAA,aAAa;AACb7B,QAAAA,WAAW;AACd,OAH6B,EAG3B,OAAKP,WAAW,CAACG,OAAZ,CAAoB+B,KAHE,CAA9B;AAIH;AACJ,GARD;;AAUA,sBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,4BACI;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACI;AAAQ,UAAA,EAAE,EAAC,cAAX;AAA0B,UAAA,OAAO,EAAEzB,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,EAAE,EAAC,cAAX;AAA0B,UAAA,OAAO,EAAEqB,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAO,UAAA,EAAE,EAAC,aAAV;AAAwB,UAAA,GAAG,EAAE/B,WAA7B;AAA0C,UAAA,IAAI,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,SAAS,EAAC,QAAjB;AAA0B,YAAA,GAAG,EAAEC,WAA/B;AAA4C,YAAA,QAAQ,EAAEyC,WAAtD;AAAmE,YAAA,GAAG,EAAC,GAAvE;AAA2E,YAAA,GAAG,EAAC,KAA/E;AAAqF,YAAA,IAAI,EAAC;AAA1F;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI,QAAC,iBAAD;AAAmB,UAAA,IAAI,EAAE9C,IAAzB;AAA+B,UAAA,MAAM,EAAEQ,OAAO,CAACA,OAA/C;AAAwD,UAAA,KAAK,EAAEE,KAAK,CAACF,OAArE;AAA8E,UAAA,IAAI,EAAEG,IAAI,CAACH;AAAzF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAiBI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI,QAAC,OAAD;AAAS,QAAA,MAAM,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH,CApJD;;GAAMV,kB;;KAAAA,kB;AAsJN,eAAeA,kBAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './BreadthFirstSearch.scss';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\r\nimport Element from '../Element/Element';\r\n\r\nconst BreadthFirstSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinaryTreeClass(null));\r\n    const nodeQueue = useRef([]);\r\n    const index = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const current = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    //function to add nodes to queue in DFS order\r\n    const bfs = () => {\r\n\r\n    }\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        nodeQueue.current = [];\r\n        bfs();\r\n        current.current = nodeQueue.current[0];\r\n        index.current = 0;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        console.log(index.current);\r\n        console.log(nodeQueue.current.length);\r\n        if (current.current.value === searchValue.current) {\r\n            green.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else if (index.current === nodeQueue.current.length-1) {\r\n            pink.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else {\r\n            index.current++;\r\n            current.current = nodeQueue.current[index.current];\r\n        }\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"breadth-first-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={current.current} green={green.current} pink={pink.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element Not Found</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BreadthFirstSearch;"]},"metadata":{},"sourceType":"module"}