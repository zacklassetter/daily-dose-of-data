{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\Array\\\\Array.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './Array.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ArrayDisplay = props => {\n  return props.array.map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labeledElement\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        value: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this);\n  });\n};\n\n_c = ArrayDisplay;\n\nconst Array = () => {\n  _s();\n\n  const [array] = useState([]);\n  const [, forceRender] = useState(0);\n  const arraySize = useRef();\n  const insertIndex = useRef();\n  const insertValue = useRef();\n  const removeIndex = useRef();\n  const arrayOutput = useRef();\n  const getIndex = useRef();\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  };\n\n  const build = () => {\n    array.length = 0;\n    var size = arraySize.current.value;\n\n    while (size > 0) {\n      array.push(null);\n      size--;\n    }\n\n    arraySize.current.value = null;\n    forceUpdate();\n  };\n\n  const insert = () => {\n    const index = parseInt(insertIndex.current.value);\n    const value = parseInt(insertValue.current.value);\n\n    if (!isNaN(index) && !isNaN(value) && index >= 0 && index < array.length) {\n      array[index] = value;\n      forceUpdate();\n    } else {\n      arrayOutput.current.value = \"Invalid\";\n    }\n\n    insertIndex.current.value = null;\n    insertValue.current.value = null;\n  };\n\n  const remove = () => {\n    const index = parseInt(removeIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < array.length) {\n      const data = array[index];\n      arrayOutput.current.value = data;\n\n      if (array[index] == null) {\n        arrayOutput.current.value = \"Invalid\";\n      }\n\n      array[index] = null;\n      forceUpdate();\n    } else {\n      arrayOutput.current.value = \"Invalid\";\n    }\n\n    removeIndex.current.value = null;\n  };\n\n  const get = () => {\n    const index = parseInt(getIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < array.length) {\n      const data = array[index];\n      arrayOutput.current.value = data;\n\n      if (array[index] == null) {\n        arrayOutput.current.value = \"null\";\n      }\n    } else {\n      arrayOutput.current.value = \"Invalid\";\n    }\n\n    getIndex.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"array\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"buildButton\",\n        onClick: build,\n        children: \"Build\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: arraySize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"setButton\",\n        onClick: insert,\n        children: \"Set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"setIndex\",\n          type: \"text\",\n          ref: insertIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"setValue\",\n          type: \"text\",\n          ref: insertValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: removeIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getButton\",\n        onClick: get,\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: getIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"arrayOutput\",\n        type: \"text\",\n        ref: arrayOutput,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ArrayDisplay, {\n      array: array\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Array, \"9w9PVCRpXyGLqt/YY2h4dHad4WM=\");\n\n_c2 = Array;\nexport default Array;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ArrayDisplay\");\n$RefreshReg$(_c2, \"Array\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/Array/Array.js"],"names":["React","useState","useRef","Element","ArrayDisplay","props","array","map","value","index","Array","forceRender","arraySize","insertIndex","insertValue","removeIndex","arrayOutput","getIndex","forceUpdate","renders","build","length","size","current","push","insert","parseInt","isNaN","remove","data","get"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './Array.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        return (\r\n            <div className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element key={index} value={value}></Element>\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\nconst Array = () => {\r\n    const [array,] = useState([]);\r\n    const [, forceRender] = useState(0);\r\n    const arraySize = useRef();\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const arrayOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    const build = () => {\r\n        array.length = 0;\r\n            var size = arraySize.current.value;\r\n            while (size > 0) {\r\n                array.push(null);\r\n                size--;\r\n        }\r\n        arraySize.current.value = null;\r\n            forceUpdate();\r\n        \r\n    }\r\n\r\n    const insert = () => {\r\n        const index = parseInt(insertIndex.current.value);\r\n        const value = parseInt(insertValue.current.value);\r\n        if (!isNaN(index) && !isNaN(value) && index >= 0 && index < array.length) {\r\n            array[index] = value;\r\n            forceUpdate();\r\n        } else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        insertIndex.current.value = null;\r\n        insertValue.current.value = null;\r\n    }\r\n\r\n    const remove = () => {\r\n        const index = parseInt(removeIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < array.length) {\r\n            const data = array[index];\r\n            arrayOutput.current.value = data;\r\n            if (array[index] == null) {\r\n                arrayOutput.current.value = \"Invalid\";\r\n            }\r\n            array[index] = null;\r\n            \r\n            forceUpdate();\r\n            \r\n        }\r\n        \r\n        else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n    const get = () => {\r\n        const index = parseInt(getIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < array.length) {\r\n            const data = array[index];\r\n            arrayOutput.current.value = data;\r\n            if (array[index] == null) {\r\n                arrayOutput.current.value = \"null\";\r\n            }\r\n        } else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"array\">\r\n            <div className=\"controls\">\r\n                <button id=\"buildButton\" onClick={build}>Build</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input type=\"text\" ref={arraySize}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"setButton\" onClick={insert}>Set</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"setIndex\" type=\"text\" ref={insertIndex}></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"setValue\" type=\"text\" ref={insertValue}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Delete</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input type=\"text\" ref={removeIndex}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input type=\"text\" ref={getIndex}></input>\r\n                </span>\r\n                \r\n                <br />\r\n                <input id=\"arrayOutput\" type=\"text\" ref={arrayOutput} readOnly></input>\r\n                <br />\r\n                \r\n            </div>\r\n            <ArrayDisplay array={ array }/ >\r\n        </div>);\r\n}\r\n\r\nexport default Array;"]},"metadata":{},"sourceType":"module"}