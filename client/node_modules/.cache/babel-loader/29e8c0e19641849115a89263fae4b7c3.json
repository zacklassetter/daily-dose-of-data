{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\Map\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Map.scss';\nimport Element from '../Element/Element'; //react component to display a map\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MapDisplay = props => {}; //react component for map visualization\n\n\n_c = MapDisplay;\n\nconst MyMap = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [map, setMap] = useState(new Map());\n  const insertKey = useRef();\n  const insertValue = useRef();\n  const removeKey = useRef();\n  const getKey = useRef();\n  const getOutput = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random map\n\n\n  const randomMap = () => {\n    const size = randInt(20, 100);\n    const newMap = new Map();\n\n    for (let i = 0; i < size; i++) newMap.set(randInt(-999, 1000), randInt(-999, 1000));\n\n    setMap(newMap);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to create an empty map\n\n\n  const emptyMap = () => {\n    setMap(new Map());\n  }; //initialize to a random map\n\n\n  useEffect(randomMap, []); //function to insert into map\n\n  const insert = () => {\n    var key = parseInt(insertKey.current.value);\n    if (isNaN(key)) key = randInt(-999, 1000);\n    var value = parseInt(insertValue.current.value);\n    if (isNaN(value)) value = randInt(-999, 1000);\n    map.set(key, value);\n    forceUpdate();\n    insertKey.current.value = null;\n    insertValue.current.value = null;\n  }; //function to remove from map\n\n\n  const remove = () => {\n    var key = parseInt(removeKey.current.value);\n    if (!isNaN(key)) map.delete(key);\n    forceUpdate();\n    removeKey.current.value = null;\n  }; //function to get a value for a key in a map\n\n\n  const get = () => {\n    var key = parseInt(getKey.current.value);\n    if (!isNaN(key)) getOutput.current.value = map.get(key);\n    forceUpdate();\n    getKey.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"key\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomMap,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"emptyButton\",\n        onClick: emptyMap,\n        children: \"Empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"insertKey\",\n        ref: insertKey,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"insertValue\",\n        ref: insertValue,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"removeKey\",\n        ref: removeKey,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getButton\",\n        onClick: get,\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"getKey\",\n        ref: getKey,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"getOutput\",\n        ref: getOutput,\n        type: \"text\",\n        readonly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(MapDisplay, {\n        map: map\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyMap, \"ne0jIJAOEtosOzL/XmlcQyuH9Kc=\");\n\n_c2 = MyMap;\nexport default MyMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapDisplay\");\n$RefreshReg$(_c2, \"MyMap\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/Map/Map.js"],"names":["React","useState","useRef","useEffect","Element","MapDisplay","props","MyMap","forceRender","map","setMap","Map","insertKey","insertValue","removeKey","getKey","getOutput","forceUpdate","renders","randomMap","size","randInt","newMap","i","set","min","max","Math","floor","random","emptyMap","insert","key","parseInt","current","value","isNaN","remove","delete","get"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Map.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//react component to display a map\r\nconst MapDisplay = (props) => {\r\n    \r\n}\r\n\r\n//react component for map visualization\r\nconst MyMap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [map, setMap] = useState(new Map());\r\n    const insertKey = useRef();\r\n    const insertValue = useRef();\r\n    const removeKey = useRef();\r\n    const getKey = useRef();\r\n    const getOutput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random map\r\n    const randomMap = () => {\r\n        const size = randInt(20, 100);\r\n        const newMap = new Map();\r\n        for (let i = 0; i < size; i++)\r\n            newMap.set(randInt(-999,1000), randInt(-999,1000));\r\n        setMap(newMap);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to create an empty map\r\n    const emptyMap = () => {\r\n        setMap(new Map());\r\n    }\r\n\r\n    //initialize to a random map\r\n    useEffect(randomMap, []);\r\n\r\n    //function to insert into map\r\n    const insert = () => {\r\n        var key = parseInt(insertKey.current.value);\r\n        if (isNaN(key))\r\n            key = randInt(-999,1000);\r\n        var value = parseInt(insertValue.current.value);\r\n        if (isNaN(value))\r\n            value = randInt(-999,1000);\r\n        map.set(key, value);\r\n        forceUpdate();\r\n        insertKey.current.value = null;\r\n        insertValue.current.value = null;\r\n    }\r\n\r\n    //function to remove from map\r\n    const remove = () => {\r\n        var key = parseInt(removeKey.current.value);\r\n        if (!isNaN(key))\r\n            map.delete(key);\r\n        forceUpdate();\r\n        removeKey.current.value = null;\r\n    }\r\n\r\n    //function to get a value for a key in a map\r\n    const get = () => {\r\n        var key = parseInt(getKey.current.value);\r\n        if (!isNaN(key))\r\n            getOutput.current.value = map.get(key);\r\n        forceUpdate();\r\n        getKey.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"key\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomMap}>Random</button>\r\n                <br />\r\n                <button id=\"emptyButton\" onClick={emptyMap}>Empty</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input id=\"insertKey\" ref={insertKey} type=\"text\"></input>\r\n                <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input id=\"removeKey\" ref={removeKey} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <input id=\"getKey\" ref={getKey} type=\"text\"></input>\r\n                <br />\r\n                <input id=\"getOutput\" ref={getOutput} type=\"text\" readonly></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <MapDisplay map={map} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyMap;"]},"metadata":{},"sourceType":"module"}