{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\LinkedList\\\\LinkedList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './LinkedList.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n\n}\n\nclass LinkedListClass {\n  constructor(head = null) {\n    this.head = head;\n    this.size = 0;\n  } //for insertion at tail -- currently unused\n\n\n  insert(data) {\n    if (this.head == null) {\n      this.head = new Node(data);\n    } else {\n      var current = this.head;\n\n      while (current.next != null) {\n        current = current.next;\n      }\n\n      current.next = new Node(data);\n    }\n\n    this.size++;\n  }\n\n  insertAt(data, index) {\n    var newNode = new Node(data);\n    var current = this.head;\n    var previous;\n\n    if (index <= this.size) {\n      if (index === 0) {\n        newNode.next = this.head;\n        this.head = newNode;\n      } else {\n        var i = 0;\n\n        while (i < index) {\n          i++;\n          previous = current;\n          current = current.next;\n        }\n\n        newNode.next = current;\n        previous.next = newNode;\n      }\n\n      this.size++;\n    }\n  }\n\n  get(index) {\n    var i = 0;\n    var current = this.head;\n\n    while (i !== index) {\n      current = current.next;\n      i++;\n    }\n\n    return current.value;\n  }\n\n  remove(index) {\n    var i = 0;\n    var curr, prev, next;\n\n    if (index < this.size && this.size > 0) {\n      if (index === 0) {\n        this.head = this.head.next;\n        this.size--;\n      } else {\n        i++;\n        prev = this.head;\n        curr = prev.next;\n        next = curr.next;\n\n        while (i !== index) {\n          i++;\n          prev = prev.next;\n          curr = curr.next;\n          next = next.next;\n        }\n\n        prev.next = next;\n        this.size--;\n      }\n    }\n  }\n\n}\n\nconst LinkedListDisplay = props => {\n  var current = props.list.head;\n  var index = 0;\n  var componentList = [];\n\n  while (current != null) {\n    componentList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labeledElement\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        value: current.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, 2 * index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this));\n    componentList.push( /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"arrow\",\n      children: \"\\u2192\"\n    }, 2 * index + 1, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this));\n    current = current.next;\n    index++;\n  }\n\n  componentList.push( /*#__PURE__*/_jsxDEV(Element, {\n    value: \"null\"\n  }, 2 * index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 24\n  }, this));\n  return componentList;\n};\n\n_c = LinkedListDisplay;\n\nconst LinkedList = () => {\n  _s();\n\n  const [list, setList] = useState(new LinkedListClass());\n  const [, forceRender] = useState(0);\n  const randomSize = useRef();\n  const insertIndex = useRef();\n  const insertValue = useRef();\n  const removeIndex = useRef();\n  const listOutput = useRef();\n  const getIndex = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets list to a randomly generated list\n\n\n  const randomList = () => {\n    var size = randomSize.current.value;\n\n    if (size === \"\") {\n      size = randInt(8, 40);\n    }\n\n    if (!isNaN(parseInt(size)) && size > 0) {\n      var newList = new LinkedListClass();\n\n      for (let i = 0; i < size; i++) newList.insertAt(randInt(-999, 1000), 0);\n\n      setList(newList);\n    }\n\n    randomSize.current.value = null;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize list to random list\n\n\n  useEffect(randomList, []); //insertion only occurs at head for now\n\n  function insert() {\n    var data = parseInt(insertValue.current.value);\n    var index = parseInt(insertIndex.current.value);\n    if (isNaN(data)) data = 0;\n    if (isNaN(index)) index = 0;\n\n    if (index >= 0 && index < list.size) {\n      list.insertAt(data, index);\n      forceUpdate();\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    insertValue.current.value = null;\n    insertIndex.current.value = null;\n  }\n\n  function get() {\n    var index = parseInt(getIndex.current.value);\n    if (isNaN(index)) index = 0;\n\n    if (index >= 0 && index < list.size) {\n      listOutput.current.value = list.get(index);\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    getIndex.current.value = null;\n  }\n\n  function remove() {\n    var index = parseInt(removeIndex.current.value);\n    if (isNaN(index)) index = 0;\n\n    if (index >= 0 && index < list.size) {\n      listOutput.current.value = list.get(index);\n      list.remove(index);\n      forceUpdate();\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    removeIndex.current.value = null;\n  } //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    if (animationFunction.current != null) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"linked-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomList,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomSizeInput\",\n          ref: randomSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertIndex\",\n          ref: insertIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertValue\",\n          ref: insertValue,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: remove,\n        id: \"removeButton\",\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"removeIndex\",\n          ref: removeIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"listOutput\",\n        type: \"text\",\n        ref: listOutput,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getButton\",\n        onClick: get,\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"getIndex\",\n          ref: getIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(LinkedListDisplay, {\n        list: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LinkedList, \"kGP+O7uMy+cCBHtSO6uPoIZwhC8=\");\n\n_c2 = LinkedList;\nexport default LinkedList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LinkedListDisplay\");\n$RefreshReg$(_c2, \"LinkedList\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/LinkedList/LinkedList.js"],"names":["React","useState","useRef","useEffect","Element","Node","constructor","value","next","LinkedListClass","head","size","insert","data","current","insertAt","index","newNode","previous","i","get","remove","curr","prev","LinkedListDisplay","props","list","componentList","push","LinkedList","setList","forceRender","randomSize","insertIndex","insertValue","removeIndex","listOutput","getIndex","forceUpdate","renders","randomList","randInt","isNaN","parseInt","newList","min","max","Math","floor","random","updateSpeed","animationFunction","clearInterval","interval","setInterval","speedSlider"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './LinkedList.scss';\r\nimport Element from '../Element/Element';\r\n\r\nclass Node {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\nclass LinkedListClass {\r\n    constructor(head = null) {\r\n        this.head = head;\r\n        this.size = 0;\r\n    }\r\n\r\n    //for insertion at tail -- currently unused\r\n    insert(data) {\r\n        if (this.head == null) {\r\n            this.head = new Node(data);\r\n        }\r\n        else {\r\n            var current = this.head;\r\n            while (current.next != null) {\r\n                current = current.next;\r\n            }\r\n            current.next = new Node(data);\r\n        }\r\n        this.size++;\r\n    }\r\n\r\n    insertAt(data, index) {\r\n        var newNode = new Node(data);\r\n        var current = this.head;\r\n        var previous;\r\n\r\n        if (index <= this.size) {\r\n\r\n            if (index === 0) {\r\n                newNode.next = this.head;\r\n                this.head = newNode;\r\n            }\r\n            else {\r\n                var i = 0;\r\n                while (i < index) {\r\n                    i++;\r\n                    previous = current;\r\n                    current = current.next;\r\n                }\r\n                newNode.next = current;\r\n                previous.next = newNode;\r\n            }\r\n            this.size++;\r\n        }\r\n    }\r\n\r\n    get(index) {\r\n        var i = 0;\r\n        var current = this.head;\r\n        while (i !== index) {\r\n            current = current.next;\r\n            i++;\r\n        }\r\n        return current.value;\r\n    }\r\n\r\n    remove(index) {\r\n        var i = 0;\r\n        var curr, prev, next;\r\n        if (index < this.size && this.size > 0) {\r\n            if (index === 0) {\r\n                this.head = this.head.next;\r\n                this.size--;\r\n            }\r\n            else {\r\n                i++;\r\n                prev = this.head;\r\n                curr = prev.next;\r\n                next = curr.next;\r\n                while (i !== index) {\r\n                    i++;\r\n                    prev = prev.next;\r\n                    curr = curr.next;\r\n                    next = next.next;\r\n                }\r\n                prev.next = next;\r\n                this.size--;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst LinkedListDisplay = (props) => {\r\n    var current = props.list.head;\r\n    var index = 0;\r\n    var componentList = [];\r\n    while (current != null) {\r\n        componentList.push(\r\n            <div key={2*index} className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element value={current.value}></Element>\r\n            </div>\r\n        );\r\n        componentList.push(\r\n            <p className=\"arrow\" key={2*index+1}>&#x2192;</p>\r\n        );\r\n        current = current.next;\r\n        index++;\r\n    }\r\n    componentList.push(<Element key={2*index} value=\"null\" />);\r\n    return componentList;\r\n\r\n    \r\n}\r\n\r\nconst LinkedList = () => {\r\n\r\n    const [list, setList] = useState(new LinkedListClass());\r\n    const [, forceRender] = useState(0);\r\n    const randomSize = useRef();\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const listOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets list to a randomly generated list\r\n    const randomList = () => {\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(8, 40);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newList = new LinkedListClass();\r\n            for (let i = 0; i < size; i++)\r\n                newList.insertAt(randInt(-999,1000), 0);\r\n            setList(newList);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize list to random list\r\n    useEffect(randomList, []);\r\n\r\n    //insertion only occurs at head for now\r\n    function insert() {\r\n        var data = parseInt(insertValue.current.value);\r\n        var index = parseInt(insertIndex.current.value);\r\n        if(isNaN(data))\r\n            data = 0;\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.size) {\r\n            list.insertAt(data, index);\r\n            forceUpdate();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        insertValue.current.value = null;\r\n        insertIndex.current.value = null;\r\n        \r\n    }\r\n\r\n    function get() {\r\n        var index = parseInt(getIndex.current.value);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.size) {\r\n            listOutput.current.value = list.get(index);\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n    function remove() {\r\n        var index = parseInt(removeIndex.current.value);\r\n        if(isNaN(index))\r\n            index = 0;\r\n        if (index >= 0 && index < list.size) {\r\n            listOutput.current.value = list.get(index);\r\n            list.remove(index);\r\n            forceUpdate();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"linked-list\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomList}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"insertIndex\" ref={insertIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button onClick={remove} id=\"removeButton\" >Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"removeIndex\" ref={removeIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"listOutput\" type=\"text\" ref={listOutput} readOnly></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get} >Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"getIndex\" ref={getIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n\r\n            <div className=\"visualization\">\r\n                <LinkedListDisplay list={list} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LinkedList;"]},"metadata":{},"sourceType":"module"}