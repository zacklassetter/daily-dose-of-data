{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\List\\\\List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './List.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListDisplay = () => {}; //main react component for list\n\n\n_c = ListDisplay;\n\nconst List = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [list] = useState([]);\n  const insertIndex = useRef();\n  const insertValue = useRef();\n  const removeIndex = useRef();\n  const listOutput = useRef();\n  const getIndex = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  };\n\n  const insert = () => {\n    const index = parseInt(insertIndex.current.value);\n    const value = parseInt(insertValue.current.value);\n\n    if (!isNaN(index) && !isNaN(value) && index >= 0 && index <= list.length) {\n      list.splice(index, 0, value);\n      forceUpdate();\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    insertIndex.current.value = null;\n    insertValue.current.value = null;\n  };\n\n  const remove = () => {\n    const index = parseInt(removeIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < list.length) {\n      const data = list.splice(index, 1);\n      forceUpdate();\n      listOutput.current.value = data;\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    removeIndex.current.value = null;\n  };\n\n  const get = () => {\n    const index = parseInt(getIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < list.length) {\n      const data = list[index];\n      listOutput.current.value = data;\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    getIndex.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertIndex\",\n          ref: insertIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertValue\",\n          ref: insertValue,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"removeIndex\",\n          ref: removeIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"listOutput\",\n        type: \"text\",\n        ref: listOutput,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getButton\",\n        onClick: get,\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"getIndex\",\n          ref: getIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(ListDisplay, {\n        list: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(List, \"H7mCpaZ+x04Tm3Dk/ZfGPN3TRcw=\");\n\n_c2 = List;\nexport default List;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ListDisplay\");\n$RefreshReg$(_c2, \"List\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/List/List.js"],"names":["React","useState","useRef","Element","ListDisplay","List","forceRender","list","insertIndex","insertValue","removeIndex","listOutput","getIndex","forceUpdate","renders","insert","index","parseInt","current","value","isNaN","length","splice","remove","data","get"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './List.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst ListDisplay = () => {\r\n    \r\n}\r\n\r\n//main react component for list\r\nconst List = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [list,] = useState([]);\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const listOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    const insert = () => {\r\n        const index = parseInt(insertIndex.current.value);\r\n        const value = parseInt(insertValue.current.value);\r\n        if (!isNaN(index) && !isNaN(value) && index >= 0 && index <= list.length) {\r\n            list.splice(index, 0, value);\r\n            forceUpdate();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        insertIndex.current.value = null;\r\n        insertValue.current.value = null;\r\n    }\r\n\r\n    const remove = () => {\r\n        const index = parseInt(removeIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < list.length) {\r\n            const data = list.splice(index, 1);\r\n            forceUpdate();\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n    const get = () => {\r\n        const index = parseInt(getIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < list.length) {\r\n            const data = list[index];\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"list\">\r\n            <div className=\"controls\">\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"insertIndex\" ref={insertIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"removeIndex\" ref={removeIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"listOutput\" type=\"text\" ref={listOutput} readOnly></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"getIndex\" ref={getIndex} type=\"text\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <ListDisplay list={list} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;"]},"metadata":{},"sourceType":"module"}