{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\BinaryTree\\\\BinaryTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './BinaryTree.scss'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary tree data structure\n\n\nclass BinaryTreeClass {\n  constructor(root) {\n    this.root = root;\n  }\n\n}\n\nconst BinaryTree = () => {\n  _s();\n\n  const [tree] = useState(new BinaryTreeClass());\n  const [, forceRender] = useState(0); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryTree, \"CpqlsV+qsHNsuWPBOSHdH3KE8sc=\");\n\n_c = BinaryTree;\nexport default BinaryTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/BinaryTree/BinaryTree.js"],"names":["React","useState","TreeNode","constructor","value","left","right","BinaryTreeClass","root","BinaryTree","tree","forceRender","forceUpdate","renders"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP,C,CAEA;;;;AACA,MAAMC,QAAN,CAAe;AACXC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AALU,C,CAQf;;;AACA,MAAMC,eAAN,CAAsB;AAClBJ,EAAAA,WAAW,CAACK,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AAHiB;;AAMtB,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,IAAD,IAAWT,QAAQ,CAAC,IAAIM,eAAJ,EAAD,CAAzB;AACA,QAAM,GAAGI,WAAH,IAAkBV,QAAQ,CAAC,CAAD,CAAhC,CAHqB,CAKrB;;AACA,QAAMW,WAAW,GAAG,MAAM;AACtBD,IAAAA,WAAW,CAACE,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAX;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CArBD;;GAAMJ,U;;KAAAA,U;AAuBN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport './BinaryTree.scss';\r\n\r\n//class for node in binary tree\r\nclass TreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nclass BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\nconst BinaryTree = () => {\r\n\r\n    const [tree, ] = useState(new BinaryTreeClass());\r\n    const [, forceRender] = useState(0);\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-tree\">\r\n            <div className=\"controls\">\r\n                <button></button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}