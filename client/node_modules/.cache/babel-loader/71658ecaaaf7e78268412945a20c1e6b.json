{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinarySearchTree\\\\BinarySearchTreeInformation.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BinarySearchTreeInformation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"information\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Binary Search Tree\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A Binary Search Tree is a tree data structure where elements are kept in an ordered pattern. For any given node, all of the elements in the left sub-tree are less than or equal to the given node, and all of the elements in the right sub-tree are greater than or equal to the given node.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = BinarySearchTreeInformation;\nexport default BinarySearchTreeInformation;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinarySearchTreeInformation\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinarySearchTree/BinarySearchTreeInformation.js"],"names":["React","BinarySearchTreeInformation"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,2BAA2B,GAAG,MAAM;AACtC,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAPD;;KAAMA,2B;AASN,eAAeA,2BAAf","sourcesContent":["import React from 'react';\r\n\r\nconst BinarySearchTreeInformation = () => {\r\n    return (\r\n        <div className=\"information\">\r\n            <h1>Binary Search Tree</h1>\r\n            <p>A Binary Search Tree is a tree data structure where elements are kept in an ordered pattern. For any given node, all of the elements in the left sub-tree are less than or equal to the given node, and all of the elements in the right sub-tree are greater than or equal to the given node.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinarySearchTreeInformation;"]},"metadata":{},"sourceType":"module"}