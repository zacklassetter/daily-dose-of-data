{"ast":null,"code":"import _slicedToArray from\"C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef,useEffect}from'react';import'./DepthFirstSearch.scss';import{BinaryTreeNode,BinaryTreeClass}from'../BinaryTree/BinaryTree.js';import BinaryTreeDisplay from'../BinaryTree/BinaryTreeDisplay';import Element from'../Element/Element';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DepthFirstSearch=function DepthFirstSearch(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState(new BinaryTreeClass(null)),_useState4=_slicedToArray(_useState3,2),tree=_useState4[0],setTree=_useState4[1];var nodeQueue=useRef([]);var index=useRef();var searchInput=useRef();var speedSlider=useRef();var searching=useRef();var searchValue=useRef(null);var current=useRef(null);var interval=useRef();var green=useRef();var pink=useRef();//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//function to generate random tree\nvar randomTree=function randomTree(){var newNodeChance=0.9;var levels=randInt(1,5);var newTree=new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));var nodes=[newTree.root];var newNodes=[];for(var level=0;level<levels;level++){for(var i=0;i<nodes.length;i++){if(Math.random()<Math.pow(newNodeChance,level)){nodes[i].left=new BinaryTreeNode(randInt(-999,1000));newNodes.push(nodes[i].left);}if(Math.random()<Math.pow(newNodeChance,level)){nodes[i].right=new BinaryTreeNode(randInt(-999,1000));newNodes.push(nodes[i].right);}}nodes=newNodes;newNodes=[];}setTree(newTree);};var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//initialize tree to a random tree\nuseEffect(randomTree,[]);//function to add nodes to queue in DFS order\nvar dfs=function dfs(node){if(node!==null){nodeQueue.current.push(node);dfs(node.left);dfs(node.right);}};//function to start searching animation\nvar search=function search(){if(searching.current)toggleAnimation();var data=parseInt(searchInput.current.value);if(isNaN(data))data=0;searchInput.current.value=null;nodeQueue.current=[];dfs(tree.root);current.current=nodeQueue.current[0];index.current=0;searchValue.current=data;toggleAnimation();forceUpdate();};//function to 1 step of searching animation\nvar searchingStep=function searchingStep(){if(current.current.value===searchValue.current){green.current=current.current;current.current=null;toggleAnimation();}else if(index.current===nodeQueue.current.length-1){pink.current=current.current;current.current=null;toggleAnimation();}else{index.current++;current.current=nodeQueue.current[index.current];}};//function to turn searching on and off by button click\nvar toggleAnimation=function toggleAnimation(){if(searching.current){clearInterval(interval.current);searching.current=false;}else{interval.current=setInterval(function(){searchingStep();forceUpdate();},1000-speedSlider.current.value);searching.current=true;green.current=null;pink.current=null;}};//changes the animation speed of searching when the slider changes\nvar updateSpeed=function updateSpeed(){if(searching.current){clearInterval(interval.current);interval.current=setInterval(function(){searchingStep();forceUpdate();},1000-speedSlider.current.value);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"depth-first-search\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:randomTree,children:\"Random\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"searchButton\",onClick:search,children:\"Search\"}),/*#__PURE__*/_jsx(\"input\",{id:\"searchInput\",ref:searchInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledSlider\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Animation Speed\"}),/*#__PURE__*/_jsx(\"input\",{className:\"slider\",ref:speedSlider,onChange:updateSpeed,min:\"0\",max:\"990\",type:\"range\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"visualization\",children:/*#__PURE__*/_jsx(BinaryTreeDisplay,{tree:tree,border:current.current,green:green.current,pink:pink.current})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"legend\",children:[/*#__PURE__*/_jsx(Element,{color:\"green\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Element Found\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"pink\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Element Not Found\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{border:\"bordered\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Current Focus\"})]})]});};export default DepthFirstSearch;","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/src/DepthFirstSearch/DepthFirstSearch.js"],"names":["React","useState","useRef","useEffect","BinaryTreeNode","BinaryTreeClass","BinaryTreeDisplay","Element","DepthFirstSearch","forceRender","tree","setTree","nodeQueue","index","searchInput","speedSlider","searching","searchValue","current","interval","green","pink","forceUpdate","renders","randomTree","newNodeChance","levels","randInt","newTree","nodes","root","newNodes","level","i","length","Math","random","pow","left","push","right","min","max","floor","dfs","node","search","toggleAnimation","data","parseInt","value","isNaN","searchingStep","clearInterval","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './DepthFirstSearch.scss';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\r\nimport Element from '../Element/Element';\r\n\r\nconst DepthFirstSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinaryTreeClass(null));\r\n    const nodeQueue = useRef([]);\r\n    const index = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const current = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    //function to add nodes to queue in DFS order\r\n    const dfs = (node) => {\r\n        if (node !== null) {\r\n            nodeQueue.current.push(node);\r\n            dfs(node.left);\r\n            dfs(node.right);\r\n        }\r\n\r\n    }\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = 0;\r\n        searchInput.current.value = null;\r\n        nodeQueue.current = [];\r\n        dfs(tree.root);\r\n        current.current = nodeQueue.current[0];\r\n        index.current = 0;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        if (current.current.value === searchValue.current) {\r\n            green.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else if (index.current === nodeQueue.current.length-1) {\r\n            pink.current = current.current;\r\n            current.current = null;\r\n            toggleAnimation();\r\n        } else {\r\n            index.current++;\r\n            current.current = nodeQueue.current[index.current];\r\n        }\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"depth-first-search\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                    <br />\r\n                    <button id=\"searchButton\" onClick={search}>Search</button>\r\n                    <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <BinaryTreeDisplay tree={tree} border={current.current} green={green.current} pink={pink.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Element Found</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Element Not Found</p>\r\n                <br />\r\n                <Element border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DepthFirstSearch;"]},"metadata":{},"sourceType":"module"}