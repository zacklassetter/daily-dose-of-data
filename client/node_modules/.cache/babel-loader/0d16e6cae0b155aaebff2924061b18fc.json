{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\InsertionSort\\\\InsertionSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './InsertionSort.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InsertionSortDisplay = props => {\n  return props.array.map((value, index) => {\n    if (index === props.currentCompare && index === props.currentInserting) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"yellow\",\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentCompare) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\",\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentInserting) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"yellow\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 20\n    }, this);\n    if (index < props.sortedEndIndex) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 20\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  });\n};\n\n_c = InsertionSortDisplay;\n\nconst InsertionSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [array, setArray] = useState([]);\n  const [sorted, setSorted] = useState(false);\n  const sorting = useRef(false);\n  const interval = useRef(null);\n  const sortedEndIndex = useRef(-1);\n  const currentInserting = useRef(-1);\n  const currentCompare = useRef(-1);\n  const toggleSortingButton = useRef();\n  const generateArrayButton = useRef();\n  const arraySizeInput = useRef();\n  const speedSlider = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //initializes a random array for sorting\n\n\n  const generateArray = () => {\n    if (sorting.current) {\n      toggleSorting();\n    }\n\n    const size = parseInt(arraySizeInput.current.value);\n\n    if (!isNaN(size) && size > 0) {\n      setArray(randomArray(size));\n      setSorted(false);\n      sortedEndIndex.current = -1;\n      currentInserting.current = -1;\n      currentCompare.current = -1;\n    }\n\n    arraySizeInput.current.value = null;\n  };\n\n  const randomArray = useCallback(size => {\n    var newArray = new Array(size);\n\n    for (let i = 0; i < size; i++) {\n      newArray[i] = randInt(-999, 1000);\n    }\n\n    return newArray;\n  }, []);\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  useEffect(() => {\n    setArray(randomArray(randInt(3, 20)));\n  }, [randomArray]); //completes one step of the sorting algorithm\n\n  const sortingStep = () => {\n    if (sortedEndIndex.current >= array.length) {\n      setSorted(true);\n      toggleSorting();\n      currentCompare.current = -1;\n      currentInserting.current = -1;\n    } //if found lower element, insert current after that, restart process\n    else if (array[currentCompare.current] < array[currentInserting.current]) {\n        let temp = array[currentInserting.current];\n\n        for (let i = currentInserting.current - 1; i > currentCompare.current; i--) {\n          array[i + 1] = array[i];\n        }\n\n        array[currentCompare.current + 1] = temp;\n        currentInserting.current++;\n        currentCompare.current = currentInserting.current;\n        sortedEndIndex.current++;\n      } //if at end of sorted and none lower found, insert at beginning, restart process\n      else if (currentCompare.current === 0) {\n          let temp = array[currentInserting.current];\n\n          for (let i = currentInserting.current - 1; i >= currentCompare.current; i--) {\n            array[i + 1] = array[i];\n          }\n\n          array[currentCompare.current] = temp;\n          currentInserting.current++;\n          currentCompare.current = currentInserting.current;\n          sortedEndIndex.current++;\n        } else if (currentInserting.current === -1) {\n          currentInserting.current++;\n          sortedEndIndex.current = 1;\n          currentCompare.current = currentInserting.current;\n        } else {\n          currentCompare.current--;\n        }\n  }; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Sort\";\n      toggleSortingButton.current.classList.remove(\"pinkButton\");\n      toggleSortingButton.current.classList.add(\"greenButton\");\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n      toggleSortingButton.current.classList.remove(\"greenButton\");\n      toggleSortingButton.current.classList.add(\"pinkButton\");\n    }\n  }; //changes the animation speed of sorting when the slider changes\n\n\n  const updateSpeed = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insertion-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"generateArrayButton\",\n          ref: generateArrayButton,\n          onClick: generateArray,\n          children: \"Random\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Array Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"arraySizeInput\",\n            ref: arraySizeInput,\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"toggleSortingButton\",\n          className: \"greenButton\",\n          ref: toggleSortingButton,\n          onClick: toggleSorting,\n          children: \"Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"labeledSlider\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Animation Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            ref: speedSlider,\n            onChange: updateSpeed,\n            min: \"0\",\n            max: \"990\",\n            type: \"range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization\",\n        children: /*#__PURE__*/_jsxDEV(InsertionSortDisplay, {\n          array: array,\n          sortedEndIndex: sortedEndIndex.current,\n          currentInserting: currentInserting.current,\n          currentCompare: currentCompare.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      children: [/*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Sorted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Unsorted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Element to be Inserted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        color: \"green\",\n        border: \"bordered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"= Current Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InsertionSort, \"Qxuu8+Wm0In5FdhEh6tHLvRXP1E=\");\n\n_c2 = InsertionSort;\nexport default InsertionSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InsertionSortDisplay\");\n$RefreshReg$(_c2, \"InsertionSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/InsertionSort/InsertionSort.js"],"names":["React","useState","useRef","useEffect","useCallback","Element","InsertionSortDisplay","props","array","map","value","index","currentCompare","currentInserting","sortedEndIndex","InsertionSort","forceRender","setArray","sorted","setSorted","sorting","interval","toggleSortingButton","generateArrayButton","arraySizeInput","speedSlider","forceUpdate","renders","generateArray","current","toggleSorting","size","parseInt","isNaN","randomArray","newArray","Array","i","randInt","min","max","Math","floor","random","sortingStep","length","temp","clearInterval","innerHTML","classList","remove","add","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './InsertionSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\nconst InsertionSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.currentCompare && index === props.currentInserting)\r\n            return <Element key={index} value={value} color=\"yellow\" border=\"bordered\" />\r\n\r\n        if (index === props.currentCompare)\r\n            return <Element key={index} value={value} color=\"green\" border=\"bordered\" />\r\n\r\n        if (index === props.currentInserting)\r\n            return <Element key={index} value={value} color=\"yellow\" />\r\n\r\n        if (index < props.sortedEndIndex)\r\n            return <Element key={index} value={value} color=\"green\" />\r\n\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\nconst InsertionSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array, setArray] = useState([]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const sortedEndIndex = useRef(-1);\r\n    const currentInserting = useRef(-1);\r\n    const currentCompare = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n    const generateArrayButton = useRef();\r\n    const arraySizeInput = useRef();\r\n    const speedSlider = useRef();\r\n\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //initializes a random array for sorting\r\n    const generateArray = () => {\r\n        if (sorting.current) {\r\n            toggleSorting();\r\n        }\r\n        const size = parseInt(arraySizeInput.current.value);\r\n        if (!isNaN(size) && size > 0) {\r\n            setArray(randomArray(size));\r\n            setSorted(false);\r\n            sortedEndIndex.current = -1;\r\n            currentInserting.current = -1;\r\n            currentCompare.current = -1;\r\n        }\r\n        arraySizeInput.current.value = null;\r\n    }\r\n    const randomArray = useCallback((size) => {\r\n        var newArray = new Array(size);\r\n            for (let i = 0; i < size; i++) {\r\n                newArray[i] = randInt(-999, 1000);\r\n            }\r\n        return newArray;\r\n    }, []);\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setArray(randomArray(randInt(3,20)));\r\n    }, [randomArray]);\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        \r\n        if (sortedEndIndex.current >= array.length) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n            currentCompare.current = -1;\r\n            currentInserting.current = -1;\r\n        }\r\n        //if found lower element, insert current after that, restart process\r\n        else if (array[currentCompare.current] < array[currentInserting.current]) {\r\n            let temp = array[currentInserting.current];\r\n            for (let i = currentInserting.current - 1; i > currentCompare.current; i--) {\r\n                array[i + 1] = array[i];\r\n            }\r\n            array[currentCompare.current + 1] = temp;\r\n            currentInserting.current++;\r\n            currentCompare.current = currentInserting.current;\r\n            sortedEndIndex.current++;\r\n        }\r\n        //if at end of sorted and none lower found, insert at beginning, restart process\r\n        else if (currentCompare.current === 0) {\r\n            let temp = array[currentInserting.current];\r\n            for (let i = currentInserting.current - 1; i >= currentCompare.current; i--) {\r\n                array[i + 1] = array[i];\r\n            }\r\n            array[currentCompare.current] = temp;\r\n            currentInserting.current++;\r\n            currentCompare.current = currentInserting.current;\r\n            sortedEndIndex.current++;\r\n        }\r\n        else if (currentInserting.current === -1) {\r\n            currentInserting.current++;\r\n            sortedEndIndex.current = 1;\r\n            currentCompare.current = currentInserting.current;\r\n        }\r\n        else {\r\n            currentCompare.current--;\r\n        }\r\n\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Sort\";\r\n            toggleSortingButton.current.classList.remove(\"pinkButton\");\r\n            toggleSortingButton.current.classList.add(\"greenButton\");\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n            toggleSortingButton.current.classList.remove(\"greenButton\");\r\n            toggleSortingButton.current.classList.add(\"pinkButton\");\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of sorting when the slider changes\r\n    const updateSpeed = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000 - speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"insertion-sort\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"generateArrayButton\" ref={generateArrayButton} onClick={generateArray}>Random</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Array Size</label>\r\n                        <input id=\"arraySizeInput\" ref={arraySizeInput} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"toggleSortingButton\" className=\"greenButton\" ref={toggleSortingButton} onClick={toggleSorting}>Sort</button>\r\n                    <br />\r\n                    <span className=\"labeledSlider\">\r\n                        <label>Animation Speed</label>\r\n                        <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <InsertionSortDisplay array={array} sortedEndIndex={sortedEndIndex.current} currentInserting={currentInserting.current} currentCompare={currentCompare.current} />\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Sorted</p>\r\n                < br />\r\n                <Element></Element>\r\n                <p>= Unsorted</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Current Element to be Inserted</p>\r\n                <br />\r\n                <Element color=\"green\" border=\"bordered\"></Element>\r\n                <p>= Current Focus</p>\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default InsertionSort;"]},"metadata":{},"sourceType":"module"}