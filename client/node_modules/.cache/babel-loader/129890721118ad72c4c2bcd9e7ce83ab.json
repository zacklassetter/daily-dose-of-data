{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinaryTree\\\\BinaryTreeDisplay.js\";\nimport React from 'react';\nimport './BinaryTreeDisplay.scss';\nimport Element from '../Element/Element'; //react component for a single level in a binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BinaryTreeLevel = props => {\n  return props.list.map((node, index) => {\n    if (node === null) return /*#__PURE__*/_jsxDEV(Element, {\n      value: \"\",\n      color: \"none\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 20\n    }, this);else if (node === props.border) return /*#__PURE__*/_jsxDEV(Element, {\n      value: node.value,\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 20\n    }, this);else if (node === props.green) return /*#__PURE__*/_jsxDEV(Element, {\n      value: node.value,\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 20\n    }, this);else return /*#__PURE__*/_jsxDEV(Element, {\n      value: node.value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 20\n    }, this);\n  });\n}; //react component for lines between binary tree nodes\n\n\n_c = BinaryTreeLevel;\n\nconst BinaryTreeLineLevel = props => {\n  var lines = [];\n\n  for (let i = 0; i < props.list.length; i++) {\n    if (props.list[i] === null) lines.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-none\"\n    }, lines.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 24\n    }, this));else if (i % 2 === 0) lines.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-left\"\n    }, lines.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 24\n    }, this));else lines.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-right\"\n    }, lines.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 24\n    }, this));\n  }\n\n  return lines;\n}; //react component to display the tree\n\n\n_c2 = BinaryTreeLineLevel;\n\nconst BinaryTreeDisplay = props => {\n  var levelComponents = [];\n  var nextQueue = [];\n  if (props.tree !== null) nextQueue.push(props.tree.root);\n  var currQueue = [];\n\n  while (true) {\n    //continue breadth-first traversal creating BinaryTreeLevel component every iteration\n    currQueue = nextQueue;\n    nextQueue = [];\n\n    for (let i = 0; i < currQueue.length; i++) {\n      //use null as placeholder empty nodes in a level\n      if (currQueue[i] === null) {\n        nextQueue.push(null);\n        nextQueue.push(null);\n      } else {\n        nextQueue.push(currQueue[i].left);\n        nextQueue.push(currQueue[i].right);\n      }\n    } //add a level of nodes\n\n\n    levelComponents.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-level\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeLevel, {\n        list: currQueue,\n        border: props.border,\n        green: props.green\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, levelComponents.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)); //break loop if entire level is null\n\n    var allNull = true;\n\n    for (let i = 0; i < nextQueue.length; i++) {\n      if (nextQueue[i] !== null) {\n        allNull = false;\n      }\n    }\n\n    if (allNull) {\n      break;\n    } //add a level of lines to the next level\n\n\n    levelComponents.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-level\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeLineLevel, {\n        list: nextQueue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, levelComponents.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this));\n  }\n\n  return levelComponents;\n};\n\n_c3 = BinaryTreeDisplay;\nexport default BinaryTreeDisplay;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"BinaryTreeLevel\");\n$RefreshReg$(_c2, \"BinaryTreeLineLevel\");\n$RefreshReg$(_c3, \"BinaryTreeDisplay\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinaryTree/BinaryTreeDisplay.js"],"names":["React","Element","BinaryTreeLevel","props","list","map","node","index","border","value","green","BinaryTreeLineLevel","lines","i","length","push","BinaryTreeDisplay","levelComponents","nextQueue","tree","root","currQueue","left","right","allNull"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './BinaryTreeDisplay.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\n//react component for a single level in a binary tree\r\nconst BinaryTreeLevel = (props) => {\r\n    return props.list.map((node, index) => {\r\n        if (node === null)\r\n            return <Element key={index} value={\"\"} color={\"none\"} />;\r\n        else if (node === props.border)\r\n            return <Element key={index} value={node.value} border=\"bordered\" />;\r\n        else if (node === props.green)\r\n            return <Element key={index} value={node.value} color=\"green\" />;\r\n        else\r\n            return <Element key={index} value={node.value} />;\r\n    });\r\n}\r\n\r\n//react component for lines between binary tree nodes\r\nconst BinaryTreeLineLevel = (props) => {\r\n    var lines = [];\r\n    for (let i = 0; i < props.list.length; i++) {\r\n        if (props.list[i] === null)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-none\"></div>);\r\n        else if (i % 2 === 0)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-left\"></div>);\r\n        else\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-right\"></div>);\r\n        \r\n    }\r\n    return lines;\r\n}\r\n\r\n//react component to display the tree\r\nconst BinaryTreeDisplay = (props) => {\r\n    var levelComponents = [];\r\n    var nextQueue = [];\r\n    if (props.tree !== null)\r\n        nextQueue.push(props.tree.root);\r\n    var currQueue = [];\r\n    while (true) {\r\n        //continue breadth-first traversal creating BinaryTreeLevel component every iteration\r\n        currQueue = nextQueue;\r\n        nextQueue = [];\r\n        for (let i = 0; i < currQueue.length; i++) {\r\n            //use null as placeholder empty nodes in a level\r\n            if (currQueue[i] === null) {\r\n                nextQueue.push(null);\r\n                nextQueue.push(null);\r\n            } else {\r\n                nextQueue.push(currQueue[i].left);\r\n                nextQueue.push(currQueue[i].right);\r\n            }\r\n        }\r\n        //add a level of nodes\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-level\">\r\n                <BinaryTreeLevel list={currQueue} border={props.border} green={props.green} />\r\n            </div>\r\n        );\r\n        //break loop if entire level is null\r\n        var allNull = true;\r\n        for (let i = 0; i < nextQueue.length; i++) {\r\n            if (nextQueue[i] !== null) {\r\n                allNull = false;\r\n            }\r\n        }\r\n        if (allNull) {\r\n            break;\r\n        }\r\n        //add a level of lines to the next level\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-line-level\">\r\n                <BinaryTreeLineLevel list={nextQueue} />\r\n            </div>\r\n        );\r\n    }\r\n    return levelComponents;\r\n}\r\n\r\nexport default BinaryTreeDisplay;"]},"metadata":{},"sourceType":"module"}