{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\BinaryTree\\\\BinaryTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './BinaryTree.scss';\nimport Element from '../Element/Element'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary tree data structure\n\n\nclass BinaryTreeClass {\n  constructor(root) {\n    this.root = root;\n  }\n\n} //react component for a single level in a binary tree\n\n\nconst BinaryTreeLevel = props => {\n  return props.list.map((node, index) => {\n    if (node === null) return /*#__PURE__*/_jsxDEV(Element, {\n      value: \"\",\n      color: \"none\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 20\n    }, this);else return /*#__PURE__*/_jsxDEV(Element, {\n      value: node.value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 20\n    }, this);\n  });\n}; //react component for lines between binary tree nodes\n\n\n_c = BinaryTreeLevel;\n\nconst BinaryTreeLineLevel = props => {\n  var lines = [];\n\n  for (let i = 0; i < props.list.length; i++) {\n    if (props.list[i] === null) lines.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-none\"\n    }, lines.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 24\n    }, this));else if (i % 2 === 0) lines.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-left\"\n    }, lines.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 24\n    }, this));else lines.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-right\"\n    }, lines.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 24\n    }, this));\n  }\n\n  return lines;\n}; //react component to display the tree\n\n\n_c2 = BinaryTreeLineLevel;\n\nconst BinaryTreeDisplay = props => {\n  var levelComponents = [];\n  var nextQueue = [];\n  if (props.tree !== null) nextQueue.push(props.tree.root);\n  var currQueue = [];\n\n  while (true) {\n    //continue breadth-first traversal creating BinaryTreeLevel component every iteration\n    currQueue = nextQueue;\n    nextQueue = [];\n\n    for (let i = 0; i < currQueue.length; i++) {\n      //use null as placeholder empty nodes in a level\n      if (currQueue[i] === null) {\n        nextQueue.push(null);\n        nextQueue.push(null);\n      } else {\n        nextQueue.push(currQueue[i].left);\n        nextQueue.push(currQueue[i].right);\n      }\n    } //add a level of nodes\n\n\n    levelComponents.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-level\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeLevel, {\n        list: currQueue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, levelComponents.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)); //break loop if entire level is null\n\n    var allNull = true;\n\n    for (let i = 0; i < nextQueue.length; i++) {\n      if (nextQueue[i] !== null) {\n        allNull = false;\n      }\n    }\n\n    if (allNull) {\n      break;\n    } //add a level of lines to the next level\n\n\n    levelComponents.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"binary-tree-line-level\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeLineLevel, {\n        list: nextQueue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, levelComponents.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this));\n  }\n\n  return levelComponents;\n};\n\n_c3 = BinaryTreeDisplay;\nvar exampleTree = new BinaryTreeClass(new BinaryTreeNode(10));\nexampleTree.root.left = new BinaryTreeNode(7);\nexampleTree.root.right = new BinaryTreeNode(-3);\nexampleTree.root.left.left = new BinaryTreeNode(13);\nexampleTree.root.left.right = new BinaryTreeNode(27);\nexampleTree.root.right.left = new BinaryTreeNode(-42);\nexampleTree.root.right.right = new BinaryTreeNode(0);\nexampleTree.root.right.left.right = new BinaryTreeNode(18);\nexampleTree.root.left.right.right = new BinaryTreeNode(-36);\nexampleTree.root.left.right.left = new BinaryTreeNode(2);\nexampleTree.root.left.left.left = new BinaryTreeNode(-5);\nexampleTree.root.right.right.right = new BinaryTreeNode(-17); //main react component for binary tree\n\nconst BinaryTree = () => {\n  _s();\n\n  const [tree, setTree] = useState(exampleTree); //function to generate random tree\n\n  const randomTree = () => {\n    var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999, 1000)));\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: randomTree,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryTree, \"Pdi0AsYDahvJvGp8a+XIUFtCxtQ=\");\n\n_c4 = BinaryTree;\nexport default BinaryTree;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"BinaryTreeLevel\");\n$RefreshReg$(_c2, \"BinaryTreeLineLevel\");\n$RefreshReg$(_c3, \"BinaryTreeDisplay\");\n$RefreshReg$(_c4, \"BinaryTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/BinaryTree/BinaryTree.js"],"names":["React","useState","Element","BinaryTreeNode","constructor","value","left","right","BinaryTreeClass","root","BinaryTreeLevel","props","list","map","node","index","BinaryTreeLineLevel","lines","i","length","push","BinaryTreeDisplay","levelComponents","nextQueue","tree","currQueue","allNull","exampleTree","BinaryTree","setTree","randomTree","newTree","randInt","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './BinaryTree.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nclass BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//react component for a single level in a binary tree\r\nconst BinaryTreeLevel = (props) => {\r\n    return props.list.map((node, index) => {\r\n        if (node === null)\r\n            return <Element key={index} value={\"\"} color={\"none\"} />;\r\n        else\r\n            return <Element key={index} value={node.value} />;\r\n    });\r\n}\r\n\r\n//react component for lines between binary tree nodes\r\nconst BinaryTreeLineLevel = (props) => {\r\n    var lines = [];\r\n    for (let i = 0; i < props.list.length; i++) {\r\n        if (props.list[i] === null)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-none\"></div>);\r\n        else if (i % 2 === 0)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-left\"></div>);\r\n        else\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-right\"></div>);\r\n        \r\n    }\r\n    return lines;\r\n}\r\n\r\n//react component to display the tree\r\nconst BinaryTreeDisplay = (props) => {\r\n    var levelComponents = [];\r\n    var nextQueue = [];\r\n    if (props.tree !== null)\r\n        nextQueue.push(props.tree.root);\r\n    var currQueue = [];\r\n    while (true) {\r\n        //continue breadth-first traversal creating BinaryTreeLevel component every iteration\r\n        currQueue = nextQueue;\r\n        nextQueue = [];\r\n        for (let i = 0; i < currQueue.length; i++) {\r\n            //use null as placeholder empty nodes in a level\r\n            if (currQueue[i] === null) {\r\n                nextQueue.push(null);\r\n                nextQueue.push(null);\r\n            } else {\r\n                nextQueue.push(currQueue[i].left);\r\n                nextQueue.push(currQueue[i].right);\r\n            }\r\n        }\r\n        //add a level of nodes\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-level\">\r\n                <BinaryTreeLevel list={currQueue} />\r\n            </div>\r\n        );\r\n        //break loop if entire level is null\r\n        var allNull = true;\r\n        for (let i = 0; i < nextQueue.length; i++) {\r\n            if (nextQueue[i] !== null) {\r\n                allNull = false;\r\n            }\r\n        }\r\n        if (allNull) {\r\n            break;\r\n        }\r\n        //add a level of lines to the next level\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-line-level\">\r\n                <BinaryTreeLineLevel list={nextQueue} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return levelComponents;\r\n}\r\n\r\nvar exampleTree = new BinaryTreeClass(new BinaryTreeNode(10));\r\nexampleTree.root.left = new BinaryTreeNode(7);\r\nexampleTree.root.right = new BinaryTreeNode(-3);\r\nexampleTree.root.left.left = new BinaryTreeNode(13);\r\nexampleTree.root.left.right = new BinaryTreeNode(27);\r\nexampleTree.root.right.left = new BinaryTreeNode(-42);\r\nexampleTree.root.right.right = new BinaryTreeNode(0);\r\nexampleTree.root.right.left.right = new BinaryTreeNode(18);\r\nexampleTree.root.left.right.right = new BinaryTreeNode(-36);\r\nexampleTree.root.left.right.left = new BinaryTreeNode(2);\r\nexampleTree.root.left.left.left = new BinaryTreeNode(-5);\r\nexampleTree.root.right.right.right = new BinaryTreeNode(-17);\r\n\r\n//main react component for binary tree\r\nconst BinaryTree = () => {\r\n\r\n    const [tree, setTree] = useState(exampleTree);\r\n\r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-tree\">\r\n            <div className=\"controls\">\r\n                <button onClick={randomTree}>Random</button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}