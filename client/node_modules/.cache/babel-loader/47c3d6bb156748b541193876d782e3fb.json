{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\List\\\\List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './List.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListDisplay = props => {\n  return props.list.map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labeledElement\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        value: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this);\n  });\n}; //main react component for list\n\n\n_c = ListDisplay;\n\nconst List = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [list, setList] = useState([]);\n  const insertIndex = useRef();\n  const insertValue = useRef();\n  const removeIndex = useRef();\n  const listOutput = useRef();\n  const getIndex = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  };\n\n  const randomList = () => {\n    var newList = [];\n    setList(newList);\n  };\n\n  const insert = () => {\n    const index = parseInt(insertIndex.current.value);\n    const value = parseInt(insertValue.current.value);\n\n    if (!isNaN(index) && !isNaN(value) && index >= 0 && index <= list.length) {\n      list.splice(index, 0, value);\n      forceUpdate();\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    insertIndex.current.value = null;\n    insertValue.current.value = null;\n  };\n\n  const remove = () => {\n    const index = parseInt(removeIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < list.length) {\n      const data = list.splice(index, 1);\n      forceUpdate();\n      listOutput.current.value = data;\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    removeIndex.current.value = null;\n  };\n\n  const get = () => {\n    const index = parseInt(getIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < list.length) {\n      const data = list[index];\n      listOutput.current.value = data;\n    } else {\n      listOutput.current.value = \"Invalid\";\n    }\n\n    getIndex.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomList,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertIndex\",\n          ref: insertIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"insertValue\",\n          ref: insertValue,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"removeIndex\",\n          ref: removeIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"listOutput\",\n        type: \"text\",\n        ref: listOutput,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getButton\",\n        onClick: get,\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"getIndex\",\n          ref: getIndex,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(ListDisplay, {\n        list: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(List, \"mXdCLY3kWzUiELPn7N/6TQb8RxI=\");\n\n_c2 = List;\nexport default List;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ListDisplay\");\n$RefreshReg$(_c2, \"List\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/List/List.js"],"names":["React","useState","useRef","Element","ListDisplay","props","list","map","value","index","List","forceRender","setList","insertIndex","insertValue","removeIndex","listOutput","getIndex","forceUpdate","renders","randomList","newList","insert","parseInt","current","isNaN","length","splice","remove","data","get"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './List.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst ListDisplay = (props) => {\r\n    return props.list.map((value, index) => {\r\n        return (\r\n            <div className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element key={index} value={value}></Element>\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\n//main react component for list\r\nconst List = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [list, setList] = useState([]);\r\n    const insertIndex = useRef();\r\n    const insertValue = useRef();\r\n    const removeIndex = useRef();\r\n    const listOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    const randomList = () => {\r\n        var newList = [];\r\n        setList(newList);\r\n    }\r\n\r\n    const insert = () => {\r\n        const index = parseInt(insertIndex.current.value);\r\n        const value = parseInt(insertValue.current.value);\r\n        if (!isNaN(index) && !isNaN(value) && index >= 0 && index <= list.length) {\r\n            list.splice(index, 0, value);\r\n            forceUpdate();\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        insertIndex.current.value = null;\r\n        insertValue.current.value = null;\r\n    }\r\n\r\n    const remove = () => {\r\n        const index = parseInt(removeIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < list.length) {\r\n            const data = list.splice(index, 1);\r\n            forceUpdate();\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        removeIndex.current.value = null;\r\n    }\r\n\r\n    const get = () => {\r\n        const index = parseInt(getIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < list.length) {\r\n            const data = list[index];\r\n            listOutput.current.value = data;\r\n        } else {\r\n            listOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"list\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomList}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"insertIndex\" ref={insertIndex} type=\"text\"></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"insertValue\" ref={insertValue} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"removeIndex\" ref={removeIndex} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <input id=\"listOutput\" type=\"text\" ref={listOutput} readOnly></input>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"getIndex\" ref={getIndex} type=\"text\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <ListDisplay list={list} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;"]},"metadata":{},"sourceType":"module"}