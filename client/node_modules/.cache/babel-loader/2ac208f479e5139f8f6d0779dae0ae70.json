{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\Stack\\\\Stack.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Stack.scss';\nimport Element from '../Element/Element'; //returns a list of react element components from the stack component array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StackDisplay = props => {\n  return props.stack.map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 10\n    }, this);\n  });\n}; //main react component for stack\n\n\n_c = StackDisplay;\n\nconst Stack = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [stack] = useState([]);\n  const randomSize = useRef();\n  const stackInput = useRef();\n  const stackOutput = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets list to a randomly generated list\n\n\n  const randomList = () => {\n    var size = randomSize.current.value;\n\n    if (size === \"\") {\n      size = randInt(10, 60);\n    }\n\n    if (!isNaN(parseInt(size)) && size > 0) {\n      var newList = [];\n\n      for (let i = 0; i < size; i++) newList.push(randInt(-999, 1000));\n\n      setList(newList);\n    }\n\n    randomSize.current.value = null;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize list to random list\n\n\n  useEffect(randomList, []);\n\n  const push = () => {\n    const data = parseInt(stackInput.current.value);\n\n    if (!isNaN(data)) {\n      stack.push(data);\n      forceUpdate();\n    }\n\n    stackInput.current.value = null;\n  };\n\n  const pop = () => {\n    const data = stack.pop();\n    forceUpdate();\n    if (data === undefined) stackOutput.current.value = \"None\";else stackOutput.current.value = data;\n  };\n\n  const peek = () => {\n    const data = stack[stack.length - 1];\n    if (data === undefined) stackOutput.current.value = \"None\";else stackOutput.current.value = data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stack\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomList,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomSizeInput\",\n          ref: randomSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"pushButton\",\n        onClick: push,\n        children: \"Push\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stackInput\",\n        ref: stackInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"popButton\",\n        onClick: pop,\n        children: \"Pop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"stackOutput\",\n        ref: stackOutput,\n        type: \"text\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"peekButton\",\n        onClick: peek,\n        children: \"Peek\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: [/*#__PURE__*/_jsxDEV(StackDisplay, {\n        stack: stack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stackTop\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2190 Push\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2192 Pop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Stack, \"ESo50sbEYivf4+a0wyAhz5Q6f/4=\");\n\n_c2 = Stack;\nexport default Stack;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StackDisplay\");\n$RefreshReg$(_c2, \"Stack\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/Stack/Stack.js"],"names":["React","useState","useRef","useEffect","Element","StackDisplay","props","stack","map","value","index","Stack","forceRender","randomSize","stackInput","stackOutput","forceUpdate","renders","randomList","size","current","randInt","isNaN","parseInt","newList","i","push","setList","min","max","Math","floor","random","data","pop","undefined","peek","length"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Stack.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//returns a list of react element components from the stack component array\r\nconst StackDisplay = (props) => {\r\n\treturn props.stack.map((value, index) => {\r\n\t\treturn <Element key={index} value={value} />\r\n\t});\r\n}\r\n\r\n//main react component for stack\r\nconst Stack = () => {\r\n\t\r\n\tconst [, forceRender] = useState(0);\r\n\tconst [stack,] = useState([]);\r\n\tconst randomSize = useRef();\r\n\tconst stackInput = useRef();\r\n\tconst stackOutput = useRef();\r\n\t\r\n\t//We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n\t//sets list to a randomly generated list\r\n    const randomList = () => {\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(10, 60);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newList = [];\r\n            for (let i = 0; i < size; i++)\r\n                newList.push(randInt(-999,1000));\r\n            setList(newList);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize list to random list\r\n    useEffect(randomList, []);\r\n\t\r\n\tconst push = () => {\r\n\t\tconst data = parseInt(stackInput.current.value);\r\n\t\tif (!isNaN(data)) {\r\n\t\t\tstack.push(data);\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t\tstackInput.current.value = null;\r\n\t}\r\n\t\r\n\tconst pop = () => {\r\n\t\tconst data = stack.pop();\r\n\t\tforceUpdate();\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\tconst peek = () => {\r\n\t\tconst data = stack[stack.length-1];\r\n\t\tif (data === undefined)\r\n\t\t\tstackOutput.current.value = \"None\";\r\n\t\telse\r\n\t\t\tstackOutput.current.value = data;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"stack\">\r\n\t\t\t<div className=\"controls\">\r\n\t\t\t\t<button id=\"randomButton\" onClick={randomList}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n\t\t\t\t<button id=\"pushButton\" onClick={push}>Push</button>\r\n\t\t\t\t<input id=\"stackInput\" ref={stackInput} type=\"text\" />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"popButton\" onClick={pop}>Pop</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<input id=\"stackOutput\" ref={stackOutput} type=\"text\" readOnly />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button id=\"peekButton\" onClick={peek}>Peek</button>\r\n\t\t\t\t<br />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"visualization\">\r\n\t\t\t\t<StackDisplay stack={stack} />\r\n\t\t\t\t<div id=\"stackTop\">\r\n\t\t\t\t\t<p>&#x2190; Push</p>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<p>&#x2192; Pop</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Stack;"]},"metadata":{},"sourceType":"module"}