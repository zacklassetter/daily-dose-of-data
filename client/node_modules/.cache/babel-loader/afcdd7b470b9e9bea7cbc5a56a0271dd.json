{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinaryHeap\\\\BinaryHeap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './BinaryHeap.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary tree data structure\n\n\nclass BinaryTreeClass {\n  constructor(root) {\n    this.root = root;\n  }\n\n} //class for binary heap data structure\n\n\nclass BinaryHeapClass {\n  constructor() {\n    this.heap = [];\n  }\n\n  insert(value) {\n    this.heap.push(value);\n    this.refactor();\n  }\n\n  remove() {}\n\n  refactor() {}\n\n  getTree() {\n    console.log(this.heap);\n    var tree = new BinaryTreeClass(null);\n\n    if (this.heap.length !== 0) {\n      tree.root = new BinaryTreeNode(this.heap[0]);\n    }\n\n    return tree;\n  }\n\n} //main react component for binary heap visualization\n\n\nconst BinaryHeap = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [heap, setHeap] = useState(new BinaryHeapClass());\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const speedSlider = useRef();\n  const interval = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to create a random heap\n\n\n  const randomHeap = () => {};\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the tree to a random binary heap\n\n\n  useEffect(randomHeap, []); //function to insert a value into the heap\n\n  const insert = () => {\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    heap.insert(data);\n    forceUpdate();\n    insertInput.current.value = null;\n  }; //function to remove a value from the heap\n\n\n  const remove = () => {}; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    clearInterval(interval.current);\n    interval.current = setInterval(() => {\n      forceUpdate();\n    }, 1000 - speedSlider.current.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-heap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomHeap,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: heap.getTree()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryHeap, \"twiVDI5jJ+/qsUcSVlQAxDjIbyQ=\");\n\n_c = BinaryHeap;\nexport default BinaryHeap;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryHeap\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinaryHeap/BinaryHeap.js"],"names":["React","useState","useRef","useEffect","BinaryTreeDisplay","BinaryTreeNode","constructor","value","left","right","BinaryTreeClass","root","BinaryHeapClass","heap","insert","push","refactor","remove","getTree","console","log","tree","length","BinaryHeap","forceRender","setHeap","insertInput","removeInput","speedSlider","interval","forceUpdate","renders","randomHeap","randInt","min","max","Math","floor","random","data","parseInt","current","isNaN","updateSpeed","clearInterval","setInterval"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './BinaryHeap.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nclass BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//class for binary heap data structure\r\nclass BinaryHeapClass {\r\n    constructor() {\r\n        this.heap = [];\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        this.refactor();\r\n    }\r\n\r\n    remove() {\r\n\r\n    }\r\n\r\n    refactor() {\r\n\r\n    }\r\n\r\n    getTree() {\r\n        console.log(this.heap);\r\n        var tree = new BinaryTreeClass(null);\r\n        if (this.heap.length !== 0) {\r\n            tree.root = new BinaryTreeNode(this.heap[0]);\r\n        }\r\n        return tree;\r\n    }\r\n}\r\n\r\n//main react component for binary heap visualization\r\nconst BinaryHeap = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [heap, setHeap] = useState(new BinaryHeapClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const speedSlider = useRef();\r\n    const interval = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random heap\r\n    const randomHeap = () => {\r\n\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the tree to a random binary heap\r\n    useEffect(randomHeap, []);\r\n\r\n    //function to insert a value into the heap\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        heap.insert(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove a value from the heap\r\n    const remove = () => {\r\n\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        clearInterval(interval.current);\r\n        interval.current = setInterval(() => {\r\n            \r\n            forceUpdate();\r\n        }, 1000 - speedSlider.current.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-heap\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomHeap}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={heap.getTree()} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BinaryHeap;"]},"metadata":{},"sourceType":"module"}