{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\InsertionSort\\\\InsertionSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './InsertionSort.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InsertionSortDisplay = props => {\n  return props.array.map((value, index) => {\n    if (index === props.currentCompare && index === props.currentFocus) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"pink\",\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentCompare) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\",\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 20\n    }, this);\n    if (index < props.sortedEndIndex) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentFocus) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"pink\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 20\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 16\n    }, this);\n  });\n};\n\n_c = InsertionSortDisplay;\n\nconst InsertionSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [array] = useState([3, 1, 2, -3, 0, 22, 5, 1, -8, 9]);\n  const sorting = useRef(false);\n  const interval = useRef(null);\n  const sortedEndIndex = useRef(-1);\n  const currentFocus = useRef(-1);\n  const currentCompare = useRef(-1);\n  const toggleSortingButton = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //completes one step of the sorting algorithm\n\n\n  const sortingStep = () => {\n    if (sortedEndIndex.current === array.length) {\n      currentCompare.current = -1;\n      currentFocus.current = -1;\n      return;\n    }\n\n    if (array[currentCompare.current] < array[currentFocus.current]) {\n      let temp = array[currentFocus.current];\n\n      for (let i = currentFocus.current - 1; i > currentCompare.current; i--) {\n        array[i + 1] = array[i];\n      }\n\n      array[currentCompare.current + 1] = temp;\n      currentFocus.current++;\n      currentCompare.current = currentFocus.current + 1;\n      sortedEndIndex.current++;\n    }\n\n    if (currentCompare.current === 0) {\n      if (array[currentCompare.current] > array[currentFocus.current]) {\n        let temp = array[currentFocus.current];\n\n        for (let i = currentFocus.current - 1; i >= currentCompare.current; i--) {\n          array[i + 1] = array[i];\n        }\n\n        array[currentCompare.current] = temp;\n        currentFocus.current++;\n        currentCompare.current = currentFocus.current + 1;\n        sortedEndIndex.current++;\n      } else {\n        currentFocus.current++;\n        currentCompare.current = currentFocus.current;\n      }\n    }\n\n    if (currentFocus.current === -1) {\n      currentFocus.current++;\n      sortedEndIndex.current = 1;\n      currentCompare.current = currentFocus.current;\n    } else currentCompare.current--;\n  }; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Start\";\n    } else {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 1000);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insertion-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        ref: toggleSortingButton,\n        onClick: toggleSorting,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(InsertionSortDisplay, {\n        array: array,\n        sortedEndIndex: sortedEndIndex.current,\n        currentFocus: currentFocus.current,\n        currentCompare: currentCompare.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InsertionSort, \"cAtKJu6Gb75l2bB+kaqvj0wq/YM=\");\n\n_c2 = InsertionSort;\nexport default InsertionSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InsertionSortDisplay\");\n$RefreshReg$(_c2, \"InsertionSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/InsertionSort/InsertionSort.js"],"names":["React","useState","useRef","Element","InsertionSortDisplay","props","array","map","value","index","currentCompare","currentFocus","sortedEndIndex","InsertionSort","forceRender","sorting","interval","toggleSortingButton","forceUpdate","renders","sortingStep","current","length","temp","i","toggleSorting","clearInterval","innerHTML","setInterval"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './InsertionSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\nconst InsertionSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index === props.currentCompare && index === props.currentFocus)\r\n            return <Element key={index} value={value} color=\"pink\" border=\"bordered\" />\r\n\r\n        if (index === props.currentCompare)\r\n            return <Element key={index} value={value} color=\"green\" border=\"bordered\" />\r\n\r\n        \r\n        if (index < props.sortedEndIndex)\r\n            return <Element key={index} value={value} color=\"green\" />\r\n\r\n\r\n        if (index === props.currentFocus)\r\n            return <Element key={index} value={value} color=\"pink\" />\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\nconst InsertionSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array,] = useState([3, 1, 2, -3, 0, 22, 5, 1, -8, 9]);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const sortedEndIndex = useRef(-1);\r\n    const currentFocus = useRef(-1);\r\n    const currentCompare = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n\r\n\r\n    //We call update on fake state variable to force rerender\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        \r\n        if (sortedEndIndex.current === array.length) {\r\n            currentCompare.current = -1;\r\n            currentFocus.current = -1;\r\n            return;\r\n        }\r\n        if (array[currentCompare.current] < array[currentFocus.current]) {\r\n            let temp = array[currentFocus.current];\r\n            for (let i = currentFocus.current - 1; i > currentCompare.current; i--) {\r\n                array[i + 1] = array[i];\r\n            }\r\n            array[currentCompare.current + 1] = temp;\r\n            currentFocus.current++;\r\n            currentCompare.current = currentFocus.current + 1;\r\n            sortedEndIndex.current++;\r\n\r\n        }\r\n        if (currentCompare.current === 0) {\r\n            if (array[currentCompare.current] > array[currentFocus.current]) {\r\n                let temp = array[currentFocus.current];\r\n                for (let i = currentFocus.current - 1; i >= currentCompare.current; i--) {\r\n                    array[i + 1] = array[i];\r\n                }\r\n                array[currentCompare.current] = temp;\r\n                currentFocus.current++;\r\n                currentCompare.current = currentFocus.current + 1;\r\n                sortedEndIndex.current++;\r\n            }\r\n            else {\r\n                currentFocus.current++;\r\n                currentCompare.current = currentFocus.current;\r\n            }\r\n        }\r\n\r\n        if (currentFocus.current === -1) {\r\n            currentFocus.current++;\r\n            sortedEndIndex.current = 1;\r\n            currentCompare.current = currentFocus.current;\r\n        }\r\n        else currentCompare.current--;\r\n\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Start\";\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 1000);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"insertion-sort\">\r\n            <div className=\"controls\">\r\n                <button ref={toggleSortingButton} onClick={toggleSorting}>Start</button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <InsertionSortDisplay array={array} sortedEndIndex={sortedEndIndex.current} currentFocus={currentFocus.current} currentCompare={currentCompare.current} />\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default InsertionSort;"]},"metadata":{},"sourceType":"module"}