{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\BinarySearchTree\\\\BinarySearchTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './BinarySearchTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary search tree\n\n\nclass BinarySearchTreeClass {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(value) {\n    var current = this.root;\n    var parent = null;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n  }\n\n  delete(value) {}\n\n  find(value) {}\n\n} //react component for binary search tree\n\n\nconst BinarySearchTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree] = useState(new BinarySearchTreeClass());\n  const insertInput = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {};\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize the tree to a random BST\n\n\n  useEffect(randomTree, []); //function to insert into the binary search tree on button click\n\n  const insert = () => {\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    tree.insert(data);\n    forceUpdate();\n    insertInput.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinarySearchTree, \"H/o5oyah0Lv7QtRnOgipuzqyAYA=\");\n\n_c = BinarySearchTree;\nexport default BinarySearchTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinarySearchTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/BinarySearchTree/BinarySearchTree.js"],"names":["React","useState","useRef","useEffect","BinaryTreeDisplay","BinaryTreeNode","constructor","value","left","right","BinarySearchTreeClass","root","insert","current","parent","delete","find","BinarySearchTree","forceRender","tree","insertInput","forceUpdate","renders","randomTree","randInt","min","max","Math","floor","random","data","parseInt","isNaN"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './BinarySearchTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary search tree\r\nclass BinarySearchTreeClass {\r\n    constructor(){\r\n        this.root = null;\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n    }\r\n\r\n    delete(value) {\r\n\r\n    }\r\n\r\n    find (value) {\r\n\r\n    }\r\n}\r\n\r\n//react component for binary search tree\r\nconst BinarySearchTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, ] = useState(new BinarySearchTreeClass());\r\n    const insertInput = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, []);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        var data = parseInt(insertInput.current.value);\r\n        if(isNaN(data))\r\n            data = randInt(-999,1000);\r\n        tree.insert(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\">Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinarySearchTree;"]},"metadata":{},"sourceType":"module"}