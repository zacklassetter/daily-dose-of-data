{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\BinarySearchTree\\\\BinarySearchTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './BinarySearchTree.scss';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary search tree\n\n\nclass BinarySearchTreeClass {\n  constructor() {\n    this.root = null;\n    this.height = 0;\n  }\n\n  insert(value) {\n    var current = this.root;\n    var parent = null;\n    var height = 1;\n\n    while (current != null) {\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n        height++;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n        height++;\n      } else return;\n    }\n\n    if (parent === null) this.root = new BinaryTreeNode(value);else if (value < parent.value) parent.left = new BinaryTreeNode(value);else parent.right = new BinaryTreeNode(value);\n    if (height > this.height) this.height = height;\n  }\n\n  remove(value) {\n    var current = this.root;\n    var parent = null; //find a node equal to value else exit function\n\n    while (true) {\n      if (current === null) return;\n\n      if (value < current.value) {\n        parent = current;\n        current = current.left;\n      } else if (value > current.value) {\n        parent = current;\n        current = current.right;\n      } else break;\n    } //if node has no children set parent child to null\n\n\n    if (current.left === null && current.right === null) {\n      if (parent === null) this.root = null;else if (value < parent.value) parent.left = null;else parent.right = null;\n    } //if node has 1 child set parent child to current child\n    else if (current.right === null) {\n        if (parent === null) this.root = current.left;else if (value < parent.value) parent.left = current.left;else parent.right = current.left;\n      } else if (current.left === null) {\n        if (parent === null) this.root = current.right;else if (value < parent.value) parent.left = current.right;else parent.right = current.right;\n      } //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\n      else {\n          //find the leftmost child of right subtree of current, set current to that value\n          var leftmostChild = current.right;\n          parent = current;\n\n          while (leftmostChild.left !== null) {\n            parent = leftmostChild;\n            leftmostChild = leftmostChild.left;\n          }\n\n          current.value = leftmostChild.value; //delete the leftmost child of right subtree\n\n          current = leftmostChild;\n\n          if (current.left === null && current.right === null) {\n            if (current.value < parent.value) parent.left = null;else parent.right = null;\n          } else if (current.right === null) {\n            if (current.value < parent.value) parent.left = current.left;else parent.right = current.left;\n          } else {\n            if (current.value < parent.value) parent.left = current.right;else parent.right = current.right;\n          }\n        }\n  }\n\n  find(value) {}\n\n} //react component for binary search tree\n\n\nconst BinarySearchTree = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new BinarySearchTreeClass());\n  const insertInput = useRef();\n  const removeInput = useRef();\n  const speedSlider = useRef();\n  const focus = useRef();\n  const green = useRef();\n  const pink = useRef();\n  const interval = useRef();\n  const animating = useRef();\n  const animationFunction = useRef();\n  const animationValue = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate a random BST\n\n\n  const randomTree = () => {\n    if (animating.current) toggleAnimation();\n    const height = randInt(2, 6);\n    var newTree = new BinarySearchTreeClass();\n    var insertValue = null;\n\n    while (newTree.height <= height) {\n      insertValue = randInt(-999, 1000);\n      newTree.insert(insertValue);\n    }\n\n    newTree.remove(insertValue);\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //function to pause or continue animation\n\n\n  const toggleAnimation = useCallback(() => {\n    if (animating.current) {\n      clearInterval(interval.current);\n      animating.current = false;\n      focus.current = null;\n      animationFunction.current = null;\n      animationValue.current = null;\n    } else {\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      green.current = null;\n      pink.current = null;\n      animating.current = true;\n    }\n  }, []); //initialize the tree to a random BST\n\n  useEffect(randomTree, [toggleAnimation]); //function to insert into the binary search tree on button click\n\n  const insert = () => {\n    if (animating.current) toggleAnimation();\n    var data = parseInt(insertInput.current.value);\n    if (isNaN(data)) data = randInt(-999, 1000);\n    insertInput.current.value = null;\n    focus.current = tree.root;\n    forceUpdate();\n    animationFunction.current = insertStep;\n    animationValue.current = data;\n    toggleAnimation();\n  }; //function to do a single step of insertion animation\n\n\n  const insertStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) {\n        tree.insert(animationValue.current);\n        green.current = focus.current.left;\n        toggleAnimation();\n      } else focus.current = focus.current.left;\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) {\n        tree.insert(animationValue.current);\n        green.current = focus.current.right;\n        toggleAnimation();\n      } else focus.current = focus.current.right;\n    } else {\n      toggleAnimation();\n    }\n  }; //function to remove from binary search tree on button click\n\n\n  const remove = () => {\n    if (animating.current) toggleAnimation();\n\n    if (tree.root !== null) {\n      var data = parseInt(removeInput.current.value);\n      if (isNaN(data)) data = tree.root.value;\n      focus.current = tree.root;\n      animationFunction.current = removeStep;\n      animationValue.current = data;\n      if (focus.current.value === data) console.log(\"here\");\n      pink.current = focus.current;\n      forceUpdate();\n      toggleAnimation();\n    }\n\n    removeInput.current.value = null;\n  }; //function to do a single step of remove animation\n\n\n  const removeStep = () => {\n    if (animationValue.current < focus.current.value) {\n      if (focus.current.left === null) toggleAnimation();else {\n        focus.current = focus.current.left;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else if (animationValue.current > focus.current.value) {\n      if (focus.current.right === null) toggleAnimation();else {\n        focus.current = focus.current.right;\n        if (focus.current.value === animationValue.current) pink.current = focus.current;\n      }\n    } else {\n      tree.remove(animationValue.current);\n      pink.current = null;\n      toggleAnimation();\n    }\n  }; //changes the animation speed when the slider changes\n\n\n  const updateSpeed = () => {\n    if (animationFunction.current != null) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        animationFunction.current();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-search-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomTree,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insertButton\",\n        onClick: insert,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: insertInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeButton\",\n        onClick: remove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: removeInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree,\n        border: focus.current,\n        green: green.current,\n        pink: pink.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinarySearchTree, \"/HL6GKPYiYZKOVqdFKsE4wce4xs=\");\n\n_c = BinarySearchTree;\nexport default BinarySearchTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinarySearchTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/BinarySearchTree/BinarySearchTree.js"],"names":["React","useState","useRef","useEffect","useCallback","BinaryTreeDisplay","BinaryTreeNode","constructor","value","left","right","BinarySearchTreeClass","root","height","insert","current","parent","remove","leftmostChild","find","BinarySearchTree","forceRender","tree","setTree","insertInput","removeInput","speedSlider","focus","green","pink","interval","animating","animationFunction","animationValue","forceUpdate","renders","randomTree","toggleAnimation","randInt","newTree","insertValue","min","max","Math","floor","random","clearInterval","setInterval","data","parseInt","isNaN","insertStep","removeStep","console","log","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './BinarySearchTree.scss';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nclass BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary search tree\r\nclass BinarySearchTreeClass {\r\n    constructor(){\r\n        this.root = null;\r\n        this.height = 0;\r\n    }\r\n\r\n    insert(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        var height = 1;\r\n        while (current != null) {\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n                height++;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n                height++;\r\n            } else\r\n                return;\r\n        }\r\n        if (parent === null)\r\n            this.root = new BinaryTreeNode(value);\r\n        else if (value < parent.value)\r\n            parent.left = new BinaryTreeNode(value);\r\n        else\r\n            parent.right = new BinaryTreeNode(value);\r\n        if (height > this.height)\r\n            this.height = height;\r\n    }\r\n\r\n    remove(value) {\r\n        var current = this.root;\r\n        var parent = null;\r\n        //find a node equal to value else exit function\r\n        while (true) {\r\n            if (current === null)\r\n                return;\r\n            if (value < current.value) {\r\n                parent = current;\r\n                current = current.left;\r\n            } else if (value > current.value) {\r\n                parent = current;\r\n                current = current.right;\r\n            } else\r\n                break;\r\n        }\r\n        //if node has no children set parent child to null\r\n        if (current.left === null && current.right === null) {\r\n            if (parent === null)\r\n                this.root = null;\r\n            else if (value < parent.value)\r\n                parent.left = null;\r\n            else\r\n                parent.right = null;\r\n        }\r\n        //if node has 1 child set parent child to current child\r\n        else if (current.right === null) {\r\n            if (parent === null)\r\n                this.root = current.left;\r\n            else if (value < parent.value)\r\n                parent.left = current.left;\r\n            else\r\n                parent.right = current.left;\r\n        }\r\n        else if (current.left === null) {\r\n            if (parent === null)\r\n                this.root = current.right;\r\n            else if (value < parent.value)\r\n                parent.left = current.right;\r\n            else\r\n                parent.right = current.right;\r\n        }\r\n        //if node has 2 children set parent child to leftmost node of right subtree of current, and delete that\r\n        else {\r\n            //find the leftmost child of right subtree of current, set current to that value\r\n            var leftmostChild = current.right;\r\n            parent = current;\r\n            while (leftmostChild.left !== null) {\r\n                parent = leftmostChild;\r\n                leftmostChild = leftmostChild.left;\r\n            }\r\n            current.value = leftmostChild.value;\r\n            //delete the leftmost child of right subtree\r\n            current = leftmostChild;\r\n            if (current.left === null && current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = null;\r\n                else\r\n                    parent.right = null;\r\n            }\r\n            else if (current.right === null) {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.left;\r\n                else\r\n                    parent.right = current.left;\r\n            }\r\n            else {\r\n                if (current.value < parent.value)\r\n                    parent.left = current.right;\r\n                else\r\n                    parent.right = current.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    find (value) {\r\n\r\n    }\r\n}\r\n\r\n//react component for binary search tree\r\nconst BinarySearchTree = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinarySearchTreeClass());\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const speedSlider = useRef();\r\n    const focus = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n    const interval = useRef();\r\n    const animating = useRef();\r\n    const animationFunction = useRef();\r\n    const animationValue = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate a random BST\r\n    const randomTree = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        const height = randInt(2,6);\r\n        var newTree = new BinarySearchTreeClass();\r\n        var insertValue = null;\r\n        while(newTree.height <= height) {\r\n            insertValue = randInt(-999,1000);\r\n            newTree.insert(insertValue);\r\n        }\r\n        newTree.remove(insertValue);\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //function to pause or continue animation\r\n    const toggleAnimation = useCallback(() => {\r\n        if (animating.current) {\r\n            clearInterval(interval.current);\r\n            animating.current = false;\r\n            focus.current = null;\r\n            animationFunction.current = null;\r\n            animationValue.current = null;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            green.current = null;\r\n            pink.current = null;\r\n            animating.current = true;\r\n        }\r\n    }, []);\r\n    \r\n    //initialize the tree to a random BST\r\n    useEffect(randomTree, [toggleAnimation]);\r\n\r\n    //function to insert into the binary search tree on button click\r\n    const insert = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999, 1000);\r\n        insertInput.current.value = null;\r\n        focus.current = tree.root;\r\n        forceUpdate();\r\n        animationFunction.current = insertStep;\r\n        animationValue.current = data;\r\n        toggleAnimation();\r\n    }\r\n\r\n    //function to do a single step of insertion animation\r\n    const insertStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.left;\r\n                toggleAnimation();\r\n            } else\r\n                focus.current = focus.current.left;\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null) {\r\n                tree.insert(animationValue.current);\r\n                green.current = focus.current.right;\r\n                toggleAnimation();\r\n            } else\r\n                focus.current = focus.current.right;\r\n        } else {\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to remove from binary search tree on button click\r\n    const remove = () => {\r\n        if (animating.current)\r\n            toggleAnimation();\r\n        if(tree.root !== null) {\r\n            var data = parseInt(removeInput.current.value);\r\n            if (isNaN(data))\r\n                data = tree.root.value;\r\n            focus.current = tree.root;\r\n            animationFunction.current = removeStep;\r\n            animationValue.current = data;\r\n            if (focus.current.value === data)\r\n                console.log(\"here\");    \r\n            pink.current = focus.current;\r\n            forceUpdate();\r\n            toggleAnimation();\r\n        }\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to do a single step of remove animation\r\n    const removeStep = () => {\r\n        if (animationValue.current < focus.current.value) {\r\n            if (focus.current.left === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.left;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else if (animationValue.current > focus.current.value) {\r\n            if (focus.current.right === null)\r\n                toggleAnimation();\r\n            else {\r\n                focus.current = focus.current.right;\r\n                if (focus.current.value === animationValue.current)\r\n                    pink.current = focus.current;\r\n            }\r\n        } else {\r\n            tree.remove(animationValue.current);\r\n            pink.current = null;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //changes the animation speed when the slider changes\r\n    const updateSpeed = () => {\r\n        if (animationFunction.current != null) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                animationFunction.current();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"binary-search-tree\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                <br />\r\n                <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                <input ref={insertInput} type=\"text\"></input>\r\n                <br />\r\n                <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                <input ref={removeInput} type=\"text\"></input>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} border={focus.current} green={green.current} pink={pink.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinarySearchTree;"]},"metadata":{},"sourceType":"module"}