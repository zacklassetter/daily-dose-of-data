{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\ReactApp\\\\src\\\\DepthFirstSearch\\\\DepthFirstSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './DepthFirstSearch.scss';\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DepthFirstSearch = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [tree, setTree] = useState(new BinaryTreeClass(null));\n  const nodeQueue = useRef([]);\n  const index = useRef();\n  const searchInput = useRef();\n  const speedSlider = useRef();\n  const searching = useRef();\n  const searchValue = useRef(null);\n  const current = useRef(null);\n  const interval = useRef();\n  const green = useRef();\n  const pink = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //function to generate random tree\n\n\n  const randomTree = () => {\n    var newNodeChance = 0.9;\n    const levels = randInt(1, 5);\n    var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999, 1000)));\n    var nodes = [newTree.root];\n    var newNodes = [];\n\n    for (let level = 0; level < levels; level++) {\n      for (let i = 0; i < nodes.length; i++) {\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].left = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].left);\n        }\n\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].right = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].right);\n        }\n      }\n\n      nodes = newNodes;\n      newNodes = [];\n    }\n\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize tree to a random tree\n\n\n  useEffect(randomTree, []); //function to add nodes to queue in DFS order\n\n  const dfs = node => {\n    if (node !== null) {\n      nodeQueue.current.push(node);\n      dfs(node.left);\n      dfs(node.right);\n    }\n  }; //function to start searching animation\n\n\n  const search = () => {\n    if (searching.current) toggleAnimation();\n    var data = parseInt(searchInput.current.value);\n    if (isNaN(data)) data = tree.root.value;\n    searchInput.current.value = null;\n    nodeQueue.current = [];\n    dfs(tree.root);\n    current.current = nodeQueue.current[0];\n    index.current = 0;\n    searchValue.current = data;\n    toggleAnimation();\n    forceUpdate();\n  }; //function to 1 step of searching animation\n\n\n  const searchingStep = () => {\n    if (current.current.value === searchValue.current) {\n      green.current = current.current;\n      current.current = null;\n      searchValue.current = null;\n      toggleAnimation();\n    }\n  }; //function to turn searching on and off by button click\n\n\n  const toggleAnimation = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      searching.current = false;\n    } else {\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n      searching.current = true;\n      green.current = null;\n      pink.current = null;\n    }\n  }; //changes the animation speed of searching when the slider changes\n\n\n  const updateSpeed = () => {\n    if (searching.current) {\n      clearInterval(interval.current);\n      interval.current = setInterval(() => {\n        searchingStep();\n        forceUpdate();\n      }, 1000 - speedSlider.current.value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"depth-first-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomTree,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"searchButton\",\n        onClick: search,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"searchInput\",\n        ref: searchInput,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledSlider\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Animation Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"slider\",\n          ref: speedSlider,\n          onChange: updateSpeed,\n          min: \"0\",\n          max: \"990\",\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree,\n        border: current.current,\n        green: green.current,\n        pink: pink.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DepthFirstSearch, \"1hUzl5Eby5iZC7bKNWp/YbfIAhs=\");\n\n_c = DepthFirstSearch;\nexport default DepthFirstSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"DepthFirstSearch\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/ReactApp/src/DepthFirstSearch/DepthFirstSearch.js"],"names":["React","useState","useRef","useEffect","BinaryTreeNode","BinaryTreeClass","BinaryTreeDisplay","DepthFirstSearch","forceRender","tree","setTree","nodeQueue","index","searchInput","speedSlider","searching","searchValue","current","interval","green","pink","forceUpdate","renders","randomTree","newNodeChance","levels","randInt","newTree","nodes","root","newNodes","level","i","length","Math","random","pow","left","push","right","min","max","floor","dfs","node","search","toggleAnimation","data","parseInt","value","isNaN","searchingStep","clearInterval","setInterval","updateSpeed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './DepthFirstSearch.scss';\r\nimport { BinaryTreeNode, BinaryTreeClass } from '../BinaryTree/BinaryTree.js';\r\nimport BinaryTreeDisplay from '../BinaryTree/BinaryTreeDisplay';\r\n\r\nconst DepthFirstSearch = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [tree, setTree] = useState(new BinaryTreeClass(null));\r\n    const nodeQueue = useRef([]);\r\n    const index = useRef();\r\n    const searchInput = useRef();\r\n    const speedSlider = useRef();\r\n    const searching = useRef();\r\n    const searchValue = useRef(null);\r\n    const current = useRef(null);\r\n    const interval = useRef();\r\n    const green = useRef();\r\n    const pink = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    //function to add nodes to queue in DFS order\r\n    const dfs = (node) => {\r\n        if (node !== null) {\r\n            nodeQueue.current.push(node);\r\n            dfs(node.left);\r\n            dfs(node.right);\r\n        }\r\n\r\n    }\r\n\r\n    //function to start searching animation\r\n    const search = () => {\r\n        if (searching.current)\r\n            toggleAnimation();\r\n        var data = parseInt(searchInput.current.value);\r\n        if (isNaN(data))\r\n            data = tree.root.value;\r\n        searchInput.current.value = null;\r\n        nodeQueue.current = [];\r\n        dfs(tree.root);\r\n        current.current = nodeQueue.current[0];\r\n        index.current = 0;\r\n        searchValue.current = data;\r\n        toggleAnimation();\r\n        forceUpdate();\r\n    }\r\n\r\n    //function to 1 step of searching animation\r\n    const searchingStep = () => {\r\n        if (current.current.value === searchValue.current) {\r\n            green.current = current.current;\r\n            current.current = null;\r\n            searchValue.current = null;\r\n            toggleAnimation();\r\n        }\r\n    }\r\n\r\n    //function to turn searching on and off by button click\r\n    const toggleAnimation = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            searching.current = false;\r\n        } else {\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n            searching.current = true;\r\n            green.current = null;\r\n            pink.current = null;\r\n        }\r\n    }\r\n\r\n    //changes the animation speed of searching when the slider changes\r\n    const updateSpeed = () => {\r\n        if (searching.current) {\r\n            clearInterval(interval.current);\r\n            interval.current = setInterval(() => {\r\n                searchingStep();\r\n                forceUpdate();\r\n            }, 1000-speedSlider.current.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"depth-first-search\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n                <br />\r\n                <button id=\"searchButton\" onClick={search}>Search</button>\r\n                <input id=\"searchInput\" ref={searchInput} type=\"text\"></input>\r\n                <br />\r\n                <span className=\"labeledSlider\">\r\n                    <label>Animation Speed</label>\r\n                    <input className=\"slider\" ref={speedSlider} onChange={updateSpeed} min=\"0\" max=\"990\" type=\"range\"></input>\r\n                </span>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} border={current.current} green={green.current} pink={pink.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DepthFirstSearch;"]},"metadata":{},"sourceType":"module"}