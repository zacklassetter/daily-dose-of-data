{"ast":null,"code":"import _slicedToArray from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/quint/Documents/Daily_Dose_of_Data/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import React,{useState,useRef,useEffect}from'react';import'./HashTable.scss';import Element from'../Element/Element';//class for a hash table with linear probing\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var HashTableClass=/*#__PURE__*/function(){function HashTableClass(size,loadFactor){_classCallCheck(this,HashTableClass);this.array=[];for(var i=0;i<size;i++){this.array.push(null);}this.elements=0;this.size=size;this.LOADFACTOR=loadFactor;}//hash function to return normal modulus results with + or - numbers (value % size)\n_createClass(HashTableClass,[{key:\"hash\",value:function hash(value){return(value%this.size+this.size)%this.size;}},{key:\"resize\",value:function resize(){var oldArray=this.array;this.array=[];this.elements=0;for(var i=0;i<2*this.size;i++){this.array.push(null);}this.size=2*this.size;for(var _i=0;_i<oldArray.length;_i++){if(oldArray[_i]!==null)this.insert(oldArray[_i]);}}},{key:\"insert\",value:function insert(value){if((this.elements+1)/this.size>this.LOADFACTOR)this.resize();var hashCode=this.hash(value);while(this.array[hashCode]!==null){hashCode++;if(hashCode===this.array.length)hashCode=0;}this.array[hashCode]=value;this.elements++;return hashCode;}},{key:\"remove\",value:function remove(value){var hashCode=this.hash(value);while(this.array[hashCode]!==value){hashCode++;if(hashCode===this.array.length)hashCode=0;if(this.array[hashCode]===null)return null;}this.array[hashCode]=null;this.elements--;return hashCode;}},{key:\"find\",value:function find(value){var hashCode=this.hash(value);while(this.array[hashCode]!==value){hashCode++;if(hashCode===this.array.length)hashCode=0;if(this.array[hashCode]===null)return null;}return hashCode;}}]);return HashTableClass;}();//react component to display a hashtable\nvar HashTableDisplay=function HashTableDisplay(props){return props.hashTable.array.map(function(value,index){if(index===props.green){return/*#__PURE__*/_jsxs(\"div\",{className:\"labeledElement\",children:[/*#__PURE__*/_jsx(\"label\",{children:index}),/*#__PURE__*/_jsx(Element,{value:value,color:\"green\"})]},index);}else if(index===props.pink){return/*#__PURE__*/_jsxs(\"div\",{className:\"labeledElement\",children:[/*#__PURE__*/_jsx(\"label\",{children:index}),/*#__PURE__*/_jsx(Element,{value:value,color:\"pink\"})]},index);}else if(index===props.yellow){return/*#__PURE__*/_jsxs(\"div\",{className:\"labeledElement\",children:[/*#__PURE__*/_jsx(\"label\",{children:index}),/*#__PURE__*/_jsx(Element,{value:value,color:\"yellow\"})]},index);}else{return/*#__PURE__*/_jsxs(\"div\",{className:\"labeledElement\",children:[/*#__PURE__*/_jsx(\"label\",{children:index}),/*#__PURE__*/_jsx(Element,{value:value})]},index);}});};//react component for hash table visualization\nvar HashTable=function HashTable(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),forceRender=_useState2[1];var _useState3=useState(new HashTableClass(10,0.5)),_useState4=_slicedToArray(_useState3,2),hashTable=_useState4[0],setHashTable=_useState4[1];var randomSize=useRef();var randomLF=useRef();var buildSize=useRef();var buildLF=useRef();var insertInput=useRef();var removeInput=useRef();var findInput=useRef();var lastInserted=useRef();var lastRemoved=useRef();var lastFound=useRef();//We call update on fake state variable to force rerender\nvar forceUpdate=function forceUpdate(){forceRender(function(renders){return renders+1;});};//function to create a random hashTable\nvar randomHashTable=function randomHashTable(){lastInserted.current=null;lastRemoved.current=null;lastFound.current=null;var size=parseInt(randomSize.current.value);randomSize.current.value=null;if(isNaN(size)||size<1)size=randInt(20,100);var loadFactor=parseFloat(randomLF.current.value);randomLF.current.value=null;if(isNaN(loadFactor)||loadFactor>1.0||loadFactor<=0.0)loadFactor=Math.random()*0.5+0.25;var newHashTable=new HashTableClass(size,loadFactor);for(var i=0;i<(size*loadFactor-1)*(Math.random()*0.75+0.25);i++){newHashTable.insert(randInt(-999,1000));}setHashTable(newHashTable);};var randInt=function randInt(min,max){return Math.floor(Math.random()*(max-min)+min);};//initialize to a random hash table\nuseEffect(randomHashTable,[]);//function to build an empty hash table\nvar build=function build(){lastInserted.current=null;lastRemoved.current=null;lastFound.current=null;var size=parseInt(buildSize.current.value);buildSize.current.value=null;if(isNaN(size)||size<1)size=randInt(20,100);var loadFactor=parseFloat(buildLF.current.value);buildLF.current.value=null;if(isNaN(loadFactor)||loadFactor>1.0||loadFactor<=0.0)loadFactor=Math.random()*0.5+0.25;setHashTable(new HashTableClass(size,loadFactor));};//function to insert into hash table\nvar insert=function insert(){lastInserted.current=null;lastRemoved.current=null;lastFound.current=null;var data=parseInt(insertInput.current.value);if(isNaN(data))data=randInt(-999,1000);lastInserted.current=hashTable.insert(data);forceUpdate();insertInput.current.value=null;};//function to remove from hash table\nvar remove=function remove(){lastInserted.current=null;lastRemoved.current=null;lastFound.current=null;var data=parseInt(removeInput.current.value);if(!isNaN(data))lastRemoved.current=hashTable.remove(data);forceUpdate();removeInput.current.value=null;};//function to find a value in the hash table\nvar find=function find(){lastInserted.current=null;lastRemoved.current=null;lastFound.current=null;var data=parseInt(findInput.current.value);if(!isNaN(data))lastFound.current=hashTable.find(data);forceUpdate();findInput.current.value=null;};return/*#__PURE__*/_jsxs(\"div\",{className:\"hash-table\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"randomButton\",onClick:randomHashTable,children:\"Rand\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledInput\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Size\"}),/*#__PURE__*/_jsx(\"input\",{id:\"randomSizeInput\",ref:randomSize,type:\"text\"})]}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledInput\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Load Factor\"}),/*#__PURE__*/_jsx(\"input\",{id:\"randomLFInput\",ref:randomLF,type:\"text\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"buildButton\",onClick:build,children:\"Build\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledInput\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Size\"}),/*#__PURE__*/_jsx(\"input\",{id:\"buildSizeInput\",ref:buildSize,type:\"text\"})]}),/*#__PURE__*/_jsxs(\"span\",{className:\"labeledInput\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Load Factor\"}),/*#__PURE__*/_jsx(\"input\",{id:\"buildLFInput\",ref:buildLF,type:\"text\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"insertButton\",onClick:insert,children:\"Insert\"}),/*#__PURE__*/_jsx(\"input\",{id:\"insertInput\",ref:insertInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"removeButton\",onClick:remove,children:\"Remove\"}),/*#__PURE__*/_jsx(\"input\",{id:\"removeInput\",ref:removeInput,type:\"text\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{id:\"findButton\",onClick:find,children:\"Find\"}),/*#__PURE__*/_jsx(\"input\",{id:\"findInput\",ref:findInput,type:\"text\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"visualization\",children:[/*#__PURE__*/_jsx(HashTableDisplay,{hashTable:hashTable,green:lastInserted.current,pink:lastRemoved.current,yellow:lastFound.current}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Current Load Factor: \",(hashTable.elements/hashTable.size).toFixed(2),\" / \",hashTable.LOADFACTOR.toFixed(2)]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"legend\",children:[/*#__PURE__*/_jsx(Element,{color:\"green\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Last Inserted\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"pink\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Last Removed\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Element,{color:\"yellow\"}),/*#__PURE__*/_jsx(\"p\",{children:\"= Last Found\"})]})]});};export default HashTable;","map":{"version":3,"sources":["C:/Users/quint/Documents/Daily_Dose_of_Data/client/src/HashTable/HashTable.js"],"names":["React","useState","useRef","useEffect","Element","HashTableClass","size","loadFactor","array","i","push","elements","LOADFACTOR","value","oldArray","length","insert","resize","hashCode","hash","HashTableDisplay","props","hashTable","map","index","green","pink","yellow","HashTable","forceRender","setHashTable","randomSize","randomLF","buildSize","buildLF","insertInput","removeInput","findInput","lastInserted","lastRemoved","lastFound","forceUpdate","renders","randomHashTable","current","parseInt","isNaN","randInt","parseFloat","Math","random","newHashTable","min","max","floor","build","data","remove","find","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './HashTable.scss';\r\nimport Element from '../Element/Element';\r\n\r\n//class for a hash table with linear probing\r\nclass HashTableClass {\r\n    constructor (size, loadFactor) {\r\n        this.array = [];\r\n        for (let i = 0; i < size; i++)\r\n            this.array.push(null);\r\n        this.elements = 0;\r\n        this.size = size;\r\n        this.LOADFACTOR = loadFactor;\r\n    }\r\n\r\n    //hash function to return normal modulus results with + or - numbers (value % size)\r\n    hash (value) {\r\n        return ((value % this.size)+this.size)%this.size;\r\n    }\r\n\r\n    resize () {\r\n        let oldArray = this.array;\r\n        this.array = [];\r\n        this.elements = 0;\r\n        for (let i = 0; i < 2*this.size; i++)\r\n            this.array.push(null);\r\n        this.size = 2*this.size;\r\n        for (let i = 0; i < oldArray.length; i++)\r\n            if (oldArray[i] !== null)\r\n                this.insert(oldArray[i]);\r\n    }\r\n\r\n    insert (value) {\r\n        if ((this.elements+1)/this.size > this.LOADFACTOR)\r\n            this.resize();\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== null) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n        }\r\n        this.array[hashCode] = value;\r\n        this.elements++;\r\n        return hashCode;\r\n    }\r\n\r\n    remove (value) {\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== value) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n            if (this.array[hashCode] === null)\r\n                return null;\r\n        }\r\n        this.array[hashCode] = null;\r\n        this.elements--;\r\n        return hashCode;\r\n    }\r\n\r\n    find (value) {\r\n        let hashCode = this.hash(value);\r\n        while (this.array[hashCode] !== value) {\r\n            hashCode++;\r\n            if (hashCode === this.array.length)\r\n                hashCode = 0;\r\n            if (this.array[hashCode] === null)\r\n                return null;\r\n        }\r\n        return hashCode;\r\n    }\r\n}\r\n\r\n//react component to display a hashtable\r\nconst HashTableDisplay = (props) => {\r\n    return props.hashTable.array.map((value, index) => {\r\n        if (index === props.green) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"green\"></Element>\r\n                </div>\r\n            );\r\n        } else if (index === props.pink) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"pink\"></Element>\r\n                </div>\r\n            );\r\n        } else if (index === props.yellow) {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value} color=\"yellow\"></Element>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div key={index} className=\"labeledElement\">\r\n                    <label>{index}</label>\r\n                    <Element value={value}></Element>\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\n//react component for hash table visualization\r\nconst HashTable = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [hashTable, setHashTable] = useState(new HashTableClass(10, 0.5));\r\n    const randomSize = useRef();\r\n    const randomLF = useRef();\r\n    const buildSize = useRef();\r\n    const buildLF = useRef();\r\n    const insertInput = useRef();\r\n    const removeInput = useRef();\r\n    const findInput = useRef();\r\n    const lastInserted = useRef();\r\n    const lastRemoved = useRef();\r\n    const lastFound = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //function to create a random hashTable\r\n    const randomHashTable = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var size = parseInt(randomSize.current.value);\r\n        randomSize.current.value = null;\r\n        if (isNaN(size) || size < 1)\r\n            size = randInt(20, 100);\r\n        var loadFactor = parseFloat(randomLF.current.value);\r\n        randomLF.current.value = null;\r\n        if(isNaN(loadFactor) || loadFactor > 1.0 || loadFactor <= 0.0)\r\n            loadFactor = Math.random() * 0.5 + 0.25;\r\n        const newHashTable = new HashTableClass(size, loadFactor);\r\n        for (let i = 0; i < (size*loadFactor-1)*(Math.random()*0.75+0.25); i++)\r\n            newHashTable.insert(randInt(-999,1000));\r\n        setHashTable(newHashTable);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize to a random hash table\r\n    useEffect(randomHashTable, []);\r\n\r\n    //function to build an empty hash table\r\n    const build = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var size = parseInt(buildSize.current.value);\r\n        buildSize.current.value = null;\r\n        if (isNaN(size) || size < 1)\r\n            size = randInt(20, 100);\r\n        var loadFactor = parseFloat(buildLF.current.value);\r\n        buildLF.current.value = null;\r\n        if(isNaN(loadFactor) || loadFactor > 1.0 || loadFactor <= 0.0)\r\n            loadFactor = Math.random() * 0.5 + 0.25;\r\n        setHashTable(new HashTableClass(size, loadFactor));\r\n    }\r\n\r\n    //function to insert into hash table\r\n    const insert = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(insertInput.current.value);\r\n        if (isNaN(data))\r\n            data = randInt(-999,1000);\r\n        lastInserted.current = hashTable.insert(data);\r\n        forceUpdate();\r\n        insertInput.current.value = null;\r\n    }\r\n\r\n    //function to remove from hash table\r\n    const remove = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(removeInput.current.value);\r\n        if (!isNaN(data))\r\n            lastRemoved.current = hashTable.remove(data);\r\n        forceUpdate();\r\n        removeInput.current.value = null;\r\n    }\r\n\r\n    //function to find a value in the hash table\r\n    const find = () => {\r\n        lastInserted.current = null;\r\n        lastRemoved.current = null;\r\n        lastFound.current = null;\r\n        var data = parseInt(findInput.current.value);\r\n        if (!isNaN(data))\r\n            lastFound.current = hashTable.find(data);\r\n        forceUpdate();\r\n        findInput.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"hash-table\">\r\n            <div id=\"main\">\r\n                <div className=\"controls\">\r\n                    <button id=\"randomButton\" onClick={randomHashTable}>Rand</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Size</label>\r\n                        <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                    </span>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Load Factor</label>\r\n                        <input id=\"randomLFInput\" ref={randomLF} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"buildButton\" onClick={build}>Build</button>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Size</label>\r\n                        <input id=\"buildSizeInput\" ref={buildSize} type=\"text\"></input>\r\n                    </span>\r\n                    <span className=\"labeledInput\">\r\n                        <label>Load Factor</label>\r\n                        <input id=\"buildLFInput\" ref={buildLF} type=\"text\"></input>\r\n                    </span>\r\n                    <br />\r\n                    <button id=\"insertButton\" onClick={insert}>Insert</button>\r\n                    <input id=\"insertInput\" ref={insertInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"removeButton\" onClick={remove}>Remove</button>\r\n                    <input id=\"removeInput\" ref={removeInput} type=\"text\"></input>\r\n                    <br />\r\n                    <button id=\"findButton\" onClick={find}>Find</button>\r\n                    <input id=\"findInput\" ref={findInput} type=\"text\"></input>\r\n                </div>\r\n                <div className=\"visualization\">\r\n                    <HashTableDisplay hashTable={hashTable} green={lastInserted.current} pink={lastRemoved.current} yellow={lastFound.current} />\r\n                    <p>Current Load Factor: {(hashTable.elements / hashTable.size).toFixed(2)} / {(hashTable.LOADFACTOR).toFixed(2)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"legend\">\r\n                <Element color=\"green\"></Element>\r\n                <p>= Last Inserted</p>\r\n                < br />\r\n                <Element color=\"pink\"></Element>\r\n                <p>= Last Removed</p>\r\n                <br />\r\n                <Element color=\"yellow\"></Element>\r\n                <p>= Last Found</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HashTable;"]},"metadata":{},"sourceType":"module"}