{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\Array\\\\Array.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Array.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ArrayDisplay = props => {\n  return props.array.map((value, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labeledElement\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Element, {\n        value: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this);\n  });\n};\n\n_c = ArrayDisplay;\n\nconst Array = () => {\n  _s();\n\n  const [array, setArray] = useState([]);\n  const [, forceRender] = useState(0);\n  const randomSize = useRef();\n  const arraySize = useRef();\n  const setIndex = useRef();\n  const setValue = useRef();\n  const deleteIndex = useRef();\n  const arrayOutput = useRef();\n  const getIndex = useRef();\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //sets array to a randomly generated array\n\n\n  const randomArray = () => {\n    var size = randomSize.current.value;\n\n    if (size === \"\") {\n      size = randInt(10, 60);\n    }\n\n    if (!isNaN(parseInt(size)) && size > 0) {\n      var newArray = [];\n\n      for (let i = 0; i < size; i++) newArray.push(randInt(-999, 1000));\n\n      setArray(newArray);\n    }\n\n    randomSize.current.value = null;\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize list to random list\n\n\n  useEffect(randomArray, []);\n\n  const build = () => {\n    array.length = 0;\n    var size = arraySize.current.value;\n\n    while (size > 0) {\n      array.push(null);\n      size--;\n    }\n\n    arraySize.current.value = null;\n    forceUpdate();\n  };\n\n  const insert = () => {\n    const index = parseInt(setIndex.current.value);\n    const value = parseInt(setValue.current.value);\n\n    if (!isNaN(index) && !isNaN(value) && index >= 0 && index < array.length) {\n      array[index] = value;\n      forceUpdate();\n    } else {\n      arrayOutput.current.value = \"Invalid\";\n    }\n\n    setIndex.current.value = null;\n    setValue.current.value = null;\n  };\n\n  const remove = () => {\n    const index = parseInt(deleteIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < array.length) {\n      const data = array[index];\n      arrayOutput.current.value = data;\n\n      if (array[index] == null) {\n        arrayOutput.current.value = \"Invalid\";\n      }\n\n      array[index] = null;\n      forceUpdate();\n    } else {\n      arrayOutput.current.value = \"Invalid\";\n    }\n\n    deleteIndex.current.value = null;\n  };\n\n  const get = () => {\n    const index = parseInt(getIndex.current.value);\n\n    if (!isNaN(index) && index >= 0 && index < array.length) {\n      const data = array[index];\n      arrayOutput.current.value = data;\n\n      if (array[index] == null) {\n        arrayOutput.current.value = \"null\";\n      }\n    } else {\n      arrayOutput.current.value = \"Invalid\";\n    }\n\n    getIndex.current.value = null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"array\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomArray,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"randomSizeInput\",\n          ref: randomSize,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"buildButton\",\n        onClick: build,\n        children: \"Build\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: arraySize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"setButton\",\n        onClick: insert,\n        children: \"Set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"setIndex\",\n          type: \"text\",\n          ref: setIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"setValue\",\n          type: \"text\",\n          ref: setValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"deleteButton\",\n        onClick: remove,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: deleteIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"getButton\",\n        onClick: get,\n        children: \"Get\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"labeledInput\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Index\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: getIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"arrayOutput\",\n        type: \"text\",\n        ref: arrayOutput,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(ArrayDisplay, {\n        array: array\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Array, \"P8Z2N3ERK9WUSvcT0gwVZtTj8u0=\");\n\n_c2 = Array;\nexport default Array;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ArrayDisplay\");\n$RefreshReg$(_c2, \"Array\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/Array/Array.js"],"names":["React","useState","useRef","useEffect","Element","ArrayDisplay","props","array","map","value","index","Array","setArray","forceRender","randomSize","arraySize","setIndex","setValue","deleteIndex","arrayOutput","getIndex","forceUpdate","renders","randomArray","size","current","randInt","isNaN","parseInt","newArray","i","push","min","max","Math","floor","random","build","length","insert","remove","data","get"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Array.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst ArrayDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        return (\r\n            <div key={index} className=\"labeledElement\">\r\n                <label>{index}</label>\r\n                <Element value={value}></Element>\r\n            </div>\r\n        );\r\n    });\r\n}\r\n\r\nconst Array = () => {\r\n    const [array, setArray] = useState([]);\r\n    const [, forceRender] = useState(0);\r\n    const randomSize = useRef();\r\n    const arraySize = useRef();\r\n    const setIndex = useRef();\r\n    const setValue = useRef();\r\n    const deleteIndex = useRef();\r\n    const arrayOutput = useRef();\r\n    const getIndex = useRef();\r\n\r\n    const forceUpdate = () => {\r\n        forceRender(renders => renders + 1);\r\n    }\r\n\r\n    //sets array to a randomly generated array\r\n    const randomArray = () => {\r\n        var size = randomSize.current.value;\r\n        if (size === \"\") {\r\n            size = randInt(10, 60);\r\n        }\r\n        if (!isNaN(parseInt(size)) && size > 0) {\r\n            var newArray = [];\r\n            for (let i = 0; i < size; i++)\r\n                newArray.push(randInt(-999,1000));\r\n            setArray(newArray);\r\n        }\r\n        randomSize.current.value = null;\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize list to random list\r\n    useEffect(randomArray, []);\r\n\r\n    const build = () => {\r\n        array.length = 0;\r\n            var size = arraySize.current.value;\r\n            while (size > 0) {\r\n                array.push(null);\r\n                size--;\r\n        }\r\n        arraySize.current.value = null;\r\n            forceUpdate();\r\n        \r\n    }\r\n\r\n    const insert = () => {\r\n        const index = parseInt(setIndex.current.value);\r\n        const value = parseInt(setValue.current.value);\r\n        if (!isNaN(index) && !isNaN(value) && index >= 0 && index < array.length) {\r\n            array[index] = value;\r\n            forceUpdate();\r\n        } else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        setIndex.current.value = null;\r\n        setValue.current.value = null;\r\n    }\r\n\r\n    const remove = () => {\r\n        const index = parseInt(deleteIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < array.length) {\r\n            const data = array[index];\r\n            arrayOutput.current.value = data;\r\n            if (array[index] == null) {\r\n                arrayOutput.current.value = \"Invalid\";\r\n            }\r\n            array[index] = null;\r\n            \r\n            forceUpdate();\r\n            \r\n        }\r\n        \r\n        else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        deleteIndex.current.value = null;\r\n    }\r\n\r\n    const get = () => {\r\n        const index = parseInt(getIndex.current.value);\r\n        if (!isNaN(index) && index >= 0 && index < array.length) {\r\n            const data = array[index];\r\n            arrayOutput.current.value = data;\r\n            if (array[index] == null) {\r\n                arrayOutput.current.value = \"null\";\r\n            }\r\n        } else {\r\n            arrayOutput.current.value = \"Invalid\";\r\n        }\r\n        getIndex.current.value = null;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"array\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomArray}>Random</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input id=\"randomSizeInput\" ref={randomSize} type=\"text\"></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"buildButton\" onClick={build}>Build</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Size</label>\r\n                    <input type=\"text\" ref={arraySize}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"setButton\" onClick={insert}>Set</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input id=\"setIndex\" type=\"text\" ref={setIndex}></input>\r\n                </span>\r\n                <span className=\"labeledInput\">\r\n                    <label>Value</label>\r\n                    <input id=\"setValue\" type=\"text\" ref={setValue}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"deleteButton\" onClick={remove}>Delete</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input type=\"text\" ref={deleteIndex}></input>\r\n                </span>\r\n                <br />\r\n                <button id=\"getButton\" onClick={get}>Get</button>\r\n                <span className=\"labeledInput\">\r\n                    <label>Index</label>\r\n                    <input type=\"text\" ref={getIndex}></input>\r\n                </span>\r\n                \r\n                <br />\r\n                <input id=\"arrayOutput\" type=\"text\" ref={arrayOutput} readOnly></input>\r\n                <br />\r\n                \r\n            </div>\r\n            <div className=\"visualization\">\r\n                <ArrayDisplay array={array} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Array;"]},"metadata":{},"sourceType":"module"}