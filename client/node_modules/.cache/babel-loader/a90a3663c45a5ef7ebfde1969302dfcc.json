{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\ReactApp\\\\src\\\\SelectionSort\\\\SelectionSort.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './SelectionSort.scss';\nimport Element from '../Element/Element';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectionSortDisplay = props => {\n  return props.array.map((value, index) => {\n    if (index < props.sortedEndIndex) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"green\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentMinimum && index === props.currentFocus) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"pink\",\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentMinimum) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      color: \"pink\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 20\n    }, this);\n    if (index === props.currentFocus) return /*#__PURE__*/_jsxDEV(Element, {\n      value: value,\n      border: \"bordered\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 20\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Element, {\n      value: value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  });\n};\n\n_c = SelectionSortDisplay;\n\nconst SelectionSort = () => {\n  _s();\n\n  const [, forceRender] = useState(0);\n  const [array] = useState([3, 7, 2, -3, 0, 22, 5, 1, -8, 9]);\n  const [sorted, setSorted] = useState(false);\n  const sorting = useRef(false);\n  const interval = useRef(null);\n  const sortedEndIndex = useRef(0);\n  const currentFocus = useRef(-1);\n  const currentMinimum = useRef(-1);\n  const toggleSortingButton = useRef();\n  const generateArrayButton = useRef(); //We call update on fake state variable to force rerender\n\n  const forceUpdate = () => {\n    forceRender(renders => renders + 1);\n  }; //completes one step of the sorting algorithm\n\n\n  const sortingStep = () => {\n    if (sortedEndIndex.current === array.length) {\n      setSorted(true);\n      toggleSorting();\n      return;\n    }\n\n    if (currentFocus.current === array.length - 1) {\n      var temp = array[sortedEndIndex.current];\n      array[sortedEndIndex.current] = array[currentMinimum.current];\n      array[currentMinimum.current] = temp;\n      sortedEndIndex.current += 1;\n      currentFocus.current = sortedEndIndex.current - 1;\n      currentMinimum.current = -1;\n      return;\n    }\n\n    currentFocus.current += 1;\n\n    if (currentMinimum.current === -1) {\n      currentMinimum.current = currentFocus.current;\n    } else if (array[currentMinimum.current] > array[currentFocus.current]) {\n      currentMinimum.current = currentFocus.current;\n    }\n  }; //function to turn sorting on and off by button click\n\n\n  const toggleSorting = () => {\n    if (sorting.current) {\n      clearInterval(interval.current);\n      sorting.current = false;\n      toggleSortingButton.current.innerHTML = \"Start\";\n    } else if (!sorted) {\n      interval.current = setInterval(() => {\n        sortingStep();\n        forceUpdate();\n      }, 100);\n      sorting.current = true;\n      toggleSortingButton.current.innerHTML = \"Stop\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selection-sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"toggleSortingButton\",\n        ref: toggleSortingButton,\n        onClick: toggleSorting,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"generateArrayButton\",\n        ref: generateArrayButton,\n        onClick: generateArray,\n        children: \"Random Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(SelectionSortDisplay, {\n        array: array,\n        sortedEndIndex: sortedEndIndex.current,\n        currentFocus: currentFocus.current,\n        currentMinimum: currentMinimum.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectionSort, \"C+TMA05Y48ZWSt6umgRbwWGGErM=\");\n\n_c2 = SelectionSort;\nexport default SelectionSort;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SelectionSortDisplay\");\n$RefreshReg$(_c2, \"SelectionSort\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/ReactApp/src/SelectionSort/SelectionSort.js"],"names":["React","useState","useRef","Element","SelectionSortDisplay","props","array","map","value","index","sortedEndIndex","currentMinimum","currentFocus","SelectionSort","forceRender","sorted","setSorted","sorting","interval","toggleSortingButton","generateArrayButton","forceUpdate","renders","sortingStep","current","length","toggleSorting","temp","clearInterval","innerHTML","setInterval","generateArray"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './SelectionSort.scss';\r\nimport Element from '../Element/Element';\r\n\r\nconst SelectionSortDisplay = (props) => {\r\n    return props.array.map((value, index) => {\r\n        if (index < props.sortedEndIndex)\r\n            return <Element key={index} value={value} color=\"green\" />\r\n        if (index === props.currentMinimum && index === props.currentFocus)\r\n            return <Element key={index} value={value} color=\"pink\" border=\"bordered\" />\r\n        if (index === props.currentMinimum)\r\n            return <Element key={index} value={value} color=\"pink\" />\r\n        if (index === props.currentFocus)\r\n            return <Element key={index} value={value} border=\"bordered\" />\r\n        return <Element key={index} value={value} />\r\n    });\r\n}\r\n\r\nconst SelectionSort = () => {\r\n\r\n    const [, forceRender] = useState(0);\r\n    const [array,] = useState([3,7,2,-3,0,22,5,1,-8,9]);\r\n    const [sorted, setSorted] = useState(false);\r\n    const sorting = useRef(false);\r\n    const interval = useRef(null);\r\n    const sortedEndIndex = useRef(0);\r\n    const currentFocus = useRef(-1);\r\n    const currentMinimum = useRef(-1);\r\n    const toggleSortingButton = useRef();\r\n    const generateArrayButton = useRef();\r\n\r\n    //We call update on fake state variable to force rerender\r\n\tconst forceUpdate = () => {\r\n\t\tforceRender(renders => renders+1);\r\n\t}\r\n\r\n    //completes one step of the sorting algorithm\r\n    const sortingStep = () => {\r\n        if (sortedEndIndex.current === array.length) {\r\n            setSorted(true);\r\n            toggleSorting();\r\n            return;\r\n        }\r\n        if (currentFocus.current === array.length-1) {\r\n            var temp = array[sortedEndIndex.current];\r\n            array[sortedEndIndex.current] = array[currentMinimum.current];\r\n            array[currentMinimum.current] = temp;\r\n            sortedEndIndex.current += 1;\r\n            currentFocus.current = sortedEndIndex.current-1;\r\n            currentMinimum.current = -1;\r\n            return;\r\n        }\r\n        currentFocus.current += 1;\r\n        if (currentMinimum.current === -1) {\r\n            currentMinimum.current = currentFocus.current;\r\n        } else if (array[currentMinimum.current] > array[currentFocus.current]) {\r\n            currentMinimum.current = currentFocus.current;\r\n        }\r\n    }\r\n\r\n    //function to turn sorting on and off by button click\r\n    const toggleSorting = () => {\r\n        if (sorting.current) {\r\n            clearInterval(interval.current);\r\n            sorting.current = false;\r\n            toggleSortingButton.current.innerHTML = \"Start\";\r\n        } else if (!sorted) {\r\n            interval.current = setInterval(() => {\r\n                sortingStep();\r\n                forceUpdate();\r\n            }, 100);\r\n            sorting.current = true;\r\n            toggleSortingButton.current.innerHTML = \"Stop\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"selection-sort\">\r\n            <div className=\"controls\">\r\n                <button id=\"toggleSortingButton\" ref={toggleSortingButton} onClick={toggleSorting}>Start</button>\r\n                <br />\r\n                <button id=\"generateArrayButton\" ref={generateArrayButton} onClick={generateArray}>Random Array</button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <SelectionSortDisplay array={array} sortedEndIndex={sortedEndIndex.current} currentFocus = {currentFocus.current} currentMinimum={currentMinimum.current} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectionSort;"]},"metadata":{},"sourceType":"module"}