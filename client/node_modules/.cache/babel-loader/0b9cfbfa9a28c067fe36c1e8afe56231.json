{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Daily_Dose_of_Data\\\\client\\\\src\\\\BinaryTree\\\\BinaryTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './BinaryTree.scss';\nimport BinaryTreeDisplay from './BinaryTreeDisplay.js'; //class for node in binary tree\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class BinaryTreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n} //class for binary tree data structure\n\nexport class BinaryTreeClass {\n  constructor(root) {\n    this.root = root;\n  }\n\n} //main react component for binary tree\n\nconst BinaryTree = () => {\n  _s();\n\n  const [tree, setTree] = useState(null); //function to generate random tree\n\n  const randomTree = () => {\n    var newNodeChance = 0.9;\n    const levels = randInt(1, 5);\n    var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999, 1000)));\n    var nodes = [newTree.root];\n    var newNodes = [];\n\n    for (let level = 0; level < levels; level++) {\n      for (let i = 0; i < nodes.length; i++) {\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].left = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].left);\n        }\n\n        if (Math.random() < Math.pow(newNodeChance, level)) {\n          nodes[i].right = new BinaryTreeNode(randInt(-999, 1000));\n          newNodes.push(nodes[i].right);\n        }\n      }\n\n      nodes = newNodes;\n      newNodes = [];\n    }\n\n    setTree(newTree);\n  };\n\n  const randInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }; //initialize tree to a random tree\n\n\n  useEffect(randomTree, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"binary-tree\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"randomButton\",\n        onClick: randomTree,\n        children: \"Random\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(BinaryTreeDisplay, {\n        tree: tree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BinaryTree, \"C2wasZ4/w/uTJY5LyroNkQBd1w0=\");\n\n_c = BinaryTree;\nexport default BinaryTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/src/BinaryTree/BinaryTree.js"],"names":["React","useState","useEffect","BinaryTreeDisplay","BinaryTreeNode","constructor","value","left","right","BinaryTreeClass","root","BinaryTree","tree","setTree","randomTree","newNodeChance","levels","randInt","newTree","nodes","newNodes","level","i","length","Math","random","pow","push","min","max","floor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './BinaryTree.scss';\r\nimport BinaryTreeDisplay from './BinaryTreeDisplay.js';\r\n\r\n//class for node in binary tree\r\nexport class BinaryTreeNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\n//class for binary tree data structure\r\nexport class BinaryTreeClass {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n}\r\n\r\n//main react component for binary tree\r\nconst BinaryTree = () => {\r\n\r\n    const [tree, setTree] = useState(null);\r\n    \r\n    //function to generate random tree\r\n    const randomTree = () => {\r\n        var newNodeChance = 0.9;\r\n        const levels = randInt(1,5);\r\n        var newTree = new BinaryTreeClass(new BinaryTreeNode(randInt(-999,1000)));\r\n        var nodes = [newTree.root];\r\n        var newNodes = [];\r\n        for (let level = 0; level < levels; level++) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].left = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].left);\r\n                }\r\n                if (Math.random() < Math.pow(newNodeChance, level)) {\r\n                    nodes[i].right = new BinaryTreeNode(randInt(-999,1000));\r\n                    newNodes.push(nodes[i].right);\r\n                }\r\n            }\r\n            nodes = newNodes;\r\n            newNodes = [];\r\n        }\r\n        setTree(newTree);\r\n    }\r\n    const randInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max-min) + min);\r\n    }\r\n\r\n    //initialize tree to a random tree\r\n    useEffect(randomTree, []);\r\n\r\n    return (\r\n        <div className=\"binary-tree\">\r\n            <div className=\"controls\">\r\n                <button id=\"randomButton\" onClick={randomTree}>Random</button>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <BinaryTreeDisplay tree={tree} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BinaryTree;"]},"metadata":{},"sourceType":"module"}