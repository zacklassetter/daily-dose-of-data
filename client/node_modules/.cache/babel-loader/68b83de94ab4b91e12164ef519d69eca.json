{"ast":null,"code":"import React from'react';import'./BinaryTreeDisplay.scss';import Element from'../Element/Element';//react component for a single level in a binary tree\nimport{jsx as _jsx}from\"react/jsx-runtime\";var BinaryTreeLevel=function BinaryTreeLevel(props){return props.list.map(function(node,index){if(node===null)return/*#__PURE__*/_jsx(Element,{value:\"\",color:\"none\"},index);else if(node===props.green)return/*#__PURE__*/_jsx(Element,{value:node.value,color:\"green\"},index);else if(node===props.pink)return/*#__PURE__*/_jsx(Element,{value:node.value,color:\"pink\"},index);else if(node===props.yellow)return/*#__PURE__*/_jsx(Element,{value:node.value,color:\"yellow\"},index);else if(node===props.border)return/*#__PURE__*/_jsx(Element,{value:node.value,border:\"bordered\"},index);else return/*#__PURE__*/_jsx(Element,{value:node.value},index);});};//react component for lines between binary tree nodes\nvar BinaryTreeLineLevel=function BinaryTreeLineLevel(props){var lines=[];for(var i=0;i<props.list.length;i++){if(props.list[i]===null)lines.push(/*#__PURE__*/_jsx(\"div\",{className:\"binary-tree-line-none\"},lines.length));else if(i%2===0)lines.push(/*#__PURE__*/_jsx(\"div\",{className:\"binary-tree-line-left\"},lines.length));else lines.push(/*#__PURE__*/_jsx(\"div\",{className:\"binary-tree-line-right\"},lines.length));}return lines;};//react component to display the tree\nvar BinaryTreeDisplay=function BinaryTreeDisplay(props){var levelComponents=[];var nextQueue=[];if(props.tree!==null)nextQueue.push(props.tree.root);var currQueue=[];while(true){//continue breadth-first traversal creating BinaryTreeLevel component every iteration\ncurrQueue=nextQueue;nextQueue=[];for(var i=0;i<currQueue.length;i++){//use null as placeholder empty nodes in a level\nif(currQueue[i]===null){nextQueue.push(null);nextQueue.push(null);}else{nextQueue.push(currQueue[i].left);nextQueue.push(currQueue[i].right);}}//add a level of nodes\nlevelComponents.push(/*#__PURE__*/_jsx(\"div\",{className:\"binary-tree-level\",children:/*#__PURE__*/_jsx(BinaryTreeLevel,{list:currQueue,border:props.border,green:props.green,pink:props.pink,yellow:props.yellow})},levelComponents.length));//break loop if entire level is null\nvar allNull=true;for(var _i=0;_i<nextQueue.length;_i++){if(nextQueue[_i]!==null){allNull=false;}}if(allNull){break;}//add a level of lines to the next level\nlevelComponents.push(/*#__PURE__*/_jsx(\"div\",{className:\"binary-tree-line-level\",children:/*#__PURE__*/_jsx(BinaryTreeLineLevel,{list:nextQueue})},levelComponents.length));}return levelComponents;};export default BinaryTreeDisplay;","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Daily_Dose_of_Data/client/src/BinaryTree/BinaryTreeDisplay.js"],"names":["React","Element","BinaryTreeLevel","props","list","map","node","index","green","value","pink","yellow","border","BinaryTreeLineLevel","lines","i","length","push","BinaryTreeDisplay","levelComponents","nextQueue","tree","root","currQueue","left","right","allNull"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './BinaryTreeDisplay.scss';\r\nimport Element from '../Element/Element';\r\n\r\n\r\n//react component for a single level in a binary tree\r\nconst BinaryTreeLevel = (props) => {\r\n    return props.list.map((node, index) => {\r\n        if (node === null)\r\n            return <Element key={index} value={\"\"} color={\"none\"} />;\r\n        else if (node === props.green)\r\n            return <Element key={index} value={node.value} color=\"green\" />;\r\n        else if (node === props.pink)\r\n            return <Element key={index} value={node.value} color=\"pink\" />;\r\n        else if (node === props.yellow)\r\n            return <Element key={index} value={node.value} color=\"yellow\" />;\r\n        else if (node === props.border)\r\n            return <Element key={index} value={node.value} border=\"bordered\" />;\r\n        else\r\n            return <Element key={index} value={node.value} />;\r\n    });\r\n}\r\n\r\n//react component for lines between binary tree nodes\r\nconst BinaryTreeLineLevel = (props) => {\r\n    var lines = [];\r\n    for (let i = 0; i < props.list.length; i++) {\r\n        if (props.list[i] === null)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-none\"></div>);\r\n        else if (i % 2 === 0)\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-left\"></div>);\r\n        else\r\n            lines.push(<div key={lines.length} className=\"binary-tree-line-right\"></div>);\r\n        \r\n    }\r\n    return lines;\r\n}\r\n\r\n//react component to display the tree\r\nconst BinaryTreeDisplay = (props) => {\r\n    var levelComponents = [];\r\n    var nextQueue = [];\r\n    if (props.tree !== null)\r\n        nextQueue.push(props.tree.root);\r\n    var currQueue = [];\r\n    while (true) {\r\n        //continue breadth-first traversal creating BinaryTreeLevel component every iteration\r\n        currQueue = nextQueue;\r\n        nextQueue = [];\r\n        for (let i = 0; i < currQueue.length; i++) {\r\n            //use null as placeholder empty nodes in a level\r\n            if (currQueue[i] === null) {\r\n                nextQueue.push(null);\r\n                nextQueue.push(null);\r\n            } else {\r\n                nextQueue.push(currQueue[i].left);\r\n                nextQueue.push(currQueue[i].right);\r\n            }\r\n        }\r\n        //add a level of nodes\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-level\">\r\n                <BinaryTreeLevel list={currQueue} border={props.border} green={props.green} pink={props.pink} yellow={props.yellow} />\r\n            </div>\r\n        );\r\n        //break loop if entire level is null\r\n        var allNull = true;\r\n        for (let i = 0; i < nextQueue.length; i++) {\r\n            if (nextQueue[i] !== null) {\r\n                allNull = false;\r\n            }\r\n        }\r\n        if (allNull) {\r\n            break;\r\n        }\r\n        //add a level of lines to the next level\r\n        levelComponents.push(\r\n            <div key={levelComponents.length} className=\"binary-tree-line-level\">\r\n                <BinaryTreeLineLevel list={nextQueue} />\r\n            </div>\r\n        );\r\n    }\r\n    return levelComponents;\r\n}\r\n\r\nexport default BinaryTreeDisplay;"]},"metadata":{},"sourceType":"module"}