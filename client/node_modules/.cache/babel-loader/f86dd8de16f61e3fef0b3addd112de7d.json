{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qdeman\\\\Documents\\\\Web_Project\\\\Testing\\\\quintenreacttesting\\\\src\\\\Stack\\\\Stack.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './Stack.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StackComponent = () => {\n  _s();\n\n  const [stack, setStack] = useState([]);\n  const stackInput = useRef();\n  const stackOutput = useRef(); //We call setStack without changing anything to force a re-render\n\n  const forceUpdate = () => {\n    setStack(prevStack => prevStack);\n  };\n\n  const push = () => {\n    const data = parseInt(stackInput.current.value);\n\n    if (!isNaN(data)) {\n      stack.push(data);\n      forceUpdate();\n    }\n\n    stackInput.current.value = null;\n  };\n\n  const pop = () => {\n    const data = stack.pop();\n    stackOutput.current.value = data;\n    forceUpdate();\n  };\n\n  const peek = () => {\n    const data = stack[stack.length - 1];\n    stackOutput.current.value = data;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: push,\n      children: \"Push\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: stackInput,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: pop,\n      children: \"Pop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: stackOutput,\n      type: \"text\",\n      readOnly: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: peek,\n      children: \"Peek\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StackComponent, \"0Uq/kzg5rQNqHYemoUYBdMObhII=\");\n\n_c = StackComponent;\nexport default StackComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StackComponent\");","map":{"version":3,"sources":["C:/Users/qdeman/Documents/Web_Project/Testing/quintenreacttesting/src/Stack/Stack.js"],"names":["React","useState","useRef","StackComponent","stack","setStack","stackInput","stackOutput","forceUpdate","prevStack","push","data","parseInt","current","value","isNaN","pop","peek","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,aAAP;;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAE5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMK,UAAU,GAAGJ,MAAM,EAAzB;AACA,QAAMK,WAAW,GAAGL,MAAM,EAA1B,CAJ4B,CAM5B;;AACA,QAAMM,WAAW,GAAG,MAAM;AACzBH,IAAAA,QAAQ,CAACI,SAAS,IAAKA,SAAf,CAAR;AACA,GAFD;;AAIA,QAAMC,IAAI,GAAG,MAAM;AAClB,UAAMC,IAAI,GAAGC,QAAQ,CAACN,UAAU,CAACO,OAAX,CAAmBC,KAApB,CAArB;;AACA,QAAI,CAACC,KAAK,CAACJ,IAAD,CAAV,EAAkB;AACjBP,MAAAA,KAAK,CAACM,IAAN,CAAWC,IAAX;AACAH,MAAAA,WAAW;AACX;;AACDF,IAAAA,UAAU,CAACO,OAAX,CAAmBC,KAAnB,GAA2B,IAA3B;AACA,GAPD;;AASA,QAAME,GAAG,GAAG,MAAM;AACjB,UAAML,IAAI,GAAGP,KAAK,CAACY,GAAN,EAAb;AACAT,IAAAA,WAAW,CAACM,OAAZ,CAAoBC,KAApB,GAA4BH,IAA5B;AACAH,IAAAA,WAAW;AACX,GAJD;;AAMA,QAAMS,IAAI,GAAG,MAAM;AAClB,UAAMN,IAAI,GAAGP,KAAK,CAACA,KAAK,CAACc,MAAN,GAAa,CAAd,CAAlB;AACAX,IAAAA,WAAW,CAACM,OAAZ,CAAoBC,KAApB,GAA4BH,IAA5B;AACA,GAHD;;AAIA,sBACC;AAAA,4BACC;AAAQ,MAAA,OAAO,EAAED,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAO,MAAA,GAAG,EAAEJ,UAAZ;AAAwB,MAAA,IAAI,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAA;AAAA;AAAA;AAAA,YAHD,eAIC;AAAQ,MAAA,OAAO,EAAEU,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD,eAKC;AAAO,MAAA,GAAG,EAAET,WAAZ;AAAyB,MAAA,IAAI,EAAC,MAA9B;AAAqC,MAAA,QAAQ;AAA7C;AAAA;AAAA;AAAA;AAAA,YALD,eAMC;AAAQ,MAAA,OAAO,EAAEU,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAND;AAAA,kBADD;AAUA,CAxCD;;GAAMd,c;;KAAAA,c;AA0CN,eAAeA,cAAf","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './Stack.css';\r\n\r\nconst StackComponent = () => {\r\n\t\r\n\tconst [stack, setStack] = useState([])\r\n\tconst stackInput = useRef()\r\n\tconst stackOutput = useRef()\r\n\t\r\n\t//We call setStack without changing anything to force a re-render\r\n\tconst forceUpdate = () => {\r\n\t\tsetStack(prevStack => (prevStack));\r\n\t}\r\n\t\r\n\tconst push = () => {\r\n\t\tconst data = parseInt(stackInput.current.value);\r\n\t\tif (!isNaN(data)) {\r\n\t\t\tstack.push(data);\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t\tstackInput.current.value = null;\r\n\t}\r\n\t\r\n\tconst pop = () => {\r\n\t\tconst data = stack.pop();\r\n\t\tstackOutput.current.value = data;\r\n\t\tforceUpdate();\r\n\t}\r\n\t\r\n\tconst peek = () => {\r\n\t\tconst data = stack[stack.length-1];\r\n\t\tstackOutput.current.value = data;\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<button onClick={push}>Push</button>\r\n\t\t\t<input ref={stackInput} type=\"text\" />\r\n\t\t\t<br />\r\n\t\t\t<button onClick={pop}>Pop</button>\r\n\t\t\t<input ref={stackOutput} type=\"text\" readOnly />\r\n\t\t\t<button onClick={peek}>Peek</button>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default StackComponent;"]},"metadata":{},"sourceType":"module"}